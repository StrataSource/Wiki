[
    {
        "type": "BASE",
        "classname": "Angles",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Pitch Yaw Roll (Y Z X)",
                "key": "angles",
                "type": "angle",
                "default": "0 0 0",
                "desc": "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "BaseEffectBrush",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Name",
                "key": "targetname",
                "type": "target_source",
                "default": "",
                "desc": "The name that other entities refer to this entity by."
            },
            {
                "name": "Global Entity Name",
                "key": "globalname",
                "type": "string",
                "default": "",
                "desc": "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
            },
            {
                "name": "Parent",
                "key": "parentname",
                "type": "target_destination",
                "default": "",
                "desc": "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
            },
            {
                "name": "Attachment Point",
                "key": "parent_attachment_point",
                "type": "string",
                "default": "",
                "desc": "If set, attach to this attachment point on the parent during spawn."
            },
            {
                "name": "Entity Scripts",
                "key": "vscripts",
                "type": "scriptlist",
                "default": "",
                "desc": "Name(s) of script files that are executed after all entities have spawned."
            },
            {
                "name": "Script think function",
                "key": "thinkfunction",
                "type": "string",
                "default": "",
                "desc": "Name of a function in this entity's script scope which will be called automatically."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "BaseEntity",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Name",
                "key": "targetname",
                "type": "target_source",
                "default": "",
                "desc": "The name that other entities refer to this entity by."
            },
            {
                "name": "Global Entity Name",
                "key": "globalname",
                "type": "string",
                "default": "",
                "desc": "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
            },
            {
                "name": "Entity Scripts",
                "key": "vscripts",
                "type": "scriptlist",
                "default": "",
                "desc": "Name(s) of script files that are executed after all entities have spawned."
            },
            {
                "name": "Script think function",
                "key": "thinkfunction",
                "type": "string",
                "default": "",
                "desc": "Name of a function in this entity's script scope which will be called automatically."
            },
            {
                "name": "Init Code",
                "key": "vscript_init_code",
                "type": "string",
                "default": "",
                "desc": "This code will be executed after the Entity Scripts option. Backtick ( ` ) characters will be converted to quotes in-game for strings."
            },
            {
                "name": "Init Code 2",
                "key": "vscript_init_code2",
                "type": "string",
                "default": "",
                "desc": "This code will be the second line executed after the Entity Scripts option. Backtick ( ` ) characters will be converted to quotes in-game for strings. Additional Init Code keyvalues can be added with SmartEdit off."
            }
        ],
        "inputs": [
            {
                "name": "Kill",
                "type": "void",
                "desc": "Removes this entity from the world."
            },
            {
                "name": "KillHierarchy",
                "type": "void",
                "desc": "Removes this entity and all its children from the world."
            },
            {
                "name": "AddOutput",
                "type": "string",
                "desc": "Adds an entity I/O connection to this entity or changes keyvalues dynamically. Format:\n'<output name> <targetname>:<inputname>:<parameter>:<delay>:<max times to fire (-1 == infinite, 1 = only once)>'\nor 'keyvalue newval'. Very dangerous, use with care."
            },
            {
                "name": "FireUser1",
                "type": "void",
                "desc": "Causes this entity's OnUser1 output to be fired."
            },
            {
                "name": "FireUser2",
                "type": "void",
                "desc": "Causes this entity's OnUser2 output to be fired."
            },
            {
                "name": "FireUser3",
                "type": "void",
                "desc": "Causes this entity's OnUser3 output to be fired."
            },
            {
                "name": "FireUser4",
                "type": "void",
                "desc": "Causes this entity's OnUser4 output to be fired."
            },
            {
                "name": "Use",
                "type": "void",
                "desc": "More or less replicates the player interacting with an entity. (+USE)"
            },
            {
                "name": "RunScriptFile",
                "type": "string",
                "desc": "Execute a game script file from disk."
            },
            {
                "name": "RunScriptCode",
                "type": "script",
                "desc": "Execute a string of script source code. Backtick ( ` ) characters will be converted to quotes in-game for strings."
            },
            {
                "name": "CallScriptFunction",
                "type": "string",
                "desc": "Execute the given function name."
            },
            {
                "name": "CancelPending",
                "type": "void",
                "desc": "Cancels any events fired by this entity that are currently pending in the I/O event queue."
            },
            {
                "name": "PassUser1",
                "type": "string",
                "desc": "Causes this entity's OutUser1 output to be fired, passing along the parameter unchanged."
            },
            {
                "name": "PassUser2",
                "type": "string",
                "desc": "Causes this entity's OutUser2 output to be fired, passing along the parameter unchanged."
            },
            {
                "name": "PassUser3",
                "type": "string",
                "desc": "Causes this entity's OutUser3 output to be fired, passing along the parameter unchanged."
            },
            {
                "name": "PassUser4",
                "type": "string",
                "desc": "Causes this entity's OutUser4 output to be fired, passing along the parameter unchanged."
            },
            {
                "name": "FireRandomUser",
                "type": "void",
                "desc": "Fires OnUser1, OnUser2, OnUser3, or OnUser4 with a 25% chance of each."
            },
            {
                "name": "PassRandomUser",
                "type": "string",
                "desc": "Fires OutUser1, OutUser2, OutUser3, or OutUser4 with a 25% chance of each. The parameter is passed along unchanged."
            },
            {
                "name": "KillIfNotVisible",
                "type": "void",
                "desc": "Removes this entity if it is not in the player's viewcone."
            },
            {
                "name": "KillWhenNotVisible",
                "type": "void",
                "desc": "Removes this entity when it is not in the player's viewcone."
            },
            {
                "name": "FireOutput",
                "type": "string",
                "desc": "Fires the named output on this entity. Format: '<output name>:<activator>:<caller>:<parameter>:<delay>' (OnDeath:hl3cardgame:gaben). Everything beyond the output name is optional."
            },
            {
                "name": "RemoveOutput",
                "type": "string",
                "desc": "Removes all instances of the named output on this entity. Wildcards are supported, meaning you could just pass '*' to wipe all outputs from this entity."
            },
            {
                "name": "AcceptInput",
                "type": "string",
                "desc": "Fires the named input on this entity. Format: '<input name>:<parameter>:<activator>:<caller>:<output ID>' (SetTarget:cheese). Everything beyond the input name is optional. Mind the fact this is arranged differently from FireOutput, having the parameter right after the input name."
            },
            {
                "name": "AddSpawnFlags",
                "type": "integer",
                "desc": "Adds spawnflag(s) to this entity. Many spawnflags have their respective numbers suffixed in this FGD."
            },
            {
                "name": "RemoveSpawnFlags",
                "type": "integer",
                "desc": "Removes spawnflag(s) to this entity. Many spawnflags have their respective numbers suffixed in this FGD."
            },
            {
                "name": "AddSolidFlags",
                "type": "integer",
                "desc": "Adds solid flags to this entity."
            },
            {
                "name": "RemoveSolidFlags",
                "type": "integer",
                "desc": "Removes solid flags from this entity."
            },
            {
                "name": "ChangeVariable",
                "type": "string",
                "desc": "Similar to AddOutput, except it changes an internal variable similar to logic_datadesc_accessor instead. Very dangerous, use with care."
            },
            {
                "name": "SetEntityName",
                "type": "target_destination",
                "desc": "Sets this entity's name that other entities should refer to it by."
            },
            {
                "name": "SetTarget",
                "type": "target_destination",
                "desc": "Sets this entity's target. This is specific to certain entities, particularly logic entities that involve a target."
            },
            {
                "name": "SetOwnerEntity",
                "type": "target_destination",
                "desc": "Sets this entity's owner entity. This has nothing to do with parenting and has more to do with collision and kill credits."
            },
            {
                "name": "SetThinkNull",
                "type": "void",
                "desc": "Sets this entity's general think function to null. Behavior varies from entity to entity.."
            }
        ],
        "outputs": [
            {
                "name": "OnUser1",
                "type": "void",
                "desc": "Fired in response to FireUser1 input."
            },
            {
                "name": "OnUser2",
                "type": "void",
                "desc": "Fired in response to FireUser2 input."
            },
            {
                "name": "OnUser3",
                "type": "void",
                "desc": "Fired in response to FireUser3 input."
            },
            {
                "name": "OnUser4",
                "type": "void",
                "desc": "Fired in response to FireUser4 input."
            },
            {
                "name": "OutUser1",
                "type": "string",
                "desc": "Fires in response to PassUser1 input, with the parameter passed through unchanged."
            },
            {
                "name": "OutUser2",
                "type": "string",
                "desc": "Fires in response to PassUser2 input, with the parameter passed through unchanged."
            },
            {
                "name": "OutUser3",
                "type": "string",
                "desc": "Fires in response to PassUser3 input, with the parameter passed through unchanged."
            },
            {
                "name": "OutUser4",
                "type": "string",
                "desc": "Fires in response to PassUser4 input, with the parameter passed through unchanged."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "BaseEntityBrush",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Name",
                "key": "targetname",
                "type": "target_source",
                "default": "",
                "desc": "The name that other entities refer to this entity by."
            },
            {
                "name": "Global Entity Name",
                "key": "globalname",
                "type": "string",
                "default": "",
                "desc": "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
            },
            {
                "name": "Origin (X Y Z)",
                "key": "origin",
                "type": "origin",
                "default": "",
                "desc": "The position of this brush entity's center in the world. Rotating entities typically rotate around their origin."
            },
            {
                "name": "Parent",
                "key": "parentname",
                "type": "target_destination",
                "default": "",
                "desc": "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
            },
            {
                "name": "Attachment Point",
                "key": "parent_attachment_point",
                "type": "string",
                "default": "",
                "desc": "If set, attach to this attachment point on the parent during spawn."
            },
            {
                "name": "Entity Scripts",
                "key": "vscripts",
                "type": "scriptlist",
                "default": "",
                "desc": "Name(s) of script files that are executed after all entities have spawned."
            },
            {
                "name": "Script think function",
                "key": "thinkfunction",
                "type": "string",
                "default": "",
                "desc": "Name of a function in this entity's script scope which will be called automatically."
            },
            {
                "name": "Init Code",
                "key": "vscript_init_code",
                "type": "string",
                "default": "",
                "desc": "This code will be executed after the Entity Scripts option. Backtick ( ` ) characters will be converted to quotes in-game for strings."
            },
            {
                "name": "Init Code 2",
                "key": "vscript_init_code2",
                "type": "string",
                "default": "",
                "desc": "This code will be the second line executed after the Entity Scripts option. Backtick ( ` ) characters will be converted to quotes in-game for strings. Additional Init Code keyvalues can be added with SmartEdit off."
            },
            {
                "name": "Minimum Bounding Box Size",
                "key": "mins",
                "type": "vector",
                "default": "",
                "desc": "Co-ordinate of the minimum bounding box corner, relative to entity origin. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid. Can be AddOutputed to change shape at runtime."
            },
            {
                "name": "Maximum Bounding Box Size",
                "key": "maxs",
                "type": "vector",
                "default": "",
                "desc": "Co-ordinate of the maximum bounding box corner, relative to entity origin. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid. Can be AddOutputed to change shape at runtime."
            },
            {
                "name": "Collisions",
                "key": "solid",
                "type": "choices",
                "default": "VPhysics (6)",
                "desc": "Method of collision for this entity. Can be changed at runtime with AddOutput.",
                "choices": {
                    "None": "0",
                    "BSP (QPhysics)": "1",
                    "Bounding Box": "2",
                    "Oriented Bounding Box": "3",
                    "Oriented Bounding Box, constrained to Yaw only": "4",
                    "Custom (defined per-entity, if not defined the entity will have bizarre collision behavior)": "5",
                    "VPhysics": "6"
                }
            }
        ],
        "inputs": [
            {
                "name": "Kill",
                "type": "void",
                "desc": "Removes this entity from the world."
            },
            {
                "name": "KillHierarchy",
                "type": "void",
                "desc": "Removes this entity and all its children from the world."
            },
            {
                "name": "SetParent",
                "type": "target_destination",
                "desc": "Changes the entity's parent in the movement hierarchy."
            },
            {
                "name": "SetParentAttachment",
                "type": "string",
                "desc": "Change this entity to attach to a specific attachment point on its parent. Entities must be parented before being sent this input. The parameter passed in should be the name of the attachment."
            },
            {
                "name": "SetParentAttachmentMaintainOffset",
                "type": "string",
                "desc": "Change this entity to attach to a specific attachment point on it's parent. Entities must be parented before being sent this input. The parameter passed in should be the name of the attachment. The entity will maintain it's position relative to the parent at the time it is attached."
            },
            {
                "name": "ClearParent",
                "type": "void",
                "desc": "Removes this entity from the the movement hierarchy, leaving it free to move independently."
            },
            {
                "name": "SetLocalAngles",
                "type": "vector",
                "desc": "Sets the rotation of the entity relative to the parent's rotation."
            },
            {
                "name": "SetLocalOrigin",
                "type": "vector",
                "desc": "Sets the position of the entity relative to its parent if one exists. Otherwise relative to the world."
            },
            {
                "name": "SetAbsAngles",
                "type": "vector",
                "desc": "Set this entity's angles, always relative to the world origin."
            },
            {
                "name": "AddOutput",
                "type": "string",
                "desc": "Adds an entity I/O connection to this entity or changes keyvalues dynamically. Format:\n'<output name> <targetname>:<inputname>:<parameter>:<delay>:<max times to fire (-1 == infinite, 1 = only once)>'\nor 'keyvalue newval'. Very dangerous, use with care."
            },
            {
                "name": "FireUser1",
                "type": "void",
                "desc": "Causes this entity's OnUser1 output to be fired."
            },
            {
                "name": "FireUser2",
                "type": "void",
                "desc": "Causes this entity's OnUser2 output to be fired."
            },
            {
                "name": "FireUser3",
                "type": "void",
                "desc": "Causes this entity's OnUser3 output to be fired."
            },
            {
                "name": "FireUser4",
                "type": "void",
                "desc": "Causes this entity's OnUser4 output to be fired."
            },
            {
                "name": "Use",
                "type": "void",
                "desc": "More or less replicates the player interacting with an entity. (+USE)"
            },
            {
                "name": "RunScriptFile",
                "type": "string",
                "desc": "Execute a game script file from disk."
            },
            {
                "name": "RunScriptCode",
                "type": "script",
                "desc": "Execute a string of script source code. Backtick ( ` ) characters will be converted to quotes in-game for strings."
            },
            {
                "name": "CallScriptFunction",
                "type": "string",
                "desc": "Execute the given function name."
            },
            {
                "name": "PassUser1",
                "type": "string",
                "desc": "Causes this entity's OutUser1 output to be fired, passing along the parameter unchanged."
            },
            {
                "name": "PassUser2",
                "type": "string",
                "desc": "Causes this entity's OutUser2 output to be fired, passing along the parameter unchanged."
            },
            {
                "name": "PassUser3",
                "type": "string",
                "desc": "Causes this entity's OutUser3 output to be fired, passing along the parameter unchanged."
            },
            {
                "name": "PassUser4",
                "type": "string",
                "desc": "Causes this entity's OutUser4 output to be fired, passing along the parameter unchanged."
            },
            {
                "name": "FireRandomUser",
                "type": "void",
                "desc": "Fires OnUser1, OnUser2, OnUser3, or OnUser4 with a 25% chance of each."
            },
            {
                "name": "PassRandomUser",
                "type": "string",
                "desc": "Fires OutUser1, OutUser2, OutUser3, or OutUser4 with a 25% chance of each. The parameter is passed along unchanged."
            },
            {
                "name": "KillIfNotVisible",
                "type": "void",
                "desc": "Removes this entity if it is not in the player's viewcone."
            },
            {
                "name": "KillWhenNotVisible",
                "type": "void",
                "desc": "Removes this entity when it is not in the player's viewcone."
            },
            {
                "name": "FireOutput",
                "type": "string",
                "desc": "Fires the named output on this entity. Format: '<output name>:<activator>:<caller>:<parameter>:<delay>' (OnDeath:hl3cardgame:gaben). Everything beyond the output name is optional."
            },
            {
                "name": "RemoveOutput",
                "type": "string",
                "desc": "Removes all instances of the named output on this entity. Wildcards are supported, meaning you could just pass '*' to wipe all outputs from this entity."
            },
            {
                "name": "AcceptInput",
                "type": "string",
                "desc": "Fires the named input on this entity. Format: '<input name>:<parameter>:<activator>:<caller>:<output ID>' (SetTarget:cheese). Everything beyond the input name is optional. Mind the fact this is arranged differently from FireOutput, having the parameter right after the input name."
            },
            {
                "name": "CancelPending",
                "type": "void",
                "desc": "Cancels any events fired by this entity that are currently pending in the I/O event queue."
            },
            {
                "name": "FreeChildren",
                "type": "void",
                "desc": "Unparents all direct children of this entity."
            },
            {
                "name": "SetLocalVelocity",
                "type": "vector",
                "desc": "Sets this entity's current velocity."
            },
            {
                "name": "SetLocalAngularVelocity",
                "type": "vector",
                "desc": "Sets this entity's current angular velocity."
            },
            {
                "name": "AddSpawnFlags",
                "type": "integer",
                "desc": "Adds spawnflag(s) to this entity. Many spawnflags have their respective numbers suffixed in this FGD."
            },
            {
                "name": "RemoveSpawnFlags",
                "type": "integer",
                "desc": "Removes spawnflag(s) to this entity. Many spawnflags have their respective numbers suffixed in this FGD."
            },
            {
                "name": "AddSolidFlags",
                "type": "integer",
                "desc": "Adds solid flags to this entity."
            },
            {
                "name": "RemoveSolidFlags",
                "type": "integer",
                "desc": "Removes solid flags from this entity."
            },
            {
                "name": "ChangeVariable",
                "type": "string",
                "desc": "Similar to AddOutput, except it changes an internal variable similar to logic_datadesc_accessor instead. Very dangerous, use with care."
            },
            {
                "name": "SetHealth",
                "type": "integer",
                "desc": "Sets this entity's health."
            },
            {
                "name": "AddHealth",
                "type": "integer",
                "desc": "Adds to this entity's health."
            },
            {
                "name": "RemoveHealth",
                "type": "integer",
                "desc": "Removes from this entity's health."
            },
            {
                "name": "SetMaxHealth",
                "type": "integer",
                "desc": "Sets this entity's max health."
            },
            {
                "name": "SetEntityName",
                "type": "target_destination",
                "desc": "Sets this entity's name that other entities should refer to it by."
            },
            {
                "name": "SetTarget",
                "type": "target_destination",
                "desc": "Sets this entity's target. This is specific to certain entities, particularly logic entities that involve a target."
            },
            {
                "name": "SetOwnerEntity",
                "type": "target_destination",
                "desc": "Sets this entity's owner entity. This has nothing to do with parenting and has more to do with collision and kill credits."
            },
            {
                "name": "SetThinkNull",
                "type": "void",
                "desc": "Sets this entity's general think function to null. Behavior varies from entity to entity.."
            },
            {
                "name": "Touch",
                "type": "target_destination",
                "desc": "Simulates this entity touching the specified entity."
            }
        ],
        "outputs": [
            {
                "name": "OnUser1",
                "type": "void",
                "desc": "Fired in response to FireUser1 input."
            },
            {
                "name": "OnUser2",
                "type": "void",
                "desc": "Fired in response to FireUser2 input."
            },
            {
                "name": "OnUser3",
                "type": "void",
                "desc": "Fired in response to FireUser3 input."
            },
            {
                "name": "OnUser4",
                "type": "void",
                "desc": "Fired in response to FireUser4 input."
            },
            {
                "name": "OutUser1",
                "type": "string",
                "desc": "Fires in response to PassUser1 input, with the parameter passed through unchanged."
            },
            {
                "name": "OutUser2",
                "type": "string",
                "desc": "Fires in response to PassUser2 input, with the parameter passed through unchanged."
            },
            {
                "name": "OutUser3",
                "type": "string",
                "desc": "Fires in response to PassUser3 input, with the parameter passed through unchanged."
            },
            {
                "name": "OutUser4",
                "type": "string",
                "desc": "Fires in response to PassUser4 input, with the parameter passed through unchanged."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "BaseEntityPoint",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Name",
                "key": "targetname",
                "type": "target_source",
                "default": "",
                "desc": "The name that other entities refer to this entity by."
            },
            {
                "name": "Global Entity Name",
                "key": "globalname",
                "type": "string",
                "default": "",
                "desc": "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
            },
            {
                "name": "Pitch Yaw Roll (X Y Z)",
                "key": "angles",
                "type": "angle",
                "default": "0 0 0",
                "desc": "This entity's orientation in the world. Roll is the rotation around the X axis, pitch is rotation around the Y axis and yaw is the rotation around the Z axis."
            },
            {
                "name": "Parent",
                "key": "parentname",
                "type": "target_destination",
                "default": "",
                "desc": "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
            },
            {
                "name": "Attachment Point",
                "key": "parent_attachment_point",
                "type": "string",
                "default": "",
                "desc": "If set, attach to this attachment point on the parent during spawn."
            },
            {
                "name": "Entity Scripts",
                "key": "vscripts",
                "type": "scriptlist",
                "default": "",
                "desc": "Name(s) of script files that are executed after all entities have spawned."
            },
            {
                "name": "Script think function",
                "key": "thinkfunction",
                "type": "string",
                "default": "",
                "desc": "Name of a function in this entity's script scope which will be called automatically."
            },
            {
                "name": "Init Code",
                "key": "vscript_init_code",
                "type": "string",
                "default": "",
                "desc": "This code will be executed after the Entity Scripts option. Backtick ( ` ) characters will be converted to quotes in-game for strings."
            },
            {
                "name": "Init Code 2",
                "key": "vscript_init_code2",
                "type": "string",
                "default": "",
                "desc": "This code will be the second line executed after the Entity Scripts option. Backtick ( ` ) characters will be converted to quotes in-game for strings. Additional Init Code keyvalues can be added with SmartEdit off."
            }
        ],
        "inputs": [
            {
                "name": "Kill",
                "type": "void",
                "desc": "Removes this entity from the world."
            },
            {
                "name": "KillHierarchy",
                "type": "void",
                "desc": "Removes this entity and all its children from the world."
            },
            {
                "name": "SetParent",
                "type": "target_destination",
                "desc": "Changes the entity's parent in the movement hierarchy."
            },
            {
                "name": "SetParentAttachment",
                "type": "string",
                "desc": "Change this entity to attach to a specific attachment point on its parent. Entities must be parented before being sent this input. The parameter passed in should be the name of the attachment."
            },
            {
                "name": "SetParentAttachmentMaintainOffset",
                "type": "string",
                "desc": "Change this entity to attach to a specific attachment point on it's parent. Entities must be parented before being sent this input. The parameter passed in should be the name of the attachment. The entity will maintain it's position relative to the parent at the time it is attached."
            },
            {
                "name": "ClearParent",
                "type": "void",
                "desc": "Removes this entity from the the movement hierarchy, leaving it free to move independently."
            },
            {
                "name": "SetLocalAngles",
                "type": "vector",
                "desc": "Sets the rotation of the entity relative to the parent's rotation."
            },
            {
                "name": "SetLocalOrigin",
                "type": "vector",
                "desc": "Sets the position of the entity relative to its parent if one exists. Otherwise relative to the world."
            },
            {
                "name": "SetAbsAngles",
                "type": "vector",
                "desc": "Set this entity's angles, always relative to the world origin."
            },
            {
                "name": "AddOutput",
                "type": "string",
                "desc": "Adds an entity I/O connection to this entity or changes keyvalues dynamically. Format:\n'<output name> <targetname>:<inputname>:<parameter>:<delay>:<max times to fire (-1 == infinite, 1 = only once)>'\nor 'keyvalue newval'. Very dangerous, use with care."
            },
            {
                "name": "FireUser1",
                "type": "void",
                "desc": "Causes this entity's OnUser1 output to be fired."
            },
            {
                "name": "FireUser2",
                "type": "void",
                "desc": "Causes this entity's OnUser2 output to be fired."
            },
            {
                "name": "FireUser3",
                "type": "void",
                "desc": "Causes this entity's OnUser3 output to be fired."
            },
            {
                "name": "FireUser4",
                "type": "void",
                "desc": "Causes this entity's OnUser4 output to be fired."
            },
            {
                "name": "Use",
                "type": "void",
                "desc": "More or less replicates the player interacting with an entity. (+USE)"
            },
            {
                "name": "RunScriptFile",
                "type": "string",
                "desc": "Execute a game script file from disk."
            },
            {
                "name": "RunScriptCode",
                "type": "script",
                "desc": "Execute a string of script source code. Backtick ( ` ) characters will be converted to quotes in-game for strings."
            },
            {
                "name": "CallScriptFunction",
                "type": "string",
                "desc": "Execute the given function name."
            },
            {
                "name": "PassUser1",
                "type": "string",
                "desc": "Causes this entity's OutUser1 output to be fired, passing along the parameter unchanged."
            },
            {
                "name": "PassUser2",
                "type": "string",
                "desc": "Causes this entity's OutUser2 output to be fired, passing along the parameter unchanged."
            },
            {
                "name": "PassUser3",
                "type": "string",
                "desc": "Causes this entity's OutUser3 output to be fired, passing along the parameter unchanged."
            },
            {
                "name": "PassUser4",
                "type": "string",
                "desc": "Causes this entity's OutUser4 output to be fired, passing along the parameter unchanged."
            },
            {
                "name": "FireRandomUser",
                "type": "void",
                "desc": "Fires OnUser1, OnUser2, OnUser3, or OnUser4 with a 25% chance of each."
            },
            {
                "name": "PassRandomUser",
                "type": "string",
                "desc": "Fires OutUser1, OutUser2, OutUser3, or OutUser4 with a 25% chance of each. The parameter is passed along unchanged."
            },
            {
                "name": "KillIfNotVisible",
                "type": "void",
                "desc": "Removes this entity if it is not in a player's viewcone."
            },
            {
                "name": "KillWhenNotVisible",
                "type": "void",
                "desc": "Removes this entity when it is not in a player's viewcone. You can pass a time for when this should start."
            },
            {
                "name": "FireOutput",
                "type": "string",
                "desc": "Fires the named output on this entity. Format: '<output name>:<activator>:<caller>:<parameter>:<delay>' (OnDeath:hl3cardgame:gaben). Everything beyond the output name is optional."
            },
            {
                "name": "RemoveOutput",
                "type": "string",
                "desc": "Removes all instances of the named output on this entity. Wildcards are supported, meaning you could just pass '*' to wipe all outputs from this entity."
            },
            {
                "name": "AcceptInput",
                "type": "string",
                "desc": "Fires the named input on this entity. Format: '<input name>:<parameter>:<activator>:<caller>:<output ID>' (SetTarget:cheese). Everything beyond the input name is optional. Mind the fact this is arranged differently from FireOutput, having the parameter right after the input name."
            },
            {
                "name": "CancelPending",
                "type": "void",
                "desc": "Cancels any events fired by this entity that are currently pending in the I/O event queue."
            },
            {
                "name": "FreeChildren",
                "type": "void",
                "desc": "Unparents all direct children of this entity."
            },
            {
                "name": "SetLocalVelocity",
                "type": "vector",
                "desc": "Sets this entity's current velocity."
            },
            {
                "name": "SetLocalAngularVelocity",
                "type": "vector",
                "desc": "Sets this entity's current angular velocity."
            },
            {
                "name": "AddSpawnFlags",
                "type": "integer",
                "desc": "Adds spawnflag(s) to this entity. Many spawnflags have their respective numbers suffixed in this FGD."
            },
            {
                "name": "RemoveSpawnFlags",
                "type": "integer",
                "desc": "Removes spawnflag(s) to this entity. Many spawnflags have their respective numbers suffixed in this FGD."
            },
            {
                "name": "AddSolidFlags",
                "type": "integer",
                "desc": "Adds solid flags to this entity."
            },
            {
                "name": "RemoveSolidFlags",
                "type": "integer",
                "desc": "Removes solid flags from this entity."
            },
            {
                "name": "ChangeVariable",
                "type": "string",
                "desc": "Similar to AddOutput, except it changes an internal variable similar to logic_datadesc_accessor instead. Very dangerous, use with care."
            },
            {
                "name": "SetHealth",
                "type": "integer",
                "desc": "Sets this entity's health."
            },
            {
                "name": "AddHealth",
                "type": "integer",
                "desc": "Adds to this entity's health."
            },
            {
                "name": "RemoveHealth",
                "type": "integer",
                "desc": "Removes from this entity's health."
            },
            {
                "name": "SetMaxHealth",
                "type": "integer",
                "desc": "Sets this entity's max health."
            },
            {
                "name": "SetEntityName",
                "type": "target_destination",
                "desc": "Sets this entity's name that other entities should refer to it by."
            },
            {
                "name": "SetTarget",
                "type": "target_destination",
                "desc": "Sets this entity's target. This is specific to certain entities, particularly logic entities that involve a target."
            },
            {
                "name": "SetOwnerEntity",
                "type": "target_destination",
                "desc": "Sets this entity's owner entity. This has nothing to do with parenting and has more to do with collision and kill credits."
            },
            {
                "name": "SetThinkNull",
                "type": "void",
                "desc": "Sets this entity's general think function to null. Behavior varies from entity to entity.."
            },
            {
                "name": "Touch",
                "type": "target_destination",
                "desc": "Simulates this entity touching the specified entity."
            }
        ],
        "outputs": [
            {
                "name": "OnUser1",
                "type": "void",
                "desc": "Fired in response to FireUser1 input."
            },
            {
                "name": "OnUser2",
                "type": "void",
                "desc": "Fired in response to FireUser2 input."
            },
            {
                "name": "OnUser3",
                "type": "void",
                "desc": "Fired in response to FireUser3 input."
            },
            {
                "name": "OnUser4",
                "type": "void",
                "desc": "Fired in response to FireUser4 input."
            },
            {
                "name": "OutUser1",
                "type": "string",
                "desc": "Fires in response to PassUser1 input, with the parameter passed through unchanged."
            },
            {
                "name": "OutUser2",
                "type": "string",
                "desc": "Fires in response to PassUser2 input, with the parameter passed through unchanged."
            },
            {
                "name": "OutUser3",
                "type": "string",
                "desc": "Fires in response to PassUser3 input, with the parameter passed through unchanged."
            },
            {
                "name": "OutUser4",
                "type": "string",
                "desc": "Fires in response to PassUser4 input, with the parameter passed through unchanged."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "BaseFadeProp",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Start Fade Dist",
                "key": "fademindist",
                "type": "float",
                "default": "-1",
                "desc": "Distance at which the prop starts to fade (<0 = use fademaxdist)."
            },
            {
                "name": "End Fade Dist",
                "key": "fademaxdist",
                "type": "float",
                "default": "0",
                "desc": "Max fade distance at which the prop is visible (0 = don't fade out)."
            },
            {
                "name": "Fade Scale",
                "key": "fadescale",
                "type": "float",
                "default": "1",
                "desc": "If you specify a fade in the worldspawn, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.This scale factor gives you some control over the fade. Using 0 here turns off the forcible fades. Numbers smaller than 1 cause the prop to fade out at further distances, and greater than 1 cause it to fade out at closer distances."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "BaseLight",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Brightness",
                "key": "_light",
                "type": "color255",
                "default": "255 255 255 200",
                "desc": "Color and brightness of the light."
            },
            {
                "name": "BrightnessHDR",
                "key": "_lighthdr",
                "type": "color255",
                "default": "-1 -1 -1 1",
                "desc": ""
            },
            {
                "name": "BrightnessScaleHDR",
                "key": "_lightscalehdr",
                "type": "float",
                "default": "1",
                "desc": "Amount to scale the light by when compiling for HDR."
            },
            {
                "name": "Appearance",
                "key": "style",
                "type": "choices",
                "default": "Normal (0)",
                "desc": "",
                "choices": {
                    "Normal": "0",
                    "Fluorescent flicker": "10",
                    "Slow, strong pulse": "2",
                    "Slow pulse, noblack": "11",
                    "Gentle pulse": "5",
                    "Flicker A": "1",
                    "Flicker B": "6",
                    "Candle A": "3",
                    "Candle B": "7",
                    "Candle C": "8",
                    "Fast strobe": "4",
                    "Slow strobe": "9",
                    "Underwater light mutation": "12"
                }
            },
            {
                "name": "Custom Appearance",
                "key": "pattern",
                "type": "string",
                "default": "",
                "desc": "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
            },
            {
                "name": "Fade Tick Interval",
                "key": "fadetickinterval",
                "type": "float",
                "default": "0.1",
                "desc": "The tick interval of the light's fade, in seconds. Lower values cause a faster fade."
            },
            {
                "name": "Constant",
                "key": "_constant_attn",
                "type": "string",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Linear",
                "key": "_linear_attn",
                "type": "string",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Quadratic",
                "key": "_quadratic_attn",
                "type": "string",
                "default": "1",
                "desc": ""
            },
            {
                "name": "50 percent falloff distance",
                "key": "_fifty_percent_distance",
                "type": "string",
                "default": "0",
                "desc": "Distance at which brightness should fall off to 50%. If set, overrides linear constant and quadratic paramaters."
            },
            {
                "name": "0 percent falloff distance",
                "key": "_zero_percent_distance",
                "type": "string",
                "default": "0",
                "desc": "Distance at which brightness should fall off to negligible (1/256)%. Must set _fifty_percent_distance to use."
            },
            {
                "name": "Hard Falloff",
                "key": "_hardfalloff",
                "type": "integer",
                "default": "0",
                "desc": "If set, causes lights to fall to exactly zero beyond the zero percent distance. May cause unrealistic lightijng if not used carefully."
            },
            {
                "name": "Maximum Distance",
                "key": "_distance",
                "type": "integer",
                "default": "0",
                "desc": "The distance that light is allowed to cast."
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turn the light on."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "The the light off."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the light's current state."
            },
            {
                "name": "SetPattern",
                "type": "string",
                "desc": "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
            },
            {
                "name": "FadeToPattern",
                "type": "string",
                "desc": "Fades from first value in old pattern, to first value in the new given pattern. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
            },
            {
                "name": "SetFadeInterval",
                "type": "float",
                "desc": "Sets the fadetickinterval."
            },
            {
                "name": "SetFadeSteps",
                "type": "float",
                "desc": "Sets the amount of steps to use for fading."
            },
            {
                "name": "FadeOn",
                "type": "float",
                "desc": "Fades the light on using patterns. (Shortcut for FadeToPattern with z param). Parameter sets fade tick interval"
            },
            {
                "name": "FadeOff",
                "type": "float",
                "desc": "Fades the light off using patterns. (Shortcut for FadeToPattern with a param). Parameter sets fade tick interval"
            },
            {
                "name": "FadeToggles",
                "type": "float",
                "desc": "Fades the light on or  off using patterns depending on the current fade pattern (a or z)."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "BasePaintType",
        "desc": "Paint Type property.",
        "bases": [],
        "keyvalues": [
            {
                "name": "Paint Type",
                "key": "painttype",
                "type": "choices",
                "default": "Repulsion Gel (0)",
                "desc": "The type of Gel created.",
                "choices": {
                    "Repulsion Gel": "0",
                    "Reflection Gel": "1",
                    "Propulsion Gel": "2",
                    "Conversion Gel": "3",
                    "Cleansing Gel": "4",
                    "Adhesion Gel": "5"
                }
            },
            {
                "name": "[H] Paint Type",
                "key": "skin",
                "type": "choices",
                "default": "Repulsion Gel (0)",
                "desc": "The type of gel displayed in Hammer.",
                "choices": {
                    "Repulsion Gel": "0",
                    "Reflection Gel": "1",
                    "Propulsion Gel": "2",
                    "Conversion Gel": "3",
                    "Cleansing Gel": "4",
                    "Adhesion Gel": "5"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "DamageFilter",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Damage Filter",
                "key": "damagefilter",
                "type": "filterclass",
                "default": "",
                "desc": "Name of the filter entity that controls which entities can damage us."
            }
        ],
        "inputs": [
            {
                "name": "SetDamageFilter",
                "type": "target_destination",
                "desc": "Sets the entity to use as damage filter. Pass in an empty string to clear the damage filter."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "DamageType",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Damage Type",
                "key": "damagetype",
                "type": "choices",
                "default": "Generic (0)",
                "desc": "Kind of damage to apply. These fields can be ORed together. ",
                "choices": {
                    "Generic": "0",
                    "Crush": "1",
                    "Bullet": "2",
                    "Slash": "4",
                    "Burn": "8",
                    "Fall": "32",
                    "Blast": "64",
                    "Club": "128",
                    "Shock": "256",
                    "Sonic": "512",
                    "Energy Beam": "1024",
                    "Drown (blue faded)": "16384",
                    "Paralyse": "32768",
                    "Nerve Gas": "65536",
                    "Poison": "131072",
                    "Radiation": "262144",
                    "Drowning recovery": "524288",
                    "Acid": "1048576",
                    "Slow Burn": "2097152",
                    "Slowfreeze": "4194304",
                    "Gravity Gun": "8388608",
                    "Plasma": "16777216",
                    "Airboat": "33554432",
                    "Dissolve": "67108864",
                    "Blast Surface": "134217728",
                    "Direct": "268435456",
                    "Buckshot": "536870912"
                }
            },
            {
                "name": "Damage Gibbing",
                "key": "damageor1",
                "type": "choices",
                "default": "Normal Behaviour (0)",
                "desc": "Optional flags that can accompany the damage type.",
                "choices": {
                    "Normal Behaviour": "0",
                    "Never use gibs": "4096",
                    "Always gib if possible": "8192"
                }
            },
            {
                "name": "Prevent Physics Force",
                "key": "damageor2",
                "type": "choices",
                "default": "No (0)",
                "desc": "Prevent applying physics force to the target.",
                "choices": {
                    "No": "0",
                    "Yes": "2048"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "DetailPropBase",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Orientation",
                "key": "detailorientation",
                "type": "choices",
                "default": "No rotation (0)",
                "desc": "How the prop/sprite rotates to face the camera.",
                "choices": {
                    "No rotation": "0",
                    "Screen Aligned": "1",
                    "Z axis only": "2"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "EnableDisable",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Start Disabled",
                "key": "startdisabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable this entity."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable this entity."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "FadeDistance",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Start Fade Dist",
                "key": "fademindist",
                "type": "float",
                "default": "-1",
                "desc": "Distance at which the prop starts to fade (<0 = use fademaxdist)."
            },
            {
                "name": "End Fade Dist",
                "key": "fademaxdist",
                "type": "float",
                "default": "0",
                "desc": "Maximum distance at which the prop is visible (0 = don't fade out)."
            },
            {
                "name": "Fade Scale",
                "key": "fadescale",
                "type": "float",
                "default": "1",
                "desc": "If you specify a fade in the worldspawn, or if the engine is running under low end/medium end, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified. This scale factor gives you some control over the fade. Using 0 here turns off the forcible fades. Numbers smaller than 1 cause the prop to fade out at further distances, and greater than 1 cause it to fade out at closer distances."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "KeyFrame",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Next KeyFrame",
                "key": "nextkey",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the next keyframe along this keyframe path."
            },
            {
                "name": "Speed (units per second)",
                "key": "movespeed",
                "type": "integer",
                "default": "64",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "LinkedPortalDoor",
        "desc": "An entity that can be linked to another door and create a passage between them dynamically.",
        "bases": [],
        "keyvalues": [],
        "inputs": [
            {
                "name": "SetPartner",
                "type": "target_destination",
                "desc": "Set a new partner door."
            },
            {
                "name": "Open",
                "type": "void",
                "desc": "Open the door and cause the portal to activate."
            },
            {
                "name": "Close",
                "type": "void",
                "desc": "Close the door and cause the portal to deactivate."
            }
        ],
        "outputs": [
            {
                "name": "OnOpen",
                "type": "void",
                "desc": "Called when the door has started its open animation."
            },
            {
                "name": "OnClose",
                "type": "void",
                "desc": "Called when the door has started its close animation."
            },
            {
                "name": "OnEntityTeleportFromMe",
                "type": "void",
                "desc": "When any entity is teleported from this portal to the linked partner."
            },
            {
                "name": "OnPlayerTeleportFromMe",
                "type": "void",
                "desc": "When the player is teleported from this portal to the linked partner."
            },
            {
                "name": "OnEntityTeleportToMe",
                "type": "void",
                "desc": "When any entity is teleported from this linked partner to the portal."
            },
            {
                "name": "OnPlayerTeleportToMe",
                "type": "void",
                "desc": "When the player is teleported from this linked partner to the portal."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "MasterEnt",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Master (Obsolete)",
                "key": "master",
                "type": "target_destination",
                "default": "",
                "desc": "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "Mover",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Position Interpolator",
                "key": "positioninterpolator",
                "type": "choices",
                "default": "Linear (0)",
                "desc": "",
                "choices": {
                    "Linear": "0",
                    "Catmull-Rom Spline": "1"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "Node",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Node ID",
                "key": "nodeid",
                "type": "node_id",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "Origin",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Origin (X Y Z)",
                "key": "origin",
                "type": "origin",
                "default": "",
                "desc": "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "PortalBase",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Start Activated",
                "key": "activated",
                "type": "choices",
                "default": "Inactive (0)",
                "desc": "An inactive portal will not be drawn and will not teleport entities.",
                "choices": {
                    "Inactive": "0",
                    "Active": "1"
                }
            },
            {
                "name": "Portal Number",
                "key": "portaltwo",
                "type": "choices",
                "default": "Portal 1 (Blue) (0)",
                "desc": "Which of the pair is this portal?",
                "choices": {
                    "Portal 1 (Blue)": "0",
                    "Portal 2 (Orange)": "1"
                }
            },
            {
                "name": "Half-Width of the Portal.",
                "key": "halfwidth",
                "type": "float",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Half-Height of the Portal.",
                "key": "halfheight",
                "type": "float",
                "default": "0",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnPlacedSuccessfully",
                "type": "void",
                "desc": "When a portal is placed without failure, this output is fired."
            },
            {
                "name": "OnEntityTeleportFromMe",
                "type": "void",
                "desc": "When any entity is teleported from this portal to the linked partner."
            },
            {
                "name": "OnPlayerTeleportFromMe",
                "type": "void",
                "desc": "When the player is teleported from this portal to the linked partner."
            },
            {
                "name": "OnEntityTeleportToMe",
                "type": "void",
                "desc": "When any entity is teleported from this linked partner to the portal."
            },
            {
                "name": "OnPlayerTeleportToMe",
                "type": "void",
                "desc": "When the player is teleported from this linked partner to the portal."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "Reflection",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Render in Fast Reflections",
                "key": "drawinfastreflection",
                "type": "boolean",
                "default": "No",
                "desc": "If enabled, causes this entity/prop to to render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
            }
        ],
        "inputs": [
            {
                "name": "DisableDrawInFastReflection",
                "type": "void",
                "desc": "Turns off rendering of this entity in reflections when using $reflectonlymarkedentities in water material."
            },
            {
                "name": "EnableDrawInFastReflection",
                "type": "void",
                "desc": "Turn on rendering of this entity in reflections when using $reflectonlymarkedentities in water material."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "RenderFields",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Render Mode",
                "key": "rendermode",
                "type": "choices",
                "default": "Normal (0)",
                "desc": "Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.* Color & Texture = src*a+dest*(1-a)* Glow = src*a + dest, fixed on screen for sprites* Solid = Performs alphatest transparency* Additive = src*a + dest* Additive FF = blend between sprite nimation frames* Alpha Add = src + dest*(1-a)* World Space Glow = src*a + dest",
                "choices": {
                    "Normal": "0",
                    "Color": "1",
                    "Texture": "2",
                    "Glow": "3",
                    "Solid": "4",
                    "Additive": "5",
                    "Additive Fractional Frame": "7",
                    "Additive Alpha": "8",
                    "World Space Glow": "9",
                    "Don't Render": "10"
                }
            },
            {
                "name": "FX Color (R G B)",
                "key": "rendercolor",
                "type": "color255",
                "default": "255 255 255",
                "desc": "A color to mix with the model/sprite."
            },
            {
                "name": "FX Alpha (0 - 255)",
                "key": "renderamt",
                "type": "integer",
                "default": "255",
                "desc": "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
            },
            {
                "name": "Render FX",
                "key": "renderfx",
                "type": "choices",
                "default": "Normal (0)",
                "desc": "Various somewhat legacy alpha effects. Material Proxies are more modern.",
                "choices": {
                    "Normal": "0",
                    "Slow Pulse": "1",
                    "Fast Pulse": "2",
                    "Slow Wide Pulse": "3",
                    "Fast Wide Pulse": "4",
                    "Slow Strobe": "9",
                    "Fast Strobe": "10",
                    "Faster Strobe": "11",
                    "Slow Flicker": "12",
                    "Fast Flicker": "13",
                    "Slow Fade Away": "5",
                    "Fast Fade Away": "6",
                    "Slow Become Solid": "7",
                    "Fast Become Solid": "8",
                    "Constant Glow": "14",
                    "Fade Out": "15",
                    "Fade In": "16",
                    "Pulse Fast Wider": "17",
                    "Glow Shell": "18"
                }
            },
            {
                "name": "Disable Receiving Shadows",
                "key": "disablereceiveshadows",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "View ID nodraw",
                "key": "viewhideflags",
                "type": "choices",
                "default": "Draw normally (0)",
                "desc": "This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.",
                "choices": {
                    "Draw normally": "0",
                    "Hide in main view (player's eyes)": "193",
                    "Hide in cameras": "36",
                    "Hide in mirrors/water": "24",
                    "Hide in cameras and mirrors/water": "60",
                    "Hide in 3D skybox": "2",
                    "Hide projected texture shadows": "128"
                }
            }
        ],
        "inputs": [
            {
                "name": "Alpha",
                "type": "integer",
                "desc": "Set the entity's alpha (0 - 255)."
            },
            {
                "name": "Color",
                "type": "color255",
                "desc": "Set the entity's color (R G B)."
            },
            {
                "name": "SetRenderMode",
                "type": "integer",
                "desc": "Sets this entity's render mode."
            },
            {
                "name": "SetRenderFX",
                "type": "integer",
                "desc": "Sets this entity's render FX."
            },
            {
                "name": "SetViewHideFlags",
                "type": "integer",
                "desc": "Sets this entity's view ID nodraw flags (takes raw flag combination)."
            },
            {
                "name": "AddEffects",
                "type": "integer",
                "desc": "Adds an entity effect."
            },
            {
                "name": "RemoveEffects",
                "type": "integer",
                "desc": "Removes an entity effect."
            },
            {
                "name": "EnableDraw",
                "type": "void",
                "desc": "Draws an entity if it is not drawn. Equivalent to RemoveEffects > 32."
            },
            {
                "name": "DisableDraw",
                "type": "void",
                "desc": "Undraws an entity if it is drawn. Equivalent to AddEffects > 32."
            },
            {
                "name": "AddEFlags",
                "type": "integer",
                "desc": "Adds an entity flag. NOTE: Entity flags are not the spawn flags you see in Hammer. Use AddSpawnFlags to add spawnflags."
            },
            {
                "name": "RemoveEFlags",
                "type": "integer",
                "desc": "Removes an entity flag. NOTE: Entity flags are not the spawn flags you see in Hammer. Use RemoveSpawnFlags to remove spawnflags."
            },
            {
                "name": "SetCollisionGroup",
                "type": "integer",
                "desc": "Sets this entity's collision group."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "ResponseContext",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Response Contexts",
                "key": "responsecontext",
                "type": "string",
                "default": "",
                "desc": "Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system."
            }
        ],
        "inputs": [
            {
                "name": "AddContext",
                "type": "string",
                "desc": "Adds a context to this entity's list of response contexts. The format should be 'key:value'."
            },
            {
                "name": "RemoveContext",
                "type": "string",
                "desc": "Remove a context from this entity's list of response contexts. The name should match the 'key' of a previously added context."
            },
            {
                "name": "ClearContext",
                "type": "void",
                "desc": "Removes all contexts in this entity's list of response contexts."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "SRCIndicator",
        "desc": "Adds an Indicator Name option to toggle overlays.",
        "bases": [],
        "keyvalues": [
            {
                "name": "Indicator Name",
                "key": "indicatorname",
                "type": "target_destination",
                "default": "",
                "desc": "Set to the name of a set of info_overlays to toggle when this is activated and deactivated. The name may also point to a prop_indicator_panel, which will also be toggled appropriately."
            }
        ],
        "inputs": [
            {
                "name": "SetTextureIndex",
                "type": "integer",
                "desc": "Manually change the index of the overlays. prop_indicator_panels must not be used."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "SetSkin",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Skin",
                "key": "skin",
                "type": "integer",
                "default": "0",
                "desc": "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default."
            },
            {
                "name": "Used Skins",
                "key": "skinset",
                "type": "string",
                "default": "",
                "desc": "Set this to a space seperated list of all the skin numbers which will be used by this ent ('0 4 8' for example). This allows auto-packing to skip unused ones. If blank all skins are assumed to be used."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "StaticTargetName",
        "desc": "Targetnames only used in compilation.",
        "bases": [],
        "keyvalues": [
            {
                "name": "Name",
                "key": "targetname",
                "type": "target_source",
                "default": "",
                "desc": "The name that other entities refer to this entity by. This entity only exists during compilation, so the name is only usable in limited situations."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "SystemLevelChoice",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Minimum CPU Level",
                "key": "mincpulevel",
                "type": "choices",
                "default": "default (low) (0)",
                "desc": "",
                "choices": {
                    "default (low)": "0",
                    "low": "1",
                    "medium": "2",
                    "high": "3"
                }
            },
            {
                "name": "Maximum CPU Level",
                "key": "maxcpulevel",
                "type": "choices",
                "default": "default (high) (0)",
                "desc": "",
                "choices": {
                    "default (high)": "0",
                    "low": "1",
                    "medium": "2",
                    "high": "3"
                }
            },
            {
                "name": "Minimum GPU Level",
                "key": "mingpulevel",
                "type": "choices",
                "default": "default (very low) (0)",
                "desc": "",
                "choices": {
                    "default (very low)": "0",
                    "very low": "1",
                    "low": "2",
                    "medium": "3",
                    "high": "4"
                }
            },
            {
                "name": "Maximum GPU Level",
                "key": "maxgpulevel",
                "type": "choices",
                "default": "default (high) (0)",
                "desc": "",
                "choices": {
                    "default (high)": "0",
                    "very low": "1",
                    "low": "2",
                    "medium": "3",
                    "high": "4"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "Toggle",
        "desc": "",
        "bases": [],
        "keyvalues": [],
        "inputs": [
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the enabled/disabled status of this entity."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "ToggleDraw",
        "desc": "",
        "bases": [],
        "keyvalues": [],
        "inputs": [
            {
                "name": "DisableDraw",
                "type": "void",
                "desc": "Add the EF_NODRAW flag to this entity. Some entities manage this on their own so be aware you can override that value."
            },
            {
                "name": "EnableDraw",
                "type": "void",
                "desc": "Remove the EF_NODRAW flag to this entity. Some entities manage this on their own so be aware you can override that value."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "_Breakable",
        "desc": "",
        "bases": [],
        "keyvalues": [
            {
                "name": "Explosion Damage",
                "key": "explodedamage",
                "type": "float",
                "default": "0",
                "desc": "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'."
            },
            {
                "name": "Explosion Radius",
                "key": "exploderadius",
                "type": "float",
                "default": "0",
                "desc": "If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'."
            },
            {
                "name": "Explode Magnitude",
                "key": "explodemagnitude",
                "type": "integer",
                "default": "0",
                "desc": "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage."
            },
            {
                "name": "Performance Mode",
                "key": "performancemode",
                "type": "choices",
                "default": "Normal (0)",
                "desc": "Used to limit the amount of gibs produced when this entity breaks, for performance reasons.",
                "choices": {
                    "Normal": "0",
                    "No Gibs": "1",
                    "Full Gibs on All Platforms": "2",
                    "Reduced gibs": "3"
                }
            },
            {
                "name": "Pressure Delay",
                "key": "pressuredelay",
                "type": "float",
                "default": "0",
                "desc": "Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart)."
            },
            {
                "name": "Minimum Damage to Hurt",
                "key": "minhealthdmg",
                "type": "integer",
                "default": "0",
                "desc": "The entity will ignore any damage events if the damage is less than this amount."
            },
            {
                "name": "Health",
                "key": "health",
                "type": "integer",
                "default": "0",
                "desc": "Number of points of damage to take before breaking. 0 means don't break."
            },
            {
                "name": "Physics Impact Damage Scale",
                "key": "physdamagescale",
                "type": "float",
                "default": "1.0",
                "desc": "Scales damage energy when this object is hit by a physics object. Set to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials."
            }
        ],
        "inputs": [
            {
                "name": "Break",
                "type": "void",
                "desc": "Breaks the breakable."
            },
            {
                "name": "SetHealth",
                "type": "integer",
                "desc": "Sets a new value for the breakable's health. If the breakable's health reaches zero it will break."
            },
            {
                "name": "AddHealth",
                "type": "integer",
                "desc": "Adds health to the breakable. If the breakable's health reaches zero it will break."
            },
            {
                "name": "RemoveHealth",
                "type": "integer",
                "desc": "Removes health from the breakable. If the breakable's health reaches zero it will break."
            },
            {
                "name": "EnablePhyscannonPickup",
                "type": "void",
                "desc": "Makes the breakable able to picked up by the physcannon."
            },
            {
                "name": "DisablePhyscannonPickup",
                "type": "void",
                "desc": "Makes the breakable not able to picked up by the physcannon."
            },
            {
                "name": "SetMass",
                "type": "float",
                "desc": "Set mass of this object."
            }
        ],
        "outputs": [
            {
                "name": "OnBreak",
                "type": "void",
                "desc": "Fired when this breakable breaks."
            },
            {
                "name": "OnTakeDamage",
                "type": "void",
                "desc": "Fired each time this breakable takes any damage."
            },
            {
                "name": "OnHealthChanged",
                "type": "float",
                "desc": "Fired when the health of this breakable changes, passing the new value of health as a percentage of max health, from [0..1]."
            },
            {
                "name": "OnPhysCannonDetach",
                "type": "void",
                "desc": "Fired when the physcannon has ripped this breakable off of the wall. Only fired if ACT_PHYSCANNON_DETACH is defined in the model this breakable is using."
            },
            {
                "name": "OnPhysCannonAnimatePreStarted",
                "type": "void",
                "desc": "Fired when this prop starts playing the Pre physcannon-pull activity, caused by the player trying to grab this prop with the physcannon. Only fired if the ACT_PHYSCANNON_ANIMATE_PRE activity is defined in the model this breakable is using."
            },
            {
                "name": "OnPhysCannonAnimatePullStarted",
                "type": "void",
                "desc": "Fired when this prop starts playing the physcannon-pull activity, caused by the player trying to grab this prop with the physcannon. Only fired if the ACT_PHYSCANNON_ANIMATE activity is defined in the model this breakable is using. If the prop has Pre pull anim, this will be fired after the Pre anim has finished playing."
            },
            {
                "name": "OnPhysCannonPullAnimFinished",
                "type": "void",
                "desc": "Fired when this prop has finished playing the physcannon-pull activity, caused by the player trying to grab this prop with the physcannon. Only fired if the ACT_PHYSCANNON_ANIMATE activity is defined in the model this breakable is using. If the prop has Pre & Post pull anims, this will be fired after the Post anim has finished playing."
            },
            {
                "name": "OnPhysCannonAnimatePostStarted",
                "type": "void",
                "desc": "Fired when this prop starts playing the Post physcannon-pull activity. Only fired if the ACT_PHYSCANNON_ANIMATE_POST activity is defined in the model this breakable is using."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_cubemap",
        "desc": "An entity that creates a sample point for the Cubic Environment Map.",
        "bases": [],
        "keyvalues": [
            {
                "name": "Cubemap Size",
                "key": "cubemapsize",
                "type": "choices",
                "default": "Default (0)",
                "desc": "",
                "choices": {
                    "Default": "0",
                    "1x1": "1",
                    "2x2": "2",
                    "4x4": "3",
                    "8x8": "4",
                    "16x16": "5",
                    "32x32": "6",
                    "64x64": "7",
                    "128x128": "8",
                    "256x256": "9"
                }
            },
            {
                "name": "Brush faces",
                "key": "sides",
                "type": "sidelist",
                "default": "",
                "desc": "(Optional) Brushes faces to directly attach to the env_cubemap. Press Pick then click on faces in the 3D View to select them. Use CTRL while clicking to add or remove from the selection."
            },
            {
                "name": "Cubemap Bounds",
                "key": "parallaxobb",
                "type": "target_destination",
                "default": "",
                "desc": "Optionally assigns this cubemap a bounding box for parallax correction (brush entity tied to parallax_obb). This means the cubemap reflection will move as the camera moves, similar to func_reflective_glass. "
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_detail",
        "desc": "An entity that turns its brushes into detail brushes. Detail brushes do NOT contribute to visibility in the PVS. World geometry is not clipped to detail brushes, so if you have a small detail clump attached to a wall, the wall won't be cut up by the detail brush. func_detail is great for high-frequency brush geometry that's visual detail only. It is also ideal for reducing map VIS time.",
        "bases": [],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_detail_blocker",
        "desc": "A brush entity that prevents detail sprites from being placed inside its volume.",
        "bases": [],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "func_fish_pool",
        "desc": "Creates a school of interactive fish that swim near this entity.",
        "bases": [],
        "keyvalues": [
            {
                "name": "World model",
                "key": "model",
                "type": "studio",
                "default": "models/Junkola.mdl",
                "desc": ""
            },
            {
                "name": "Fish Count",
                "key": "fish_count",
                "type": "integer",
                "default": "10",
                "desc": "Number of Fish in this Pool"
            },
            {
                "name": "Max Range",
                "key": "max_range",
                "type": "float",
                "default": "150",
                "desc": "How far away a Fish can wander (max 255)"
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "func_instance_io_proxy",
        "desc": "Place one copy of this entity inside of an instance.  Sending messages to entities inside the instance from the Proxy's OnProxyRelay output will allow you to trigger these entities from outside the instance by sending messages to the func_instance.  Send the ProxyRelay message from entities inside the instance to the proxy and you will be able to use these events to send messages to other entities outside the instance from the func_instance. NOTE: The instance, the proxy, and all entities involved should be named descriptively.",
        "bases": [],
        "keyvalues": [
            {
                "name": "Name",
                "key": "targetname",
                "type": "target_source",
                "default": "proxy",
                "desc": "The name that other entities refer to this entity by."
            }
        ],
        "inputs": [
            {
                "name": "ProxyRelay",
                "type": "string",
                "desc": "This message will get relayed and will be available from the instance."
            },
            {
                "name": "ProxyRelay1",
                "type": "string",
                "desc": "Added by the compiler, this is used internally to connect the outputs."
            },
            {
                "name": "ProxyRelay2",
                "type": "string",
                "desc": "Added by the compiler, this is used internally to connect the outputs."
            },
            {
                "name": "ProxyRelay3",
                "type": "string",
                "desc": "Added by the compiler, this is used internally to connect the outputs."
            },
            {
                "name": "ProxyRelay4",
                "type": "string",
                "desc": "Added by the compiler, this is used internally to connect the outputs."
            },
            {
                "name": "ProxyRelay5",
                "type": "string",
                "desc": "Added by the compiler, this is used internally to connect the outputs."
            }
        ],
        "outputs": [
            {
                "name": "OnProxyRelay",
                "type": "void",
                "desc": "A message from outside can trigger this to cause something to happen in the instance."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "func_instance_origin",
        "desc": "This is the center of the instance for rotation.",
        "bases": [],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "func_instance_parms",
        "desc": "Place one copy of this entity inside of an instance.  Whenever you add a $parameter for the instance, get the properties of this entity.  It will auto-populate it with the variables and allow you to indicate the variable type.",
        "bases": [],
        "keyvalues": [
            {
                "name": "Parm (01)",
                "key": "parm1",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (02)",
                "key": "parm2",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (03)",
                "key": "parm3",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (04)",
                "key": "parm4",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (05)",
                "key": "parm5",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (06)",
                "key": "parm6",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (07)",
                "key": "parm7",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (08)",
                "key": "parm8",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (09)",
                "key": "parm9",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (10)",
                "key": "parm10",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (11)",
                "key": "parm11",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (12)",
                "key": "parm12",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (13)",
                "key": "parm13",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (14)",
                "key": "parm14",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (15)",
                "key": "parm15",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (16)",
                "key": "parm16",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (17)",
                "key": "parm17",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (18)",
                "key": "parm18",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (19)",
                "key": "parm19",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (20)",
                "key": "parm20",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (21)",
                "key": "parm21",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (22)",
                "key": "parm22",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (23)",
                "key": "parm23",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (24)",
                "key": "parm24",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (25)",
                "key": "parm25",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (26)",
                "key": "parm26",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (27)",
                "key": "parm27",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (28)",
                "key": "parm28",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (29)",
                "key": "parm29",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            },
            {
                "name": "Parm (30)",
                "key": "parm30",
                "type": "instance_parm",
                "default": "",
                "desc": "This is a parameter.  It goes in the form of $variable type [default value]."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_ladder",
        "desc": "Ladder. Players will be able to freely along one side of this brush, as if it was a ladder. If you are using a model prop for the visual representation of the ladder in the map, apply the toolsinvisibleladder material to the climbable side of the func_ladder brush.",
        "bases": [],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_viscluster",
        "desc": "Any visleafs touching this brush will assume they can see each other. Place across large open areas to help reduce compile times. Use sparingly, can create lag if you're not careful!",
        "bases": [],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "hammer_notes",
        "desc": "Fake entity to store notes and comments inside. Won`t spawn.",
        "bases": [],
        "keyvalues": [
            {
                "name": "Display Message",
                "key": "message",
                "type": "string",
                "default": "",
                "desc": "Text to display in the 3D view."
            },
            {
                "name": "Text Size",
                "key": "textsize",
                "type": "float",
                "default": "10",
                "desc": "Text Size."
            },
            {
                "name": "Color",
                "key": "color",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "White Related Entity",
                "key": "linename1",
                "type": "target_destination",
                "default": "",
                "desc": "Add entity names to have lines drawn to them."
            },
            {
                "name": "Red Related Entity",
                "key": "linename2",
                "type": "target_destination",
                "default": "",
                "desc": "Add entity names to have lines drawn to them."
            },
            {
                "name": "Green Related Entity",
                "key": "linename3",
                "type": "target_destination",
                "default": "",
                "desc": "Add entity names to have lines drawn to them."
            },
            {
                "name": "Blue Related Entity",
                "key": "linename4",
                "type": "target_destination",
                "default": "",
                "desc": "Add entity names to have lines drawn to them."
            },
            {
                "name": "Material Chooser",
                "key": "mat",
                "type": "material",
                "default": "",
                "desc": "Has the material browser for easier editing."
            },
            {
                "name": "Particle Chooser",
                "key": "part",
                "type": "particlesystem",
                "default": "",
                "desc": "Has the particle system chooser for easier editing."
            },
            {
                "name": "Model Chooser",
                "key": "model",
                "type": "studio",
                "default": "",
                "desc": "Has the model chooser for easier editing."
            },
            {
                "name": "Sound Chooser",
                "key": "sound",
                "type": "sound",
                "default": "",
                "desc": "Has the sound chooser for easier editing."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_mass_center",
        "desc": "An entity that overrides the mass center of the target physics object, by moving it to the info_mass_center's location. This kills itself on spawn.",
        "bases": [],
        "keyvalues": [
            {
                "name": "Target object",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The entity whose mass center will be overridden."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_no_dynamic_shadow",
        "desc": "Use this entity to mark surfaces that shouldn't receive dynamic shadows. Useful to apply to walls and floors where shadows are drawn improperly, giving away the location of enemies.",
        "bases": [],
        "keyvalues": [
            {
                "name": "Brush faces",
                "key": "sides",
                "type": "sidelist",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_overlay_transition",
        "desc": "This creates a scrolling texture at the intersect between two brushes, for things like wave effects at water edges.",
        "bases": [],
        "keyvalues": [
            {
                "name": "Material",
                "key": "material",
                "type": "material",
                "default": "",
                "desc": ""
            },
            {
                "name": "Brush faces",
                "key": "sides",
                "type": "sidelist",
                "default": "",
                "desc": ""
            },
            {
                "name": "Water faces",
                "key": "sides2",
                "type": "sidelist",
                "default": "",
                "desc": ""
            },
            {
                "name": "Texcoord Length Start",
                "key": "lengthtexcoordstart",
                "type": "float",
                "default": "0.0",
                "desc": ""
            },
            {
                "name": "Texcoord Length End",
                "key": "lengthtexcoordend",
                "type": "float",
                "default": "1.0",
                "desc": ""
            },
            {
                "name": "Texcoord Width Start",
                "key": "widthtexcoordstart",
                "type": "float",
                "default": "0.0",
                "desc": ""
            },
            {
                "name": "Texcoord Width End",
                "key": "widthtexcoordend",
                "type": "float",
                "default": "1.0",
                "desc": ""
            },
            {
                "name": "Width Land",
                "key": "width1",
                "type": "float",
                "default": "25.0",
                "desc": ""
            },
            {
                "name": "Width Water",
                "key": "width2",
                "type": "float",
                "default": "25.0",
                "desc": ""
            },
            {
                "name": "Show Debug",
                "key": "debugdraw",
                "type": "boolean",
                "default": "No",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "parallax_obb",
        "desc": "Bounding box for Parallax Corrected Cubemaps.",
        "bases": [],
        "keyvalues": [
            {
                "name": "Name",
                "key": "targetname",
                "type": "target_source",
                "default": "",
                "desc": "The name that other entities refer to this entity by."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "BaseBeam",
        "desc": "This is the definition of the 'beam' class, but we don't want that in the entity list.",
        "bases": [
            "BaseEntityPoint",
            "RenderFields",
            "Reflection"
        ],
        "keyvalues": [
            {
                "name": "Render Mode",
                "key": "rendermode",
                "type": "choices",
                "default": "Color (1)",
                "desc": "Render mode is forced to Texture, but set to Color in Hammer to ensure correct rendering.",
                "choices": {
                    "Color": "1"
                }
            },
            {
                "name": "Brightness (1 - 255)",
                "key": "renderamt",
                "type": "integer",
                "default": "100",
                "desc": ""
            },
            {
                "name": "Beam Color (R G B)",
                "key": "rendercolor",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "HDR color scale.",
                "key": "hdrcolorscale",
                "type": "float",
                "default": "1.0",
                "desc": "float value to multiply sprite color by when running in HDR mode."
            },
            {
                "name": "Amount of noise (0-64)",
                "key": "noiseamplitude",
                "type": "float",
                "default": "0",
                "desc": "The amount of noise in the beam. 0 is a perfectly straight beam."
            },
            {
                "name": "Frames per 10 seconds",
                "key": "framerate",
                "type": "integer",
                "default": "0",
                "desc": "Framerate at which the beam texture should animate, if it has multiple frames."
            },
            {
                "name": "Starting Frame",
                "key": "framestart",
                "type": "integer",
                "default": "0",
                "desc": "The frame to start the beam texture on."
            },
            {
                "name": "Sprite Name",
                "key": "texture",
                "type": "sprite",
                "default": "sprites/laserbeam.spr",
                "desc": "The material used to draw the beam."
            },
            {
                "name": "Texture Scroll Rate (0-100)",
                "key": "texturescroll",
                "type": "integer",
                "default": "35",
                "desc": "Rate at which the beam texture should scroll along the beam."
            },
            {
                "name": "Damage / second",
                "key": "damage",
                "type": "string",
                "default": "0",
                "desc": "How much damage this beam does per second to things while active. For continuous damage, the value should be greater than 10 or it may not work."
            },
            {
                "name": "Dissolve Type",
                "key": "dissolvetype",
                "type": "choices",
                "default": "None (-1)",
                "desc": "",
                "choices": {
                    "None": "-1",
                    "Energy": "0",
                    "Heavy electrical": "1",
                    "Light electrical": "2",
                    "Core": "3"
                }
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turns the beam on."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Turns the beam off."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggles the beam between on and off."
            },
            {
                "name": "Noise",
                "type": "float",
                "desc": "Set the noise of the beam, in pixels."
            },
            {
                "name": "Width",
                "type": "float",
                "desc": "Set the width of the beam, in pixels."
            },
            {
                "name": "ScrollSpeed",
                "type": "float",
                "desc": "Set the scroll speed in units per second (0 - 100)."
            },
            {
                "name": "Alpha",
                "type": "integer",
                "desc": "Sets the beam's alpha (0 - 255)."
            },
            {
                "name": "Color",
                "type": "color255",
                "desc": "Sets the beam's render color (R G B)."
            },
            {
                "name": "ColorRedValue",
                "type": "float",
                "desc": "Sets the red color channel's value (0 - 255)."
            },
            {
                "name": "ColorGreenValue",
                "type": "float",
                "desc": "Sets the green color channel's value (0 - 255)."
            },
            {
                "name": "ColorBlueValue",
                "type": "float",
                "desc": "Sets the blue color channel's value (0 - 255)."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "BaseDustParticleSpawner",
        "desc": "",
        "bases": [
            "BaseEffectBrush"
        ],
        "keyvalues": [
            {
                "name": "Start Disabled",
                "key": "startdisabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Particle Color (R G B)",
                "key": "color",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "Particle Per Second",
                "key": "spawnrate",
                "type": "integer",
                "default": "40",
                "desc": "Number of particles to spawn, per second."
            },
            {
                "name": "Maximum Particle Speed",
                "key": "speedmax",
                "type": "integer",
                "default": "13",
                "desc": "Maximum speed that the particles can move after spawning."
            },
            {
                "name": "Particle Fall Speed",
                "key": "fallspeed",
                "type": "integer",
                "default": "0",
                "desc": "How fast the particles fall to the ground. This value is subtracted from the particle speed in the Z-axis only."
            },
            {
                "name": "Minimum Particle Lifetime",
                "key": "lifetimemin",
                "type": "integer",
                "default": "3",
                "desc": "Minimum number of seconds until each particle dies. Particles live for a random duration between this and 'Maximum Particle Lifetime'."
            },
            {
                "name": "Maximum Particle Lifetime",
                "key": "lifetimemax",
                "type": "integer",
                "default": "5",
                "desc": "Maximum number of seconds until each particle dies. Particles live for a random duration between 'Minimum Particle Lifetime' and this. Will be clamped to a max of 15."
            },
            {
                "name": "Maximum Visible Distance",
                "key": "distmax",
                "type": "integer",
                "default": "1024",
                "desc": "Maximum distance at which particles are visible. They fade to translucent at this distance."
            },
            {
                "name": "Frozen",
                "key": "frozen",
                "type": "boolean",
                "default": "No",
                "desc": "When set, this entity spawns the number of particles in SpawnRate immediately, and then goes inactive."
            },
            {
                "name": "Affected by Wind",
                "key": "affectedbywind",
                "type": "boolean",
                "default": "No",
                "desc": "When set, the dust will be affected by any env_wind entity settings in the map."
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turn on."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Turn off."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "BaseEntityAnimating",
        "desc": "",
        "bases": [
            "BaseEntityPoint",
            "RenderFields",
            "Reflection",
            "ToggleDraw",
            "DamageFilter"
        ],
        "keyvalues": [
            {
                "name": "Effect Flags",
                "key": "effects",
                "type": "choices",
                "default": "None (0)",
                "desc": "For configuring visual effects. If you want to combine effects, turn SmartEdit off and add the effect numbers together, i.e. 64 + 8 = 72.",
                "choices": {
                    "None": "0",
                    "Bonemerge always, very expensive!!": "1",
                    "Bright, dynamic light at entity origin": "2",
                    "Dim, dynamic light at entity origin": "4",
                    "No movement interpolation": "8",
                    "Don't cast shadows": "16",
                    "Don't draw entity (entity is fully ignored by clients, NOT server)": "32",
                    "Don't receive dynamic shadows": "64",
                    "Bonemerge only in PVS, better performance but prone to disappearing. Use with Bonemerge.": "128",
                    "Blinking glow": "256",
                    "Flag parent as always animating and realign each frame": "512",
                    "Mark for fast reflections": "1024",
                    "No shadow depth, for use with env_cascade_light": "2048",
                    "Dont cache in shadow depthmap (render every frame)": "4096",
                    "No flashlight": "8192",
                    "No CSM": "16384"
                }
            },
            {
                "name": "Collisions",
                "key": "solid",
                "type": "choices",
                "default": "VPhysics (6)",
                "desc": "Method of collision for this entity. Can be changed at runtime with AddOutput.",
                "choices": {
                    "None": "0",
                    "BSP (QPhysics)": "1",
                    "Bounding Box": "2",
                    "Oriented Bounding Box": "3",
                    "Oriented Bounding Box, constrained to Yaw only": "4",
                    "Custom (defined per-entity, if not defined the entity will have bizarre collision behavior)": "5",
                    "VPhysics": "6"
                }
            },
            {
                "name": "Bodygroup",
                "key": "body",
                "type": "integer",
                "default": "0",
                "desc": "Body Groups allow turning on and off parts of a model, so sections can be shown or hidden dynamically."
            },
            {
                "name": "(Set) Body Group",
                "key": "setbodygroup",
                "type": "integer",
                "default": "0",
                "desc": "Identical to Body Group (body), ask Valve why this is duplicated. Body Groups allow turning on and off parts of a model, so sections can be shown or hidden dynamically."
            },
            {
                "name": "Texture Frame",
                "key": "texframeindex",
                "type": "integer",
                "default": "",
                "desc": "The frame number for any animated textures on this entity."
            },
            {
                "name": "Hitbox Set",
                "key": "hitboxset",
                "type": "string",
                "default": "",
                "desc": "Sets the $hboxset to use for collision testing."
            },
            {
                "name": "Model Scale",
                "key": "modelscale",
                "type": "float",
                "default": "",
                "desc": "A multiplier for the size of the model."
            },
            {
                "name": "Start Fade Distance/Pixels",
                "key": "fademindist",
                "type": "float",
                "default": "",
                "desc": "Distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scale appropriately if the entity is in a 3D Skybox."
            },
            {
                "name": "End Fade Distance/Pixels",
                "key": "fademaxdist",
                "type": "float",
                "default": "",
                "desc": "Distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
            },
            {
                "name": "Fade Scale",
                "key": "fadescale",
                "type": "float",
                "default": "1",
                "desc": "If you specify a fade in the worldspawn, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.This scale factor gives you some control over the fade. Using 0 here turns off the forcible fades. Numbers smaller than 1 cause the prop to fade out at further distances, and greater than 1 cause it to fade out at closer distances."
            },
            {
                "name": "Lighting Origin",
                "key": "lightingorigin",
                "type": "target_destination",
                "default": "",
                "desc": "Select any entity (not info_lighting!) from which to sample lighting instead of the entity's origin."
            },
            {
                "name": "Lighting Origin Offset",
                "key": "lightingoriginhack",
                "type": "target_destination",
                "default": "",
                "desc": "The info_lighting_relative from which to sample lighting instead of the entity's origin."
            },
            {
                "name": "Shadow Cast Distance",
                "key": "shadowcastdist",
                "type": "integer",
                "default": "",
                "desc": "Sets how far the entity casts dynamic shadows, in units. 0 means default distance from the shadow_control entity."
            },
            {
                "name": "Disable Shadows?",
                "key": "disableshadows",
                "type": "boolean",
                "default": "No",
                "desc": "Prevent the entity from creating cheap render-to-texture/dynamic shadows."
            },
            {
                "name": "Disable Receiving Shadows?",
                "key": "disablereceiveshadows",
                "type": "boolean",
                "default": "No",
                "desc": "Prevents dynamic shadows (e.g. player and prop shadows) from appearing on this entity."
            },
            {
                "name": "Disable ShadowDepth",
                "key": "disableshadowdepth",
                "type": "boolean",
                "default": "No",
                "desc": "Used to disable rendering into shadow depth (for flashlight) for this entity."
            },
            {
                "name": "Projected Texture Cache",
                "key": "shadowdepthnocache",
                "type": "choices",
                "default": "Default (0)",
                "desc": "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.",
                "choices": {
                    "Default": "0",
                    "No cache = render every frame": "1",
                    "Cache it = render only once": "2"
                }
            },
            {
                "name": "Disable flashlight",
                "key": "disableflashlight",
                "type": "boolean",
                "default": "No",
                "desc": "Used to disable flashlight (env_projectedtexture) lighting and shadows on this entity."
            },
            {
                "name": "Draw in Cubemaps",
                "key": "drawincubemaps",
                "type": "boolean",
                "default": "No",
                "desc": "Whether or not this entity should be drawn in cubemaps. Moving entities like physics props or doors shouldn't be drawn into cubemaps."
            }
        ],
        "inputs": [
            {
                "name": "Skin",
                "type": "integer",
                "desc": "Changes the model skin to the specified number."
            },
            {
                "name": "SetBodyGroup",
                "type": "integer",
                "desc": "Change the model's bodygroup to the specified index number."
            },
            {
                "name": "Ignite",
                "type": "void",
                "desc": "Makes the entity catch on fire indefinitely."
            },
            {
                "name": "IgniteLifetime",
                "type": "float",
                "desc": "Makes the entity catch on fire for a given amount of time."
            },
            {
                "name": "IgniteNumHitboxFires",
                "type": "integer",
                "desc": "Makes the entity catch on fire with a given number of hitbox fire particles."
            },
            {
                "name": "IgniteHitboxFireScale",
                "type": "float",
                "desc": "Makes the entity catch on fire with a given scale for hitbox fire particles."
            },
            {
                "name": "BecomeRagdoll",
                "type": "void",
                "desc": "Kills the entity and creates a client-side ragdoll from the model with ZERO force (just go limp). Input is only passed if the model contains ragdolling, for other models phys_convert can be used instead. OnDeath, OnHalfHealth, etc. outputs will **NOT** BE FIRED."
            },
            {
                "name": "SetLightingOrigin",
                "type": "string",
                "desc": "Sets the entity to use as the entity's lighting origin. Any entity can be used."
            },
            {
                "name": "SetLightingOriginHack",
                "type": "string",
                "desc": "Offsets the entity's lighting origin by their distance from an info_lighting_relative."
            },
            {
                "name": "fademindist",
                "type": "float",
                "desc": "Sets distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scale appropriately if the entity is in a 3D Skybox."
            },
            {
                "name": "fademaxdist",
                "type": "float",
                "desc": "Sets distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
            },
            {
                "name": "DisableShadow",
                "type": "void",
                "desc": "Allows the entity to draw a render target (dynamic) shadow."
            },
            {
                "name": "EnableShadow",
                "type": "void",
                "desc": "Prevents the entity from drawing a render target (dynamic) shadow."
            },
            {
                "name": "DisableReceivingFlashlight",
                "type": "void",
                "desc": "This object will not recieve light or shadows from projected textures (flashlights)."
            },
            {
                "name": "EnableReceivingFlashlight",
                "type": "void",
                "desc": "This object may recieve light or shadows from projected textures (flashlights)."
            },
            {
                "name": "AlternativeSorting",
                "type": "boolean",
                "desc": "Used to attempt to fix sorting problems when rendering. True activates, false deactivates"
            },
            {
                "name": "SetModelScale",
                "type": "vector",
                "desc": "Sets the scale of the model. Secondary parameter (space delimited) sets the duration of time to scale the model."
            }
        ],
        "outputs": [
            {
                "name": "OnIgnite",
                "type": "void",
                "desc": "Fired when this object catches fire."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "BaseEntityPhysics",
        "desc": "",
        "bases": [
            "BaseEntityPoint",
            "RenderFields",
            "Reflection",
            "DamageFilter"
        ],
        "keyvalues": [
            {
                "name": "Collisions",
                "key": "solid",
                "type": "choices",
                "default": "VPhysics (6)",
                "desc": "Method of collision for this entity. Can be changed at runtime with AddOutput.",
                "choices": {
                    "None": "0",
                    "BSP (QPhysics)": "1",
                    "Bounding Box": "2",
                    "Oriented Bounding Box": "3",
                    "Oriented Bounding Box, constrained to Yaw only": "4",
                    "Custom (defined per-entity, if not defined the entity will have bizarre collision behavior)": "5",
                    "VPhysics": "6"
                }
            },
            {
                "name": "Bodygroup",
                "key": "body",
                "type": "integer",
                "default": "0",
                "desc": "Sets the body group index for the model, starting with 0, if available."
            },
            {
                "name": "Texture Frame",
                "key": "texframeindex",
                "type": "integer",
                "default": "",
                "desc": "The frame number for any animated textures on this entity."
            },
            {
                "name": "Lighting Origin",
                "key": "lightingorigin",
                "type": "target_destination",
                "default": "",
                "desc": "Select any entity (not info_lighting!) from which to sample lighting instead of the entity's origin."
            },
            {
                "name": "Lighting Origin Offset",
                "key": "lightingoriginhack",
                "type": "target_destination",
                "default": "",
                "desc": "The info_lighting_relative from which to sample lighting instead of the entity's origin."
            },
            {
                "name": "Start Fade Distance/Pixels",
                "key": "fademindist",
                "type": "float",
                "default": "",
                "desc": "Distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scale appropriately if the entity is in a 3D Skybox."
            },
            {
                "name": "End Fade Distance/Pixels",
                "key": "fademaxdist",
                "type": "float",
                "default": "",
                "desc": "Distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
            },
            {
                "name": "Fade Scale",
                "key": "fadescale",
                "type": "float",
                "default": "1",
                "desc": "If you specify a fade in the worldspawn, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.This scale factor gives you some control over the fade. Using 0 here turns off the forcible fades. Numbers smaller than 1 cause the prop to fade out at further distances, and greater than 1 cause it to fade out at closer distances."
            },
            {
                "name": "Shadow Cast Distance",
                "key": "shadowcastdist",
                "type": "integer",
                "default": "",
                "desc": "Sets how far the entity casts dynamic shadows, in units. 0 means default distance from the shadow_control entity."
            },
            {
                "name": "Disable Shadows?",
                "key": "disableshadows",
                "type": "boolean",
                "default": "No",
                "desc": "Prevent the entity from creating cheap render-to-texture/dynamic shadows."
            },
            {
                "name": "Disable Receiving Shadows?",
                "key": "disablereceiveshadows",
                "type": "boolean",
                "default": "No",
                "desc": "Prevents dynamic shadows (e.g. player and prop shadows) from appearing on this entity."
            },
            {
                "name": "Model Scale",
                "key": "modelscale",
                "type": "float",
                "default": "",
                "desc": "A multiplier for the size of the model."
            }
        ],
        "inputs": [
            {
                "name": "Skin",
                "type": "integer",
                "desc": "Changes the model skin to the specified number."
            },
            {
                "name": "SetBodyGroup",
                "type": "integer",
                "desc": "Change the model's bodygroup to the specified index number."
            },
            {
                "name": "Ignite",
                "type": "void",
                "desc": "Makes the entity catch on fire indefinitely."
            },
            {
                "name": "IgniteLifetime",
                "type": "float",
                "desc": "Makes the entity catch on fire for a given amount of time."
            },
            {
                "name": "IgniteNumHitboxFires",
                "type": "integer",
                "desc": "Makes the entity catch on fire with a given number of hitbox fire particles."
            },
            {
                "name": "IgniteHitboxFireScale",
                "type": "float",
                "desc": "Makes the entity catch on fire with a given scale for hitbox fire particles."
            },
            {
                "name": "BecomeRagdoll",
                "type": "void",
                "desc": "Kills the entity and creates a client-side ragdoll from the model. Input is only passed if the model contains ragdolling, for other models phys_convert can be used instead."
            },
            {
                "name": "SetLightingOrigin",
                "type": "string",
                "desc": "Sets the entity to use as the entity's lighting origin. Any entity can be used."
            },
            {
                "name": "SetLightingOriginHack",
                "type": "string",
                "desc": "Offsets the entity's lighting origin by their distance from an info_lighting_relative."
            },
            {
                "name": "fademindist",
                "type": "float",
                "desc": "Sets distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scale appropriately if the entity is in a 3D Skybox."
            },
            {
                "name": "fademaxdist",
                "type": "float",
                "desc": "Sets distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
            },
            {
                "name": "DisableShadow",
                "type": "void",
                "desc": "Allows the entity to draw a render target (dynamic) shadow."
            },
            {
                "name": "EnableShadow",
                "type": "void",
                "desc": "Prevents the entity from drawing a render target (dynamic) shadow."
            },
            {
                "name": "AlternativeSorting",
                "type": "boolean",
                "desc": "Used to attempt to fix sorting problems when rendering. True activates, false deactivates"
            },
            {
                "name": "SetModelScale",
                "type": "vector",
                "desc": "Sets the scale of the model. Secondary parameter (space delimited) sets the duration of time to scale the model."
            }
        ],
        "outputs": [
            {
                "name": "OnIgnite",
                "type": "void",
                "desc": "Fired when this object catches fire."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "BaseEntityVisBrush",
        "desc": "",
        "bases": [
            "BaseEntityBrush",
            "RenderFields",
            "ToggleDraw"
        ],
        "keyvalues": [
            {
                "name": "Effect Flags",
                "key": "effects",
                "type": "choices",
                "default": "None (0)",
                "desc": "For configuring visual effects. If you want to combine effects, turn SmartEdit off and add the effect numbers together, i.e. 64 + 8 = 72.",
                "choices": {
                    "None": "0",
                    "Bonemerge always, very expensive!!": "1",
                    "Bright, dynamic light at entity origin": "2",
                    "Dim, dynamic light at entity origin": "4",
                    "No movement interpolation": "8",
                    "Don't cast shadows": "16",
                    "Don't draw entity (entity is fully ignored by clients, NOT server)": "32",
                    "Don't receive dynamic shadows": "64",
                    "Bonemerge only in PVS, better performance but prone to disappearing. Use with Bonemerge.": "128",
                    "Blinking glow": "256",
                    "Flag parent as always animating and realign each frame": "512",
                    "Mark for fast reflections": "1024",
                    "No shadow depth, for use with env_cascade_light": "2048",
                    "Dont cache in shadow depthmap (render every frame)": "4096",
                    "No flashlight": "8192",
                    "No CSM": "16384"
                }
            },
            {
                "name": "VRAD Shadows",
                "key": "vrad_brush_cast_shadows",
                "type": "choices",
                "default": "Do not cast shadows (0)",
                "desc": "Determines if this entity will cast lightmap shadows.",
                "choices": {
                    "Do not cast shadows": "0",
                    "Cast shadows": "1"
                }
            },
            {
                "name": "Minimum Light Level",
                "key": "_minlight",
                "type": "float",
                "default": "0",
                "desc": "The minimum level of ambient light that hits this brush."
            },
            {
                "name": "Disable Receiving Shadows?",
                "key": "disablereceiveshadows",
                "type": "boolean",
                "default": "No",
                "desc": "Prevents dynamic shadows (e.g. player and prop shadows) from appearing on this entity."
            },
            {
                "name": "Disable ShadowDepth",
                "key": "disableshadowdepth",
                "type": "boolean",
                "default": "No",
                "desc": "Used to disable rendering into shadow depth (for flashlight) for this entity."
            },
            {
                "name": "Projected Texture Cache",
                "key": "shadowdepthnocache",
                "type": "choices",
                "default": "Default (0)",
                "desc": "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.",
                "choices": {
                    "Default": "0",
                    "No cache = render every frame": "1",
                    "Cache it = render only once": "2"
                }
            },
            {
                "name": "Disable flashlight",
                "key": "disableflashlight",
                "type": "boolean",
                "default": "No",
                "desc": "Used to disable flashlight (env_projectedtexture) lighting and shadows on this entity."
            }
        ],
        "inputs": [
            {
                "name": "DisableShadow",
                "type": "void",
                "desc": "Allows the entity to draw a render target (dynamic) shadow."
            },
            {
                "name": "EnableShadow",
                "type": "void",
                "desc": "Prevents the entity from drawing a render target (dynamic) shadow."
            },
            {
                "name": "DisableReceivingFlashlight",
                "type": "void",
                "desc": "This object will not recieve light or shadows from projected textures (flashlights)."
            },
            {
                "name": "EnableReceivingFlashlight",
                "type": "void",
                "desc": "This object may recieve light or shadows from projected textures (flashlights)."
            },
            {
                "name": "EnableDamageForces",
                "type": "void",
                "desc": "Damaging the entity applies physics forces to it."
            },
            {
                "name": "DisableDamageForces",
                "type": "void",
                "desc": "Damaging the entity does not apply physics forces to it."
            },
            {
                "name": "AlternativeSorting",
                "type": "boolean",
                "desc": "Used to attempt to fix sorting problems when rendering. True activates, false deactivates"
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "BaseNPCMaker",
        "desc": "",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Start Disabled",
                "key": "startdisabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[16] Fade Corpse": {
                        "default": false,
                        "num": 16
                    },
                    "[32] Infinite Children": {
                        "default": false,
                        "num": 32
                    },
                    "[64] Do Not Drop": {
                        "default": false,
                        "num": 64
                    },
                    "[128] Don't Spawn While Visible": {
                        "default": false,
                        "num": 128
                    }
                }
            },
            {
                "name": "Num. of NPCs",
                "key": "maxnpccount",
                "type": "integer",
                "default": "1",
                "desc": "Number of NPCs that will spawn before this spawner is exhausted."
            },
            {
                "name": "Frequency",
                "key": "spawnfrequency",
                "type": "string",
                "default": "5",
                "desc": "How often (in seconds) a new NPC will be spawned. If set to -1, a new NPC will be made when the last NPC dies."
            },
            {
                "name": "Max Live NPCs",
                "key": "maxlivechildren",
                "type": "integer",
                "default": "5",
                "desc": "Maximum number of live children allowed at any one time (new ones will not be made until one dies). If set to -1, no limit is applied."
            },
            {
                "name": "Hull Check Mode",
                "key": "hullcheckmode",
                "type": "choices",
                "default": "Default (0)",
                "desc": "How NPC's hull should be checked at spawn destination?",
                "choices": {
                    "Default": "0",
                    "No hull check": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "Spawn",
                "type": "void",
                "desc": "Spawns an NPC."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggles the spawner enabled/disabled state."
            },
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enables the spawner."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disables the spawner."
            },
            {
                "name": "AddMaxChildren",
                "type": "integer",
                "desc": "Adds to the number of NPCs that can spawn before the spawner is exhausted. If an exhausted spawner is given some children to spawn, it still won't begin spawning until it is re-enabled with the Enable input."
            },
            {
                "name": "SetMaxChildren",
                "type": "integer",
                "desc": "Sets the number of NPCs that can spawn before the spawner is exhausted. If an exhausted spawner is given some children to spawn, it still won't begin spawning until it is re-enabled with the Enable input."
            },
            {
                "name": "SetMaxLiveChildren",
                "type": "integer",
                "desc": "Sets the maximum number of NPCs that can be alive at any one time from this spawner."
            },
            {
                "name": "SetSpawnFrequency",
                "type": "float",
                "desc": "Sets how often (in seconds) a new NPC will be spawned."
            }
        ],
        "outputs": [
            {
                "name": "OnSpawnNPC",
                "type": "target_destination",
                "desc": "Fired when an NPC is spawned. The activator is the NPC, and the parameter is a pointer to the NPC."
            },
            {
                "name": "OnAllSpawned",
                "type": "void",
                "desc": "Fired when the spawned is exhausted (all children have been spawned)."
            },
            {
                "name": "OnAllSpawnedDead",
                "type": "void",
                "desc": "Fired when the spawner is exhausted (all children have been spawned) and all spawned children have died."
            },
            {
                "name": "OnAllLiveChildrenDead",
                "type": "void",
                "desc": "Fired when all spawned children have died. This does not mean the spawner is exhausted, so a new child may be spawned any time after this (unless the maker is disabled)."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "BaseTank",
        "desc": "",
        "bases": [
            "BaseEntityBrush"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Active": {
                        "default": false,
                        "num": 1
                    },
                    "[16] Only Direct": {
                        "default": false,
                        "num": 16
                    },
                    "[32] Controllable": {
                        "default": false,
                        "num": 32
                    },
                    "[64] Damage Kick": {
                        "default": false,
                        "num": 64
                    },
                    "[1024] NPC Controllable": {
                        "default": false,
                        "num": 1024
                    },
                    "[2048] NPC Set Controller": {
                        "default": false,
                        "num": 2048
                    },
                    "[4096] Allow friendlies to hit player": {
                        "default": false,
                        "num": 4096
                    },
                    "[32768] Non-solid.": {
                        "default": false,
                        "num": 32768
                    },
                    "[131072] Perfect accuracy every 3rd shot at player": {
                        "default": false,
                        "num": 131072
                    }
                }
            },
            {
                "name": "Control Volume",
                "key": "control_volume",
                "type": "target_destination",
                "default": "",
                "desc": "Name of a trigger the specifies the volume in which a player must be to control this tank."
            },
            {
                "name": "(Team) Master",
                "key": "master",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Yaw rate",
                "key": "yawrate",
                "type": "string",
                "default": "30",
                "desc": ""
            },
            {
                "name": "Yaw range",
                "key": "yawrange",
                "type": "string",
                "default": "180",
                "desc": ""
            },
            {
                "name": "Yaw tolerance",
                "key": "yawtolerance",
                "type": "string",
                "default": "15",
                "desc": ""
            },
            {
                "name": "Pitch rate",
                "key": "pitchrate",
                "type": "string",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Pitch range",
                "key": "pitchrange",
                "type": "string",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Pitch tolerance",
                "key": "pitchtolerance",
                "type": "string",
                "default": "5",
                "desc": ""
            },
            {
                "name": "Barrel Length",
                "key": "barrel",
                "type": "string",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Barrel Horizontal",
                "key": "barrely",
                "type": "string",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Barrel Vertical",
                "key": "barrelz",
                "type": "string",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Smoke Sprite",
                "key": "spritesmoke",
                "type": "sprite",
                "default": "",
                "desc": "A specific sprite to use for the muzzle's smoke effect."
            },
            {
                "name": "Flash Sprite",
                "key": "spriteflash",
                "type": "sprite",
                "default": "",
                "desc": "A specific sprite to use for the muzzle's flash effect."
            },
            {
                "name": "Sprite scale",
                "key": "spritescale",
                "type": "string",
                "default": "1",
                "desc": "The scale for smoke and flash sprites."
            },
            {
                "name": "Rotate Start Sound",
                "key": "rotatestartsound",
                "type": "sound",
                "default": "",
                "desc": ""
            },
            {
                "name": "Rotate Loop Sound",
                "key": "rotatesound",
                "type": "sound",
                "default": "",
                "desc": ""
            },
            {
                "name": "Rotate Stop Sound",
                "key": "rotatestopsound",
                "type": "sound",
                "default": "",
                "desc": ""
            },
            {
                "name": "Rate of Fire",
                "key": "firerate",
                "type": "string",
                "default": "1",
                "desc": ""
            },
            {
                "name": "Damage Per Bullet",
                "key": "bullet_damage",
                "type": "string",
                "default": "0",
                "desc": "If set to 0, it'll use the base weapon bullet's damage."
            },
            {
                "name": "Damage Per Bullet Vs Player",
                "key": "bullet_damage_vs_player",
                "type": "string",
                "default": "0",
                "desc": "If set to 0, it'll use the Damage Per Bullet value."
            },
            {
                "name": "Firing persistence",
                "key": "persistence",
                "type": "string",
                "default": "1",
                "desc": "(Seconds) How long to keep firing at last known position after lose sight of target"
            },
            {
                "name": "Firing persistence2",
                "key": "persistence2",
                "type": "string",
                "default": "0",
                "desc": "(Seconds) After lost enemy and persistence time has passed, how long to occasionally fire at enemy's last known position"
            },
            {
                "name": "Bullet accuracy",
                "key": "firespread",
                "type": "choices",
                "default": "Perfect Shot (0)",
                "desc": "",
                "choices": {
                    "Perfect Shot": "0",
                    "Small cone": "1",
                    "Medium cone": "2",
                    "Large cone": "3",
                    "Extra-large cone": "4"
                }
            },
            {
                "name": "Minimum target range",
                "key": "minrange",
                "type": "string",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Maximum target range",
                "key": "maxrange",
                "type": "string",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Gun Base Attachment",
                "key": "gun_base_attach",
                "type": "string",
                "default": "",
                "desc": "If Parent is specified, this is the attachment point on the parent to aim from."
            },
            {
                "name": "Gun Barrel Attachment",
                "key": "gun_barrel_attach",
                "type": "string",
                "default": "",
                "desc": "If Parent is specified, this is the attachment point on the parent to fire from. If you specify this, you'll want to specify the Gun Base Attachment too."
            },
            {
                "name": "Gun Yaw Pose Param",
                "key": "gun_yaw_pose_param",
                "type": "string",
                "default": "",
                "desc": "If Parent + the Gun Pitch Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters."
            },
            {
                "name": "Gun Yaw Pose Center",
                "key": "gun_yaw_pose_center",
                "type": "float",
                "default": "0",
                "desc": "The center yaw pose parameter of the gun on the parent"
            },
            {
                "name": "Gun Pitch Pose Param",
                "key": "gun_pitch_pose_param",
                "type": "string",
                "default": "",
                "desc": "If Parent + the Gun Yaw Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters."
            },
            {
                "name": "Gun Pitch Pose Center",
                "key": "gun_pitch_pose_center",
                "type": "float",
                "default": "0",
                "desc": "The center pitch pose parameter of the gun on the parent"
            },
            {
                "name": "Ammunition Count",
                "key": "ammo_count",
                "type": "integer",
                "default": "-1",
                "desc": "Only applies to player use. -1 = unlimited ammo."
            },
            {
                "name": "Lead Target",
                "key": "leadtarget",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "NPC Man Point",
                "key": "npc_man_point",
                "type": "target_destination",
                "default": "",
                "desc": "Point where NPC must stand to man this func_tank."
            },
            {
                "name": "Post-NPC Attack Grace Period",
                "key": "playergraceperiod",
                "type": "float",
                "default": "0",
                "desc": "If specified, NPC's manning this func tank won't fire at the player, after firing at a non-player, for this amount of time."
            },
            {
                "name": "Ignore Grace Upto",
                "key": "ignoregraceupto",
                "type": "float",
                "default": "768",
                "desc": "The player grace period is ignored if the player's under this distance from the func_tank."
            },
            {
                "name": "Player Lock Time",
                "key": "playerlocktimebeforefire",
                "type": "float",
                "default": "0",
                "desc": "The tank must have the player as a target for this amount of time before it's allowed to fire."
            },
            {
                "name": "Automatically search for NPCs",
                "key": "shouldfindnpcs",
                "type": "boolean",
                "default": "No",
                "desc": "If controllable by NPCs, sets whether we should automatically search for NPCs to use this func_tank or just wait for the player to set it. Identical to StartFindingNPCs and StopFindingNPCs."
            },
            {
                "name": "Effect Handling",
                "key": "effecthandling",
                "type": "choices",
                "default": "Use Individual Settings. (0)",
                "desc": "Special effect handling that influences sound and muzzle effects. Individual settings can override parts of it.",
                "choices": {
                    "Use Individual Settings.": "0",
                    "AR2": "1",
                    "Combine Cannon": "2"
                }
            }
        ],
        "inputs": [
            {
                "name": "Activate",
                "type": "void",
                "desc": "Turn the tank on"
            },
            {
                "name": "Deactivate",
                "type": "void",
                "desc": "Turn the tank off (go dormant)"
            },
            {
                "name": "SetFireRate",
                "type": "string",
                "desc": "How fast to fire (0 = don't fire)"
            },
            {
                "name": "SetDamage",
                "type": "string",
                "desc": "Set the Damage Per Bullet"
            },
            {
                "name": "SetTargetPosition",
                "type": "string",
                "desc": "World position that I should aim at"
            },
            {
                "name": "SetTargetDir",
                "type": "vector",
                "desc": "Direction to aim at."
            },
            {
                "name": "SetTargetEntityName",
                "type": "target_destination",
                "desc": "Name of entity I should follow/attack"
            },
            {
                "name": "SetTargetEntity",
                "type": "string",
                "desc": "Set the entity I should follow/attack to the passed in entity."
            },
            {
                "name": "ClearTargetEntity",
                "type": "void",
                "desc": "Clear the entity I should be attacking."
            },
            {
                "name": "FindNPCToManTank",
                "type": "string",
                "desc": "Find a nearby NPC to man this func_tank."
            },
            {
                "name": "StartFindingNPCs",
                "type": "void",
                "desc": "Start searching for NPCs to man this func_tank."
            },
            {
                "name": "StopFindingNPCs",
                "type": "void",
                "desc": "Stop searching for NPCs to man this func_tank."
            },
            {
                "name": "ForceNPCOff",
                "type": "void",
                "desc": "Force the NPC manning this func_tank (if any) to leave."
            },
            {
                "name": "SetMaxRange",
                "type": "float",
                "desc": "Set the max range of the func_tank."
            }
        ],
        "outputs": [
            {
                "name": "OnFire",
                "type": "void",
                "desc": "Fires when the tank fires its bullets"
            },
            {
                "name": "OnAquireTarget",
                "type": "void",
                "desc": "Fires when target is newly in range and can be shot"
            },
            {
                "name": "OnLoseTarget",
                "type": "void",
                "desc": "Fires when when target goes out of range"
            },
            {
                "name": "OnAmmoDepleted",
                "type": "void",
                "desc": "Fires when tank runs out of ammo"
            },
            {
                "name": "OnGotController",
                "type": "void",
                "desc": "Fires when an NPC starts to control this tank. Players do NOT fire this input."
            },
            {
                "name": "OnLostController",
                "type": "void",
                "desc": "Fires when the NPC controller of the tank stops controlling it. Players do NOT fire this input."
            },
            {
                "name": "OnGotPlayerController",
                "type": "void",
                "desc": "Fires when a Player starts to control this tank. NPCs do NOT fire this input."
            },
            {
                "name": "OnLostPlayerController",
                "type": "void",
                "desc": "Fires when the Player controller of the tank stops controlling it. NPCs do NOT fire this input."
            },
            {
                "name": "OnReadyToFire",
                "type": "void",
                "desc": "Fires once when the tank is done waiting to fire between rounds"
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "BreakableProp",
        "desc": "",
        "bases": [
            "_Breakable",
            "DamageFilter"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[16] Break on Touch": {
                        "default": false,
                        "num": 16
                    },
                    "[32] Break on Pressure": {
                        "default": false,
                        "num": 32
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "EnableDamageForces",
                "type": "void",
                "desc": "Damaging the entity applies physics forces to it."
            },
            {
                "name": "DisableDamageForces",
                "type": "void",
                "desc": "Damaging the entity does *not* apply physics forces to it."
            }
        ],
        "outputs": [
            {
                "name": "OnTakeDamage",
                "type": "void",
                "desc": "Fired each time this breakable takes any damage."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "Button",
        "desc": "",
        "bases": [
            "Angles"
        ],
        "keyvalues": [
            {
                "name": "Press Sound",
                "key": "sounds",
                "type": "choices",
                "default": "None (Silent) (0)",
                "desc": "Sound played when pressed. Choose from sounds in the Buttons.snd* category.",
                "choices": {
                    "None (Silent)": "0",
                    "Light Switch": "100",
                    "Power Plug - Basic Electronics (soft)": "101",
                    "Buttons.snd1: Big zap & Warmup": "1",
                    "Buttons.snd2: Access Denied": "2",
                    "Buttons.snd3: Access Granted": "3",
                    "Buttons.snd4: Quick Combolock": "4",
                    "Buttons.snd5: Power Deadbolt 1": "5",
                    "Buttons.snd6: Power Deadbolt 2": "6",
                    "Buttons.snd7: Plunger": "7",
                    "Buttons.snd8: Small zap": "8",
                    "Buttons.snd9: Keycard Sound": "9",
                    "Buttons.snd10: Buzz": "10",
                    "Buttons.snd11: Buzz Off": "11",
                    "Buttons.snd12: Latch locked": "12",
                    "Buttons.snd13: Latch Unlocked": "13",
                    "Buttons.snd14: Lightswitch": "14",
                    "Buttons.snd15: Small bleek": "15",
                    "Buttons.snd16: Small deny": "16",
                    "Buttons.snd17: Small doop": "17",
                    "Buttons.snd18: Small tech deny": "18",
                    "Buttons.snd19: Click and combine screen fuzz": "19",
                    "Buttons.snd20: Roomy beep": "20",
                    "Buttons.snd21: Lever or Wheel: turn + move sqeek": "21",
                    "Buttons.snd22: Lever or Wheel: latch + release gas": "22",
                    "Buttons.snd23: Lever or Wheel: ratchet + sqeek": "23",
                    "Buttons.snd24: Lever or Wheel: large ratchet": "24",
                    "Buttons.snd25: Lever or Wheel: clanky + gas release": "25",
                    "Buttons.snd26: Lever or Wheel: latch + large metal thud": "26",
                    "Buttons.snd27: Lever or Wheel: smaller ratchet": "27",
                    "Buttons.snd28: Lever or Wheel: smaller lever move": "28",
                    "Buttons.snd31: Shock buzz (missing)": "31",
                    "Buttons.snd32: Clickbeep (missing)": "32",
                    "Buttons.snd33: Tech blip (missing)": "33",
                    "Buttons.snd34: Clickbeepbeep open": "34",
                    "Buttons.snd35: Small high blip": "35",
                    "Buttons.snd36: Small tech fuzz blip": "36",
                    "Buttons.snd37: Small click bleep (change to lightswitch)": "37",
                    "Buttons.snd40: Combine door lock - locked": "40",
                    "Buttons.snd41: Combine blip growl": "41",
                    "Buttons.snd42: Combine squick growl": "42",
                    "Buttons.snd43: Combine whine purr": "43",
                    "Buttons.snd44: Combine click talk": "44",
                    "Buttons.snd45: Combine click growl fizz": "45",
                    "Buttons.snd46: Combine click fizz (deny)": "46",
                    "Buttons.snd47: Combine click talker": "47"
                }
            },
            {
                "name": "Locked Sound",
                "key": "locked_sound",
                "type": "choices",
                "default": "None (Silent) (0)",
                "desc": "Sound played when the player tries to use the button, and fails because it's locked. These are sounds in the Buttons.snd* category.",
                "choices": {
                    "None (Silent)": "0",
                    "Light Switch": "100",
                    "Power Plug - Basic Electronics (soft)": "101",
                    "Buttons.snd1: Big zap & Warmup": "1",
                    "Buttons.snd2: Access Denied": "2",
                    "Buttons.snd3: Access Granted": "3",
                    "Buttons.snd4: Quick Combolock": "4",
                    "Buttons.snd5: Power Deadbolt 1": "5",
                    "Buttons.snd6: Power Deadbolt 2": "6",
                    "Buttons.snd7: Plunger": "7",
                    "Buttons.snd8: Small zap": "8",
                    "Buttons.snd9: Keycard Sound": "9",
                    "Buttons.snd10: Buzz": "10",
                    "Buttons.snd11: Buzz Off": "11",
                    "Buttons.snd12: Latch locked": "12",
                    "Buttons.snd13: Latch Unlocked": "13",
                    "Buttons.snd14: Lightswitch": "14",
                    "Buttons.snd15: Small bleek": "15",
                    "Buttons.snd16: Small deny": "16",
                    "Buttons.snd17: Small doop": "17",
                    "Buttons.snd18: Small tech deny": "18",
                    "Buttons.snd19: Click and combine screen fuzz": "19",
                    "Buttons.snd20: Roomy beep": "20",
                    "Buttons.snd21: Lever or Wheel: turn + move sqeek": "21",
                    "Buttons.snd22: Lever or Wheel: latch + release gas": "22",
                    "Buttons.snd23: Lever or Wheel: ratchet + sqeek": "23",
                    "Buttons.snd24: Lever or Wheel: large ratchet": "24",
                    "Buttons.snd25: Lever or Wheel: clanky + gas release": "25",
                    "Buttons.snd26: Lever or Wheel: latch + large metal thud": "26",
                    "Buttons.snd27: Lever or Wheel: smaller ratchet": "27",
                    "Buttons.snd28: Lever or Wheel: smaller lever move": "28",
                    "Buttons.snd31: Shock buzz (missing)": "31",
                    "Buttons.snd32: Clickbeep (missing)": "32",
                    "Buttons.snd33: Tech blip (missing)": "33",
                    "Buttons.snd34: Clickbeepbeep open": "34",
                    "Buttons.snd35: Small high blip": "35",
                    "Buttons.snd36: Small tech fuzz blip": "36",
                    "Buttons.snd37: Small click bleep (change to lightswitch)": "37",
                    "Buttons.snd40: Combine door lock - locked": "40",
                    "Buttons.snd41: Combine blip growl": "41",
                    "Buttons.snd42: Combine squick growl": "42",
                    "Buttons.snd43: Combine whine purr": "43",
                    "Buttons.snd44: Combine click talk": "44",
                    "Buttons.snd45: Combine click growl fizz": "45",
                    "Buttons.snd46: Combine click fizz (deny)": "46",
                    "Buttons.snd47: Combine click talker": "47"
                }
            },
            {
                "name": "Unlocked Sound",
                "key": "unlocked_sound",
                "type": "choices",
                "default": "None (Silent) (0)",
                "desc": "Sound played when the button is unlocked. These are sounds in the Buttons.snd* category.",
                "choices": {
                    "None (Silent)": "0",
                    "Light Switch": "100",
                    "Power Plug - Basic Electronics (soft)": "101",
                    "Buttons.snd1: Big zap & Warmup": "1",
                    "Buttons.snd2: Access Denied": "2",
                    "Buttons.snd3: Access Granted": "3",
                    "Buttons.snd4: Quick Combolock": "4",
                    "Buttons.snd5: Power Deadbolt 1": "5",
                    "Buttons.snd6: Power Deadbolt 2": "6",
                    "Buttons.snd7: Plunger": "7",
                    "Buttons.snd8: Small zap": "8",
                    "Buttons.snd9: Keycard Sound": "9",
                    "Buttons.snd10: Buzz": "10",
                    "Buttons.snd11: Buzz Off": "11",
                    "Buttons.snd12: Latch locked": "12",
                    "Buttons.snd13: Latch Unlocked": "13",
                    "Buttons.snd14: Lightswitch": "14",
                    "Buttons.snd15: Small bleek": "15",
                    "Buttons.snd16: Small deny": "16",
                    "Buttons.snd17: Small doop": "17",
                    "Buttons.snd18: Small tech deny": "18",
                    "Buttons.snd19: Click and combine screen fuzz": "19",
                    "Buttons.snd20: Roomy beep": "20",
                    "Buttons.snd21: Lever or Wheel: turn + move sqeek": "21",
                    "Buttons.snd22: Lever or Wheel: latch + release gas": "22",
                    "Buttons.snd23: Lever or Wheel: ratchet + sqeek": "23",
                    "Buttons.snd24: Lever or Wheel: large ratchet": "24",
                    "Buttons.snd25: Lever or Wheel: clanky + gas release": "25",
                    "Buttons.snd26: Lever or Wheel: latch + large metal thud": "26",
                    "Buttons.snd27: Lever or Wheel: smaller ratchet": "27",
                    "Buttons.snd28: Lever or Wheel: smaller lever move": "28",
                    "Buttons.snd31: Shock buzz (missing)": "31",
                    "Buttons.snd32: Clickbeep (missing)": "32",
                    "Buttons.snd33: Tech blip (missing)": "33",
                    "Buttons.snd34: Clickbeepbeep open": "34",
                    "Buttons.snd35: Small high blip": "35",
                    "Buttons.snd36: Small tech fuzz blip": "36",
                    "Buttons.snd37: Small click bleep (change to lightswitch)": "37",
                    "Buttons.snd40: Combine door lock - locked": "40",
                    "Buttons.snd41: Combine blip growl": "41",
                    "Buttons.snd42: Combine squick growl": "42",
                    "Buttons.snd43: Combine whine purr": "43",
                    "Buttons.snd44: Combine click talk": "44",
                    "Buttons.snd45: Combine click growl fizz": "45",
                    "Buttons.snd46: Combine click fizz (deny)": "46",
                    "Buttons.snd47: Combine click talker": "47"
                }
            },
            {
                "name": "Locked Sentence",
                "key": "locked_sentence",
                "type": "choices",
                "default": "None (0)",
                "desc": "A sentence played when the player tries to use the button, and fails because it's locked.",
                "choices": {
                    "None": "0",
                    "[NA] Gen. Access Denied": "1",
                    "[ND] Security Lockout": "2",
                    "[NF] Blast Door": "3",
                    "[NFIRE] Fire Door": "4",
                    "[NCHEM] Chemical Door": "5",
                    "[NRAD] Radiation Door": "6",
                    "[NCON] Gen. Containment": "7",
                    "[NH] Maintenance Door": "8",
                    "[NG] Broken Shut Door": "9"
                }
            },
            {
                "name": "Unlocked Sentence",
                "key": "unlocked_sentence",
                "type": "choices",
                "default": "None (0)",
                "desc": "A sentence played when the button is unlocked.",
                "choices": {
                    "None": "0",
                    "[EA] Gen. Access Granted": "1",
                    "[ED] Security Disengaged": "2",
                    "[EF] Blast Door": "3",
                    "[EFIRE] Fire Door": "4",
                    "[ECHEM] Chemical Door": "5",
                    "[ERAD] Radiation Door": "6",
                    "[ECON] gen. Containment": "7",
                    "[EH] Maintenance area": "8"
                }
            }
        ],
        "inputs": [
            {
                "name": "Lock",
                "type": "void",
                "desc": "Lock the button, preventing it from functioning."
            },
            {
                "name": "Unlock",
                "type": "void",
                "desc": "Unlock the button, allowing it to function."
            },
            {
                "name": "Press",
                "type": "void",
                "desc": "Activate the button as if it was pressed."
            },
            {
                "name": "PressIn",
                "type": "void",
                "desc": "Activate the button as if it was pressed, sending it to the bottom position."
            },
            {
                "name": "PressOut",
                "type": "void",
                "desc": "Unpress the button, sending it to the top position."
            }
        ],
        "outputs": [
            {
                "name": "OnDamaged",
                "type": "void",
                "desc": "Fired when the button is damaged."
            },
            {
                "name": "OnPressed",
                "type": "void",
                "desc": "Fired when the button is pressed."
            },
            {
                "name": "OnUseLocked",
                "type": "void",
                "desc": "Fired when the button is used while locked."
            },
            {
                "name": "OnIn",
                "type": "void",
                "desc": "Fired when the button reaches the in/pressed position."
            },
            {
                "name": "OnOut",
                "type": "void",
                "desc": "Fired when the button reaches the out/released position."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "CombineBallSpawners",
        "desc": "",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[4096] Start inactive": {
                        "default": true,
                        "num": 4096
                    },
                    "[8192] Combine power supply": {
                        "default": false,
                        "num": 8192
                    }
                }
            },
            {
                "name": "Ball count",
                "key": "ballcount",
                "type": "integer",
                "default": "3",
                "desc": "This is how many balls will be bouncing around inside the spawner"
            },
            {
                "name": "Min ball speed",
                "key": "minspeed",
                "type": "float",
                "default": "300.0",
                "desc": "The minimum speed of balls that fly in the spawner"
            },
            {
                "name": "Max ball speed",
                "key": "maxspeed",
                "type": "float",
                "default": "600.0",
                "desc": "The maximum speed of balls that fly in the spawner"
            },
            {
                "name": "Ball radius",
                "key": "ballradius",
                "type": "float",
                "default": "20.0",
                "desc": "The radius of the energy balls."
            },
            {
                "name": "Ball Type",
                "key": "balltype",
                "type": "choices",
                "default": "Combine Energy Ball 1 (0)",
                "desc": "",
                "choices": {
                    "Combine Energy Ball 1": "0",
                    "Combine Energy Ball 2": "1",
                    "Combine Energy Ball 3": "2"
                }
            },
            {
                "name": "Ball Respawn Time",
                "key": "ballrespawntime",
                "type": "float",
                "default": "4.0",
                "desc": "The energy balls respawn time"
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable spawning of combine balls"
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable spawning of combine balls"
            }
        ],
        "outputs": [
            {
                "name": "OnBallGrabbed",
                "type": "void",
                "desc": "Fired when a combine ball is grabbed from the field by a mega physcannon"
            },
            {
                "name": "OnBallReinserted",
                "type": "void",
                "desc": "Fired when a combine ball is reinserted into the field (only gets triggered when Combine Power supply is checked)"
            },
            {
                "name": "OnBallHitTopSide",
                "type": "void",
                "desc": "Fired when a combine ball in hits the top side of the field (only gets triggered when Combine Power supply is checked)"
            },
            {
                "name": "OnBallHitBottomSide",
                "type": "void",
                "desc": "Fired when a combine ball in hits the bottom side of the field (only gets triggered when Combine Power supply is checked)"
            },
            {
                "name": "OnLastBallGrabbed",
                "type": "void",
                "desc": "Fired when the last combine ball is grabbed from the field by a mega physcannon"
            },
            {
                "name": "OnFirstBallReinserted",
                "type": "void",
                "desc": "Fired when the first combine ball is reinserted into the field (only gets triggered when Combine Power supply is checked)"
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "FollowGoal",
        "desc": "",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Actor(s) to affect",
                "key": "actor",
                "type": "target_name_or_class",
                "default": "",
                "desc": ""
            },
            {
                "name": "Target Entity",
                "key": "goal",
                "type": "string",
                "default": "",
                "desc": "The name of the entity to follow. If blank, and the actor likes the player, then defaults to player"
            },
            {
                "name": "Search Type",
                "key": "searchtype",
                "type": "choices",
                "default": "Entity Name (0)",
                "desc": "How to search for the entities using the targetname.",
                "choices": {
                    "Entity Name": "0",
                    "Classname": "1"
                }
            },
            {
                "name": "Start Active",
                "key": "startactive",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Maximum state",
                "key": "maximumstate",
                "type": "choices",
                "default": "Idle (1)",
                "desc": "",
                "choices": {
                    "Idle": "1",
                    "Alert": "2",
                    "Combat": "3"
                }
            },
            {
                "name": "Formation",
                "key": "formation",
                "type": "choices",
                "default": "Close circle (0)",
                "desc": "",
                "choices": {
                    "Close circle": "0",
                    "Wide circle": "1",
                    "Antlion": "2",
                    "Commander": "3",
                    "Tight circle": "4",
                    "Medium circle": "5",
                    "Sidekick": "6",
                    "Hunter": "7",
                    "Vortigaunt": "8"
                }
            }
        ],
        "inputs": [
            {
                "name": "Activate",
                "type": "void",
                "desc": "Begin the follow behavior"
            },
            {
                "name": "Deactivate",
                "type": "void",
                "desc": "Cease the follow behavior"
            },
            {
                "name": "UpdateActors",
                "type": "void",
                "desc": "Forces an update on this goal's actors."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "ForceController",
        "desc": "",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start On": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Apply Force": {
                        "default": true,
                        "num": 2
                    },
                    "[4] Apply Torque": {
                        "default": true,
                        "num": 4
                    },
                    "[8] Orient Locally": {
                        "default": true,
                        "num": 8
                    },
                    "[16] Ignore Mass": {
                        "default": false,
                        "num": 16
                    }
                }
            },
            {
                "name": "Attached Object",
                "key": "attach1",
                "type": "target_destination",
                "default": "",
                "desc": "Object to apply the force to."
            },
            {
                "name": "Time of Force (0=inf)",
                "key": "forcetime",
                "type": "float",
                "default": "0",
                "desc": "Automatic shut-off after this time has passed (0 = stay on forever or until deactivated)"
            }
        ],
        "inputs": [
            {
                "name": "Activate",
                "type": "void",
                "desc": "Turn the force on"
            },
            {
                "name": "Deactivate",
                "type": "void",
                "desc": "Turn the force off"
            },
            {
                "name": "Scale",
                "type": "string",
                "desc": "Set Force Scale"
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "HintNode",
        "desc": "",
        "bases": [
            "Node"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[65536] Allow jump up": {
                        "default": false,
                        "num": 65536
                    }
                }
            },
            {
                "name": "Hint",
                "key": "hinttype",
                "type": "choices",
                "default": "None (0)",
                "desc": "",
                "choices": {
                    "None": "0",
                    "World: Door (Not Used)": "1",
                    "World: Window": "2",
                    "World: Act Busy Hint": "12",
                    "World: Visually Interesting": "13",
                    "World: Visually Interesting (Don't aim at)": "14",
                    "World: Inhibit Combine Mines within 15 feet": "15",
                    "World: Visually Interesting (Stealth mode)": "16",
                    "Tactical: Crouch Cover Medium": "100",
                    "Tactical: Crouch Cover Low": "101",
                    "Tactical: Spawn (Not Used)": "102",
                    "Tactical: Entrance / Exit Pinch": "103",
                    "Tactical: Guard (Not Used)": "104",
                    "Tactical: Enemy Disadvantage Point": "105",
                    "Tactical: Health Kit (Not Used)": "106",
                    "Tactical: High Ground": "107",
                    "Antlion: Burrow Point": "400",
                    "Antlion: Thumper Flee Point": "401",
                    "Headcrab: Burrow Point": "450",
                    "Headcrab: Exit Pod Point": "451",
                    "Roller: Patrol Point": "500",
                    "Roller: Cleanup Spot": "501",
                    "Crow: Fly to point": "700",
                    "Crow: Perch point": "701",
                    "Follower: Wait point": "900",
                    "Override jump permission": "901",
                    "Player squad transition point": "902",
                    "NPC exit point": "903",
                    "Strider node": "904",
                    "Player Ally: Push away destination": "950",
                    "PLayer Ally: Fear withdrawal destination": "951",
                    "HL1 World: Machinery": "1000",
                    "HL1 World: Blinking Light": "1001",
                    "HL1 World: Human Blood": "1002",
                    "HL1 World: Alien Blood": "1003",
                    "Portal 2: Nest": "1200"
                }
            },
            {
                "name": "Hint Activity",
                "key": "hintactivity",
                "type": "string",
                "default": "",
                "desc": "Activity associated with this hint node. Various parts of the NPC AI play this activity at times. i.e. Actbusy nodes will play this activity when an NPC acts busy on the node."
            },
            {
                "name": "Node FOV",
                "key": "nodefov",
                "type": "choices",
                "default": "180 Degrees (180)",
                "desc": "Imagine this node requires that an NPC be in the node's field of view in order to use this hint.",
                "choices": {
                    "45 Degrees": "45",
                    "90 Degrees": "90",
                    "180 Degrees": "180",
                    "360 Degrees": "360"
                }
            },
            {
                "name": "Start Hint Disabled",
                "key": "starthintdisabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Hint Group",
                "key": "group",
                "type": "string",
                "default": "",
                "desc": "If specified, gives the hint a specific group name.  Useful for hint nodes that need to be logically grouped together. NPCs may also refuse to use hint nodes that don't match their hint group."
            },
            {
                "name": "Target node",
                "key": "targetnode",
                "type": "node_dest",
                "default": "-1",
                "desc": "The node ID of an associated target node, if any."
            },
            {
                "name": "Ignore Facing",
                "key": "ignorefacing",
                "type": "choices",
                "default": "Default (2)",
                "desc": "Don't pay attention to the facing of the node. May not apply to a given hint type.",
                "choices": {
                    "No": "0",
                    "Yes": "1",
                    "Default": "2"
                }
            },
            {
                "name": "Minimum State",
                "key": "minimumstate",
                "type": "choices",
                "default": "Idle (1)",
                "desc": "Require an NPC have a minimum state to use the hint.",
                "choices": {
                    "Idle": "1",
                    "Alert": "2",
                    "Combat": "3"
                }
            },
            {
                "name": "Maximum State",
                "key": "maximumstate",
                "type": "choices",
                "default": "Combat (3)",
                "desc": "Require an NPC have a maximum state to use the hint.",
                "choices": {
                    "Idle": "1",
                    "Alert": "2",
                    "Combat": "3"
                }
            },
            {
                "name": "Radius",
                "key": "radius",
                "type": "integer",
                "default": "0",
                "desc": "How close an NPC must be to consider this hint. 0 means infinite."
            }
        ],
        "inputs": [
            {
                "name": "EnableHint",
                "type": "void",
                "desc": "Enable hint."
            },
            {
                "name": "DisableHint",
                "type": "void",
                "desc": "Disable hint."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "LeadGoalBase",
        "desc": "",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Actor(s) to affect",
                "key": "actor",
                "type": "target_name_or_class",
                "default": "",
                "desc": ""
            },
            {
                "name": "Target Entity",
                "key": "goal",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Point to wait at if the target's not visible",
                "key": "waitpointname",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Wait until player gets this close",
                "key": "waitdistance",
                "type": "float",
                "default": "",
                "desc": ""
            },
            {
                "name": "Lead Distance",
                "key": "leaddistance",
                "type": "float",
                "default": "64",
                "desc": "The player is considered to be lagging if they are beyond this distance. The Actor will consider retrieving when the player is 4x 'Lead Distance' away."
            },
            {
                "name": "Retrieve Distance",
                "key": "retrievedistance",
                "type": "float",
                "default": "96",
                "desc": "The distance from the player that the NPC should return to when retrieving a lagging player. Must be between ('Lead Distance' + 24) and ('Lead Distance' * 4) to avoid the leader ping-ponging."
            },
            {
                "name": "Success Distance",
                "key": "successdistance",
                "type": "float",
                "default": "0",
                "desc": "The distance from the player (to the NPC) that the player must be within for the Lead to succeed, once the NPC has reached the goal. If set to 0, it'll use the lead distance instead (for legacy support)."
            },
            {
                "name": "Run instead of Walk",
                "key": "run",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Retrieve player?",
                "key": "retrieve",
                "type": "choices",
                "default": "Yes, move to retrieve (1)",
                "desc": "",
                "choices": {
                    "No, just idle and wait": "0",
                    "Yes, move to retrieve": "1"
                }
            },
            {
                "name": "Before Coming Back, Wait for speech?",
                "key": "comingbackwaitforspeak",
                "type": "choices",
                "default": "Yes, wait for speech to finish (1)",
                "desc": "",
                "choices": {
                    "No, come back while speaking": "0",
                    "Yes, wait for speech to finish": "1"
                }
            },
            {
                "name": "On Retrieve, Wait for speech?",
                "key": "retrievewaitforspeak",
                "type": "choices",
                "default": "Yes, wait for speech to finish (1)",
                "desc": "",
                "choices": {
                    "No, start leading while speaking": "0",
                    "Yes, wait for speech to finish": "1"
                }
            },
            {
                "name": "Speak start greeting?",
                "key": "dontspeakstart",
                "type": "choices",
                "default": "Yes, speak the start greeting (0)",
                "desc": "",
                "choices": {
                    "Yes, speak the start greeting": "0",
                    "No, don't speak the greeting": "1"
                }
            },
            {
                "name": "Lead during combat?",
                "key": "leadduringcombat",
                "type": "choices",
                "default": "No. Stop to fight, resume leading when safe. (0)",
                "desc": "",
                "choices": {
                    "No. Stop to fight, resume leading when safe.": "0",
                    "Yes, lead while fighting.": "1"
                }
            },
            {
                "name": "Gag Leader?",
                "key": "gagleader",
                "type": "choices",
                "default": "No. Speak lead concepts normally, respecting other lead speech settings. (0)",
                "desc": "",
                "choices": {
                    "No. Speak lead concepts normally, respecting other lead speech settings.": "0",
                    "Yes, don't speak any lead concepts at all, overriding all other lead speech settings.": "1"
                }
            },
            {
                "name": "Attract player concept modifier",
                "key": "attractplayerconceptmodifier",
                "type": "string",
                "default": "",
                "desc": "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_ATTRACTPLAYER' concept is spoken."
            },
            {
                "name": "Player wait over concept modifier",
                "key": "waitoverconceptmodifier",
                "type": "string",
                "default": "",
                "desc": "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_WAITOVER' concept is spoken."
            },
            {
                "name": "Arrival concept modifier",
                "key": "arrivalconceptmodifier",
                "type": "string",
                "default": "",
                "desc": "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_ARRIVAL' concept is spoken."
            },
            {
                "name": "Post-arrival concepts modifier",
                "key": "postarrivalconceptmodifier",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Success concept modifier",
                "key": "successconceptmodifier",
                "type": "string",
                "default": "",
                "desc": "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_SUCCESS' concept is spoken."
            },
            {
                "name": "Failure concept modifier",
                "key": "failureconceptmodifier",
                "type": "string",
                "default": "",
                "desc": "Appended to the keyvalues passed into the response rules when the 'lead_fail' concept is spoken."
            },
            {
                "name": "Coming Back concept modifier",
                "key": "comingbackconceptmodifier",
                "type": "string",
                "default": "",
                "desc": "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_RETRIEVE' concept is spoken. Spoken as the NPC starts returning to the player to retrieve them."
            },
            {
                "name": "Retrieve concept modifier",
                "key": "retrieveconceptmodifier",
                "type": "string",
                "default": "",
                "desc": "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_COMINGBACK' concept is spoken. Spoken when NPC has finally reached the player to retrieve them."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] No def success": {
                        "default": false,
                        "num": 1
                    },
                    "[2] No def failure": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Use goal facing": {
                        "default": true,
                        "num": 4
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Activate",
                "type": "void",
                "desc": "Begin the leading behavior"
            },
            {
                "name": "Deactivate",
                "type": "void",
                "desc": "Stop the leading behavior"
            },
            {
                "name": "SetSuccess",
                "type": "void",
                "desc": "Notify success of leading"
            },
            {
                "name": "SetFailure",
                "type": "void",
                "desc": "Notify failure of leading"
            }
        ],
        "outputs": [
            {
                "name": "OnArrival",
                "type": "void",
                "desc": "Fires when NPC reaches the lead point"
            },
            {
                "name": "OnArrivalDone",
                "type": "void",
                "desc": "Fires when NPC has played out any arrival speech"
            },
            {
                "name": "OnSuccess",
                "type": "void",
                "desc": "Fires when NPC achieves the goal"
            },
            {
                "name": "OnFailure",
                "type": "void",
                "desc": "Fires when NPC fails to achieves the goal"
            },
            {
                "name": "OnDone",
                "type": "void",
                "desc": "Fires when NPC completes behavior (any post-success or fail acting is complete)"
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "RopeKeyFrame",
        "desc": "",
        "bases": [
            "SystemLevelChoice"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Auto Resize": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Next Rope",
                "key": "nextkey",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the next rope along this path."
            },
            {
                "name": "Slack",
                "key": "slack",
                "type": "integer",
                "default": "25",
                "desc": "How much extra length the rope has (by default it has the length between its two endpoints in the editor)."
            },
            {
                "name": "Type",
                "key": "type",
                "type": "choices",
                "default": "Rope (0)",
                "desc": "",
                "choices": {
                    "Rope": "0",
                    "Semi-rigid": "1",
                    "Rigid": "2"
                }
            },
            {
                "name": "Subdivision",
                "key": "subdiv",
                "type": "integer",
                "default": "2",
                "desc": "Number of subdivisions between each rope segment. Maximum value is 8. Higher values make smoother ropes, but are slower to render."
            },
            {
                "name": "Barbed",
                "key": "barbed",
                "type": "boolean",
                "default": "No",
                "desc": "Test effect that makes the rope look sharper and more barbed."
            },
            {
                "name": "Width (1-64)",
                "key": "width",
                "type": "float",
                "default": "2",
                "desc": "Width of the rope."
            },
            {
                "name": "Texture Scale",
                "key": "texturescale",
                "type": "float",
                "default": "1",
                "desc": "This changes the texture resolution. The default resolution is 4 pixels per unit. Larger values stretch the texture and smaller values scrunch it up."
            },
            {
                "name": "Collide with world",
                "key": "collide",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Start Dangling",
                "key": "dangling",
                "type": "choices",
                "default": "Start Attached (0)",
                "desc": "When set to Yes, the rope starts out detached from its target endpoint.",
                "choices": {
                    "Start Attached": "0",
                    "Start Dangling": "1"
                }
            },
            {
                "name": "Breakable",
                "key": "breakable",
                "type": "choices",
                "default": "Indestructible (0)",
                "desc": "When set to yes, the rope can be detached from either endpoint when shot.",
                "choices": {
                    "Indestructible": "0",
                    "Breakable": "1"
                }
            },
            {
                "name": "Rope Material",
                "key": "ropematerial",
                "type": "material",
                "default": "cable/cable.vmt",
                "desc": "The material to use when rendering the rope."
            },
            {
                "name": "Wind",
                "key": "usewind",
                "type": "choices",
                "default": "Ignore Wind (0)",
                "desc": "Is the rope affected by wind?",
                "choices": {
                    "Ignore Wind": "0",
                    "Affected by Wind": "1"
                }
            },
            {
                "name": "Speed (unused)",
                "key": "movespeed",
                "type": "integer",
                "default": "64",
                "desc": ""
            },
            {
                "name": "Position Interpolator",
                "key": "positioninterpolator",
                "type": "integer",
                "default": "2",
                "desc": "Curve Type. Currently only Rope is fully supported."
            }
        ],
        "inputs": [
            {
                "name": "SetScrollSpeed",
                "type": "float",
                "desc": "Set the speed at which the texture scrolls."
            },
            {
                "name": "SetForce",
                "type": "vector",
                "desc": "Apply a force instantaneously to the rope. The parameter should be a vector containing the force to be applied (X Y Z)."
            },
            {
                "name": "Break",
                "type": "void",
                "desc": "Break the rope, if it's marked to do so."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "SetModel",
        "desc": "",
        "bases": [
            "SetSkin"
        ],
        "keyvalues": [
            {
                "name": "World Model",
                "key": "model",
                "type": "studio",
                "default": "",
                "desc": "The model to use for this entity."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "TriggerOnce",
        "desc": "",
        "bases": [
            "BaseEntityBrush"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Clients/Players": {
                        "default": true,
                        "num": 1
                    },
                    "[2] NPCs": {
                        "default": false,
                        "num": 2
                    },
                    "[4] func_pushable": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Physics Objects": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Only player ally NPCs": {
                        "default": false,
                        "num": 16
                    },
                    "[64] Everything (not including physics debris)": {
                        "default": false,
                        "num": 64
                    },
                    "[1024] Physics debris": {
                        "default": false,
                        "num": 1024
                    },
                    "[4096] Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physobjs (car, blob...)": {
                        "default": true,
                        "num": 4096
                    }
                }
            },
            {
                "name": "Start Disabled?",
                "key": "startdisabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Filter Name",
                "key": "filtername",
                "type": "filterclass",
                "default": "",
                "desc": "A filter entity to test potential activators against."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable this trigger."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable this trigger, some trigger entities may also fire OnEndTouch when disabled."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggles this trigger between enabled and disabled states."
            },
            {
                "name": "TouchTest",
                "type": "void",
                "desc": "Triggers either the OnTouching or OnNotTouching outputs for whether anything is touching this entity."
            },
            {
                "name": "StartTouch",
                "type": "void",
                "desc": "Fires the OnStartTouch output. If called by an entity inside the trigger, the OnStartTouch will be fired for them as the activator. Note that this input is passed even if the player is being treated as 'not' touching the trigger while inside it."
            }
        ],
        "outputs": [
            {
                "name": "OnTrigger",
                "type": "void",
                "desc": "Fired whenever the trigger is activated."
            },
            {
                "name": "OnStartTouch",
                "type": "void",
                "desc": "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
            },
            {
                "name": "OnTouching",
                "type": "void",
                "desc": "Fired when the TouchTest input is called, and an entity is touching this. Does not call activators."
            },
            {
                "name": "OnNotTouching",
                "type": "void",
                "desc": "Fired when the TouchTest input is called, and no entity is touching this. Does not call activators."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "TwoObjectPhysics",
        "desc": "",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] No Collision until break": {
                        "default": false,
                        "num": 1
                    },
                    "[4] Start inactive": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Change mass to keep stable attachment to world": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Do not connect entities until turned on": {
                        "default": false,
                        "num": 16
                    }
                }
            },
            {
                "name": "Entity 1 (Yellow)",
                "key": "attach1",
                "type": "target_destination",
                "default": "",
                "desc": "The first entity to constrain. If blank the second entity will be constrained to the World."
            },
            {
                "name": "Entity 2 (Blue)",
                "key": "attach2",
                "type": "target_destination",
                "default": "",
                "desc": "The second entity to constrain. If blank the first entity will be constrained to the World."
            },
            {
                "name": "Constraint System Manager",
                "key": "constraintsystem",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a phys_constraintsystem that this constraint should be a part of. All constraints on a set of entities should be placed in the same system, or they will fight each other during simulation."
            },
            {
                "name": "Force Limit to Break (lbs)",
                "key": "forcelimit",
                "type": "float",
                "default": "0",
                "desc": "The amount of force an impact must apply to the constraint to break it. A way of calculating this is to set it to the mass of an object that would break this constraint if it were resting on the constrainted objects."
            },
            {
                "name": "Torque Limit to Break (lbs * distance)",
                "key": "torquelimit",
                "type": "float",
                "default": "0",
                "desc": "The amount of torque required to break the constraint. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint."
            },
            {
                "name": "Play Sound on Break",
                "key": "breaksound",
                "type": "sound",
                "default": "",
                "desc": "A sound played when the constraint is broken."
            },
            {
                "name": "Follow teleport distance",
                "key": "teleportfollowdistance",
                "type": "float",
                "default": "0",
                "desc": "If one object teleports more than this many units away it will cause the other constrained object to teleport to an appropriate relative position."
            }
        ],
        "inputs": [
            {
                "name": "Break",
                "type": "void",
                "desc": "Force the constraint to break."
            },
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Enable the constraint.  Do this when the objects don't exist when the constraint spawns - or when you have deactivated the constraint.  Broken constraints can NOT be turned on.  They have been deleted."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Disable this constraint."
            }
        ],
        "outputs": [
            {
                "name": "OnBreak",
                "type": "void",
                "desc": "Fired when the constraint breaks."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "Weapon",
        "desc": "",
        "bases": [
            "BaseEntityPoint",
            "BaseFadeProp"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start constrained": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Deny player pickup (reserve for NPC)": {
                        "default": false,
                        "num": 2
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnPlayerUse",
                "type": "void",
                "desc": "Fires when the player +uses this weapon."
            },
            {
                "name": "OnPlayerPickup",
                "type": "void",
                "desc": "Fires when the player picks up this weapon."
            },
            {
                "name": "OnNPCPickup",
                "type": "void",
                "desc": "Fires when an NPC picks up this weapon."
            },
            {
                "name": "OnCacheInteraction",
                "type": "void",
                "desc": "Fires when the player 'proves' they've found this weapon. Fires on: Player Touch and +USE pickup."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "ai_battle_line",
        "desc": "Battle line",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Use parent's orientation": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Actor(s) or squad to affect",
                "key": "actor",
                "type": "target_name_or_class",
                "default": "",
                "desc": ""
            },
            {
                "name": "Active",
                "key": "active",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Strict",
                "key": "strict",
                "type": "boolean",
                "default": "No",
                "desc": "Player orders can override, applies to allies only"
            }
        ],
        "inputs": [
            {
                "name": "Activate",
                "type": "void",
                "desc": ""
            },
            {
                "name": "Deactivate",
                "type": "void",
                "desc": ""
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "ai_changehintgroup",
        "desc": "Change Hint Group",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Search Type",
                "key": "searchtype",
                "type": "choices",
                "default": "Entity Name (0)",
                "desc": "How to search for the entities to change.",
                "choices": {
                    "Entity Name": "0",
                    "Classname": "1",
                    "Old Hint Group": "2"
                }
            },
            {
                "name": "Name to search for",
                "key": "searchname",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "New Hint Group",
                "key": "newhintgroup",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Search Radius",
                "key": "radius",
                "type": "string",
                "default": "0.0",
                "desc": "Radius to search (0 for all of map)"
            },
            {
                "name": "Hint Limit Nav",
                "key": "hintlimiting",
                "type": "boolean",
                "default": "No",
                "desc": "Limits NPC to using specified hint group for navigation requests, does not limit local navigation."
            }
        ],
        "inputs": [
            {
                "name": "Kill",
                "type": "void",
                "desc": "Removes this entity from the world"
            },
            {
                "name": "Activate",
                "type": "void",
                "desc": "Change the Hint Group"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "ai_changetarget",
        "desc": "Changes the target keyvalue of an entity.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Target entity",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Name of entity whose target will be changed."
            },
            {
                "name": "New Target",
                "key": "m_isznewtarget",
                "type": "string",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "Kill",
                "type": "void",
                "desc": "Removes this entity from the world"
            },
            {
                "name": "Activate",
                "type": "void",
                "desc": "Changes the entities target"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "ai_goal_assault",
        "desc": "AI Goal Assault",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Actor(s) to affect",
                "key": "actor",
                "type": "target_name_or_class",
                "default": "",
                "desc": "NPC's that should perform this assault"
            },
            {
                "name": "Rally Point Set",
                "key": "rallypoint",
                "type": "target_destination",
                "default": "",
                "desc": "Root name of rally points for this assault. Use an asterisk '*' after the root name to match all with the same root."
            },
            {
                "name": "Search Type",
                "key": "searchtype",
                "type": "choices",
                "default": "Entity Name (0)",
                "desc": "How to search for the entities using the targetname.",
                "choices": {
                    "Entity Name": "0",
                    "Classname": "1"
                }
            },
            {
                "name": "Start Active",
                "key": "startactive",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Assault Cue",
                "key": "assaultcue",
                "type": "choices",
                "default": "Entity System Input (1)",
                "desc": "",
                "choices": {
                    "Entity System Input": "1",
                    "Gunfire": "2",
                    "Don't wait for a cue.": "3"
                }
            },
            {
                "name": "Rally Point Selection Method",
                "key": "rallyselectmethod",
                "type": "choices",
                "default": "Priority, Closest (default) (0)",
                "desc": "",
                "choices": {
                    "Priority, Closest (default)": "0",
                    "Random": "1",
                    "Priority, Furthest": "2"
                }
            },
            {
                "name": "Branching Assault Selection Method",
                "key": "branchmethod",
                "type": "choices",
                "default": "Random (default) (0)",
                "desc": "",
                "choices": {
                    "Random (default)": "0",
                    "Closest": "1",
                    "Furthest": "2"
                }
            }
        ],
        "inputs": [
            {
                "name": "Activate",
                "type": "void",
                "desc": "Begin the assault behavior"
            },
            {
                "name": "Deactivate",
                "type": "void",
                "desc": "Cease the assault behavior"
            },
            {
                "name": "BeginAssault",
                "type": "void",
                "desc": "Begin assault phase"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "ai_goal_fightfromcover",
        "desc": "AI Fight from Cover",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Actor(s) to affect",
                "key": "actor",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Target Entity",
                "key": "goal",
                "type": "target_destination",
                "default": "",
                "desc": "The name of the entity to follow. If blank, and the actor likes the player, then defaults to player"
            },
            {
                "name": "Directional Marker",
                "key": "directionalmarker",
                "type": "target_destination",
                "default": "",
                "desc": "Specify the entity that indicates the direction of battle"
            },
            {
                "name": "Generic Hint Type",
                "key": "generichinttype",
                "type": "string",
                "default": "",
                "desc": "Behavior looks for 'generic' hints, and requires a text tag to search for"
            },
            {
                "name": "Zone Width",
                "key": "width",
                "type": "float",
                "default": "600",
                "desc": "Width of the hint search area"
            },
            {
                "name": "Zone Length",
                "key": "length",
                "type": "float",
                "default": "480",
                "desc": "Length of the hint search area"
            },
            {
                "name": "Zone Height",
                "key": "height",
                "type": "float",
                "default": "2400",
                "desc": "Offset in the direction of the hint search area"
            },
            {
                "name": "Zone Bias",
                "key": "bias",
                "type": "float",
                "default": "60",
                "desc": "Offset in the direction of the hint search area"
            },
            {
                "name": "Start Active",
                "key": "startactive",
                "type": "boolean",
                "default": "No",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "Activate",
                "type": "void",
                "desc": ""
            },
            {
                "name": "Deactivate",
                "type": "void",
                "desc": ""
            },
            {
                "name": "SetDirectionalMarker",
                "type": "string",
                "desc": "Specify the entity that indicates the direction of battle"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "ai_goal_standoff",
        "desc": "AI Goal Standoff",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Actor(s) to affect",
                "key": "actor",
                "type": "target_name_or_class",
                "default": "",
                "desc": ""
            },
            {
                "name": "Search Type",
                "key": "searchtype",
                "type": "choices",
                "default": "Entity Name (0)",
                "desc": "How to search for the entities using the targetname.",
                "choices": {
                    "Entity Name": "0",
                    "Classname": "1"
                }
            },
            {
                "name": "Start Active",
                "key": "startactive",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Reaction to tactical change",
                "key": "hintgroupchangereaction",
                "type": "choices",
                "default": "Move when seek cover (1)",
                "desc": "What to do if leader moves, threat is neutralized, hint group changes, etc",
                "choices": {
                    "Move when ready (default AI)": "0",
                    "Move when seek cover": "1",
                    "Move immediately": "2"
                }
            },
            {
                "name": "Aggressiveness",
                "key": "aggressiveness",
                "type": "choices",
                "default": "Medium (2)",
                "desc": "",
                "choices": {
                    "Very low": "0",
                    "Low": "1",
                    "Medium": "2",
                    "High": "3",
                    "Very High": "4",
                    "Custom": "5"
                }
            },
            {
                "name": "Player battleline",
                "key": "playerbattleline",
                "type": "boolean",
                "default": "No",
                "desc": "Player defines a battle line, applies to allies only"
            },
            {
                "name": "Stay at cover location",
                "key": "stayatcover",
                "type": "boolean",
                "default": "No",
                "desc": "When have suitable cover, don't change it (disables advancing to battle line)"
            },
            {
                "name": "Abandon if enemies hide",
                "key": "abandonifenemyhides",
                "type": "boolean",
                "default": "No",
                "desc": "If no enemy detected recently, stop the standoff"
            },
            {
                "name": "Custom: Take cover to reload",
                "key": "customcoveronreload",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Custom: Min time wait to shoot",
                "key": "custommintimeshots",
                "type": "float",
                "default": "2",
                "desc": "Minimum duration of time after a burst of shooting before trying again"
            },
            {
                "name": "Custom: Max time wait to shoot",
                "key": "custommaxtimeshots",
                "type": "float",
                "default": "4",
                "desc": "Minimum duration of time after a burst of shooting before trying again"
            },
            {
                "name": "Custom: Min shots in a burst",
                "key": "customminshots",
                "type": "integer",
                "default": "1",
                "desc": ""
            },
            {
                "name": "Custom: Max shots in a burst",
                "key": "custommaxshots",
                "type": "integer",
                "default": "4",
                "desc": ""
            },
            {
                "name": "Custom: Odds cover on damage",
                "key": "customoddscover",
                "type": "integer",
                "default": "25",
                "desc": "If damaged, the chances react by taking immediate cover"
            }
        ],
        "inputs": [
            {
                "name": "Activate",
                "type": "void",
                "desc": "Begin contesting position."
            },
            {
                "name": "Deactivate",
                "type": "void",
                "desc": "Cease contesting position."
            },
            {
                "name": "UpdateActors",
                "type": "void",
                "desc": "Forces an update on this goal's actors."
            },
            {
                "name": "SetAggressiveness",
                "type": "integer",
                "desc": "Set aggressiveness."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "ai_npc_eventresponsesystem",
        "desc": "An entity that allows you to generate events for nearby friendly NPCs to respond to.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "TriggerResponseEvent",
                "type": "string",
                "desc": "Fire an NPC Response Event. The parameter should match the response rules concept that any nearby friendly NPCs will try to speak."
            },
            {
                "name": "ForceTriggerResponseEvent",
                "type": "string",
                "desc": "Fire an NPC Response Event, and force the first available NPC to speak the response (breaking them out of any scene they're in). The parameter should match the response rules concept that any nearby friendly NPCs will try to speak."
            },
            {
                "name": "ForceTriggerResponseEventNoCancel",
                "type": "string",
                "desc": "Fire an NPC Response Event, and force the first available NPC to speak the response (but don't break them out of any scene they're in). The parameter should match the response rules concept that any nearby friendly NPCs will try to speak."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "ai_relationship",
        "desc": "AI Relationship - Sets relationships between groups of NPCs in the AI.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Subject(s)",
                "key": "subject",
                "type": "target_name_or_class",
                "default": "",
                "desc": "This is the NPC(s) whose disposition will change. May be a targetname or a classname."
            },
            {
                "name": "Target(s)",
                "key": "target",
                "type": "target_name_or_class",
                "default": "",
                "desc": "This is the NPC(s) about whom the Subject(s) will change their disposition. May be a targetname or a classname."
            },
            {
                "name": "Disposition",
                "key": "disposition",
                "type": "choices",
                "default": "Like (3)",
                "desc": "Choose the way the Subject(s) should feel about the Target(s)",
                "choices": {
                    "Hate": "1",
                    "Fear": "2",
                    "Like": "3",
                    "Neutral": "4"
                }
            },
            {
                "name": "Radius for subject",
                "key": "radius",
                "type": "float",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Disposition Priority",
                "key": "rank",
                "type": "integer",
                "default": "0",
                "desc": "How much the Subject(s) should Like/Hate/Fear the Target(s). Higher priority = stronger feeling."
            },
            {
                "name": "Start Active",
                "key": "startactive",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Reciprocal",
                "key": "reciprocal",
                "type": "boolean",
                "default": "No",
                "desc": "Set this to YES to have the new relationship mirrored by Target"
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Notify subject of target's location": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Notify target of subject's location": {
                        "default": false,
                        "num": 2
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "ApplyRelationship",
                "type": "void",
                "desc": "Apply relationship changes. This will change all Subject entities' relationships to all Target entities. \n\nIMPORTANT: Once you ApplyRelationships, this entity is then 'ALWAYS ON' until you send a Disable input or RevertRelationship input. During the time this entity is 'ON', any entities that spawn who match the Subject or Target names will be affected. \n\nIMPORTANT: Unpredictable results may occur when two ai_relationship entities refer to the same set or subset of target or subject entities. This situation should be avoided."
            },
            {
                "name": "RevertRelationship",
                "type": "void",
                "desc": "Revert relationship changes. This will return the relationship to what it was at the time the ApplyRelationship input was called (or when this ai_relationship was spawned if StartActive is set)."
            },
            {
                "name": "RevertToDefaultRelationship",
                "type": "void",
                "desc": "Revert relationship changes to the default relationship, which may have changed since this ai_relationship was applied. This returns control of the entity relationship to the code."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "ai_script_conditions",
        "desc": "AI Script Conditions",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Actor (optional)",
                "key": "actor",
                "type": "target_destination",
                "default": "",
                "desc": "NPC Target"
            },
            {
                "name": "Start Disabled",
                "key": "startdisabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Minimum state",
                "key": "minimumstate",
                "type": "choices",
                "default": "Idle (1)",
                "desc": "",
                "choices": {
                    "Idle": "1",
                    "Alert": "2",
                    "Combat": "3"
                }
            },
            {
                "name": "Maximum state",
                "key": "maximumstate",
                "type": "choices",
                "default": "Combat (3)",
                "desc": "",
                "choices": {
                    "Idle": "1",
                    "Alert": "2",
                    "Combat": "3"
                }
            },
            {
                "name": "Actor is running a script?",
                "key": "scriptstatus",
                "type": "choices",
                "default": "Don't care (2)",
                "desc": "",
                "choices": {
                    "No": "0",
                    "Yes": "1",
                    "Don't care": "2"
                }
            },
            {
                "name": "Required Time",
                "key": "requiredtime",
                "type": "float",
                "default": "0",
                "desc": "Duration of time that all the conditions must be true"
            },
            {
                "name": "Minimum time out",
                "key": "mintimeout",
                "type": "float",
                "default": "0",
                "desc": "Minimum time before OnConditionsTimeout is fired. 0 = never expire."
            },
            {
                "name": "Maximum time out",
                "key": "maxtimeout",
                "type": "float",
                "default": "0",
                "desc": "Maximum time before OnConditionsTimeout is fired. 0 = ignore (If you don't specify a Maximum timeout, conditions will time out at exactly Minimum Time Out. If you DO specify a Maximum time out, timeout will occur randomly between Minimum and Maximum time out values.)"
            },
            {
                "name": "Actor Sees Player",
                "key": "actorseeplayer",
                "type": "choices",
                "default": "Don't care (2)",
                "desc": "",
                "choices": {
                    "No": "0",
                    "Yes": "1",
                    "Don't care": "2"
                }
            },
            {
                "name": "Player distance",
                "key": "playeractorproximity",
                "type": "float",
                "default": "0",
                "desc": "The distance the player must/must not be to the actor. Negative values for NOT, 0 for ignore."
            },
            {
                "name": "Player FOV for Actor ",
                "key": "playeractorfov",
                "type": "float",
                "default": "360",
                "desc": "Specify angle of view cone in degrees. Negative value = NOT"
            },
            {
                "name": "Play FOV to Actor is a true view cone",
                "key": "playeractorfovtruecone",
                "type": "choices",
                "default": "No - Tall pie slice (0)",
                "desc": "Player's view cone is evaluated as a true cone, not pie slice ",
                "choices": {
                    "No - Tall pie slice": "0",
                    "Yes - True view cone": "1"
                }
            },
            {
                "name": "Player has LOS to Actor",
                "key": "playeractorlos",
                "type": "choices",
                "default": "Don't care (2)",
                "desc": "Checks that the player has clear Line of Sight to the Actor.",
                "choices": {
                    "No": "0",
                    "Yes": "1",
                    "Don't care": "2"
                }
            },
            {
                "name": "Target (Optional)",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Optional entity to include in conditions."
            },
            {
                "name": "Actor Sees Target",
                "key": "actorseetarget",
                "type": "choices",
                "default": "Don't care (2)",
                "desc": "",
                "choices": {
                    "No": "0",
                    "Yes": "1",
                    "Don't care": "2"
                }
            },
            {
                "name": "Target distance",
                "key": "actortargetproximity",
                "type": "float",
                "default": "0",
                "desc": "The distance the actor must/must not be to the Target. Negative values for NOT, 0 for ignore."
            },
            {
                "name": "Player distance from Target",
                "key": "playertargetproximity",
                "type": "float",
                "default": "0",
                "desc": "The distance the player must/must not be to the Target. Negative values for NOT, 0 for ignore."
            },
            {
                "name": "Player FOV for Target",
                "key": "playertargetfov",
                "type": "float",
                "default": "360",
                "desc": "Specify angle of view cone in degrees. Negative value = NOT"
            },
            {
                "name": "Player FOV to Target is a true view cone",
                "key": "playertargetfovtruecone",
                "type": "choices",
                "default": "No - Tall pie slice (0)",
                "desc": "Player's view cone is evaluated as a true cone, not pie slice ",
                "choices": {
                    "No - Tall pie slice": "0",
                    "Yes - True view cone": "1"
                }
            },
            {
                "name": "Player has LOS to Target",
                "key": "playertargetlos",
                "type": "choices",
                "default": "Don't care (2)",
                "desc": "Checks that the player has clear Line of Sight to the Target",
                "choices": {
                    "No": "0",
                    "Yes": "1",
                    "Don't care": "2"
                }
            },
            {
                "name": "Player blocking Actor",
                "key": "playerblockingactor",
                "type": "choices",
                "default": "Don't care (2)",
                "desc": "Checks that the player is blocking the Actor's path",
                "choices": {
                    "No": "0",
                    "Yes": "1",
                    "Don't care": "2"
                }
            },
            {
                "name": "Actor in Player's PVS",
                "key": "actorinpvs",
                "type": "choices",
                "default": "Don't care (2)",
                "desc": "Checks that the actor is in the player's PVS",
                "choices": {
                    "No": "0",
                    "Yes": "1",
                    "Don't care": "2"
                }
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Fire outputs with the Actor as Activator": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable this entity"
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable this entity"
            }
        ],
        "outputs": [
            {
                "name": "OnConditionsSatisfied",
                "type": "void",
                "desc": "Fires when AI conditions satisfied"
            },
            {
                "name": "OnConditionsTimeout",
                "type": "void",
                "desc": "Fires when AI conditions timed out"
            },
            {
                "name": "NoValidActor",
                "type": "void",
                "desc": "Fires if/when there are no matching actors in the map."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "ai_sound",
        "desc": "This entity makes sounds or smells that can be sensed by NPCs, but not by the player. This can be used to cause reactions in nearby NPCs.\n\nSound Types\n  Combat: Will cause most NPCs to become alert\n  World: Will cause most NPCs to become alert\n  Danger: Will cause most NPCs to move away from the position of the sound\n  Bullet Impact: \n  Carcass: \n  Meat: \n  Garbage: \n  Thumper: causes antlions to run away briefly\n  Readiness: (Low, Medium, High) Causes player companions that can hear this sound to change readiness\n",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Volume",
                "key": "volume",
                "type": "integer",
                "default": "120",
                "desc": "How far away this sound can be heard. This is a radius."
            },
            {
                "name": "Duration",
                "key": "duration",
                "type": "float",
                "default": "0.5",
                "desc": "How long the sound persists each time you insert it."
            },
            {
                "name": "Sound Type",
                "key": "soundtype",
                "type": "choices",
                "default": "Select one (0)",
                "desc": "The type of sound or smell will determine the reaction of NPCs that sense it.",
                "choices": {
                    "Select one": "0",
                    "Combat": "1",
                    "World": "2",
                    "Danger": "8",
                    "Bullet Impact": "16",
                    "Carcass": "32",
                    "Meat": "64",
                    "Garbage": "128",
                    "Thumper": "256",
                    "Bugbait": "512",
                    "Physics Danger": "1024",
                    "Sniper Danger (only scares sniper)": "2048",
                    "Move Away - Most NPCs will clear the radius of this sound when heard.": "4096",
                    "Readiness - Low": "16384",
                    "Readiness - Medium": "32768",
                    "Readiness - High": "65536"
                }
            },
            {
                "name": "Additional sound context (optional)",
                "key": "soundcontext",
                "type": "choices",
                "default": "Select one (0)",
                "desc": "Optional settings specifying such things as who can or cannot hear the sound.",
                "choices": {
                    "Select one": "0",
                    "From sniper": "1048576",
                    "Gunfire (use with combat sound type)": "2097152",
                    "Mortar (pending explosion)": "4194304",
                    "Only Combine can hear": "8388608",
                    "Combine cannot can hear": "67108864",
                    "React to source (face sound owner)": "16777216",
                    "Explosion (use with combat sound type)": "33554432",
                    "Danger approach (run if see sound owner, turn to face if not)": "134217728",
                    "Only allies can hear": "268435456"
                }
            },
            {
                "name": "Location Proxy",
                "key": "locationproxy",
                "type": "target_destination",
                "default": "",
                "desc": "The name of an entity to use as a proxy to determine the location at which to make the sound. If you specify an entity here, the sound will be made at that entity's location (!player included)"
            }
        ],
        "inputs": [
            {
                "name": "EmitAISound",
                "type": "void",
                "desc": "Make the sound."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "ai_speechfilter",
        "desc": "An entity that can be used to control the idle speech patterns of a set of NPCs.",
        "bases": [
            "BaseEntityPoint",
            "ResponseContext",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Subject(s)",
                "key": "subject",
                "type": "target_destination",
                "default": "",
                "desc": "This is the NPC(s) whose speech we're filtering. May be a targetname or a classname."
            },
            {
                "name": "Idle modifier.",
                "key": "idlemodifier",
                "type": "float",
                "default": "1.0",
                "desc": "Multiplier to the percentage chance that our NPC(s) will idle speak. Set to 0 to prevent all idle speech."
            },
            {
                "name": "Greet Player?",
                "key": "neversayhello",
                "type": "boolean",
                "default": "No",
                "desc": "If set to Yes, our NPC(s) won't greet the player when they first meet them."
            }
        ],
        "inputs": [
            {
                "name": "SetIdleModifier",
                "type": "float",
                "desc": "Allows designers to change the idle modifier at runtime"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "aiscripted_schedule",
        "desc": "Issues a command to an NPC without taking the NPC out of its AI. This does not seize control of the NPC as a scripted_sequence does.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Target NPC",
                "key": "m_iszentity",
                "type": "target_destination",
                "default": "",
                "desc": "The name or classname of an NPC to use."
            },
            {
                "name": "Search Radius (0=everywhere)",
                "key": "m_flradius",
                "type": "integer",
                "default": "0",
                "desc": "Radius to search within for an NPC to use. 0 searches everywhere."
            },
            {
                "name": "All in radius",
                "key": "graball",
                "type": "boolean",
                "default": "No",
                "desc": "Whether to grab all matching NPCs in the specified radius, instead of just one."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[4] Repeatable": {
                        "default": true,
                        "num": 4
                    },
                    "[1024] Search Cyclically": {
                        "default": false,
                        "num": 1024
                    },
                    "[2048] Don't Complain": {
                        "default": false,
                        "num": 2048
                    }
                }
            },
            {
                "name": "AI state to set",
                "key": "forcestate",
                "type": "choices",
                "default": "<None> (0)",
                "desc": "",
                "choices": {
                    "<None>": "0",
                    "Set state to IDLE": "1",
                    "Set state to ALERT": "2",
                    "Set state to COMBAT": "3"
                }
            },
            {
                "name": "Schedule to run",
                "key": "schedule",
                "type": "choices",
                "default": "Walk to Goal Entity (1)",
                "desc": "",
                "choices": {
                    "<None>": "0",
                    "Walk to Goal Entity": "1",
                    "Run to Goal Entity": "2",
                    "Set enemy to Goal Entity": "3",
                    "Walk Goal Path": "4",
                    "Run Goal Path": "5",
                    "Set enemy to Goal Entity AND Run to Goal Entity": "6"
                }
            },
            {
                "name": "Interruptability",
                "key": "interruptability",
                "type": "choices",
                "default": "General (0)",
                "desc": "",
                "choices": {
                    "General": "0",
                    "Damage or Death": "1",
                    "Death": "2"
                }
            },
            {
                "name": "Goal entity",
                "key": "goalent",
                "type": "target_destination",
                "default": "",
                "desc": "Provides the name of a schedule-specific goal entity (see 'Schedule to run')"
            }
        ],
        "inputs": [
            {
                "name": "StartSchedule",
                "type": "void",
                "desc": "Starts the scripted schedule. This will first locate an NPC that matches the given target, then tell the NPC to run the specified schedule."
            },
            {
                "name": "StopSchedule",
                "type": "void",
                "desc": "Tells the NPC to stop the scripted schedule"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "ambient_generic",
        "desc": "Universal ambient sound. Use it to play and control a single sound.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Infinite Range": {
                        "default": false,
                        "num": 1
                    },
                    "[16] Start Silent": {
                        "default": true,
                        "num": 16
                    },
                    "[32] Is NOT Looped": {
                        "default": true,
                        "num": 32
                    }
                }
            },
            {
                "name": "Sound Name",
                "key": "message",
                "type": "sound",
                "default": "",
                "desc": "Name of the GameSound entry for the sound to play. Also supports direct .wav filenames."
            },
            {
                "name": "Volume",
                "key": "health",
                "type": "integer",
                "default": "10",
                "desc": "Sound volume, expressed as a range from 0 to 10, where 10 is the loudest."
            },
            {
                "name": "Sound Range",
                "key": "radius",
                "type": "float",
                "default": "1250",
                "desc": "Maximum distance at which this sound is audible. Overridden by soundscripts."
            },
            {
                "name": "Pitch",
                "key": "pitch",
                "type": "integer",
                "default": "100",
                "desc": "Sound pitch, expressed as a range from 1(low) to 255(high), where 100 is the sound's default pitch. Overridden by soundscripts."
            },
            {
                "name": "Source Entity",
                "key": "sourceentityname",
                "type": "target_destination",
                "default": "",
                "desc": "If an entity is specified, sound will come from this named entity instead of the location of ambient_generic."
            },
            {
                "name": "Sound Flags",
                "key": "soundflags",
                "type": "choices",
                "default": "None (0)",
                "desc": "Additional options for your sound.",
                "choices": {
                    "None": "0",
                    "[128] Pause when game is paused": "128",
                    "[256] Ignore phonemes (no lip-syncing)": "256",
                    "[1024] Don't overwrite existing sound on channel (untested)": "1024",
                    "Pause and ignore phonemes": "384",
                    "Ignore phonemes and don't overwrite": "1280",
                    "Pause and don't overwrite": "1152",
                    "Pause, ignore phonemes and don't overwrite": "1408"
                }
            },
            {
                "name": "Dynamic Presets",
                "key": "preset",
                "type": "choices",
                "default": "None (0)",
                "desc": "If used, overrides many of the below properties (+pitch) to preset values.",
                "choices": {
                    "None": "0",
                    "Huge Machine": "1",
                    "Big Machine": "2",
                    "Machine": "3",
                    "Slow Fade in": "4",
                    "Fade in": "5",
                    "Quick Fade in": "6",
                    "Slow Pulse": "7",
                    "Pulse": "8",
                    "Quick pulse": "9",
                    "Slow Oscillator": "10",
                    "Oscillator": "11",
                    "Quick Oscillator": "12",
                    "Grunge pitch": "13",
                    "Very low pitch": "14",
                    "Low pitch": "15",
                    "High pitch": "16",
                    "Very high pitch": "17",
                    "Screaming pitch": "18",
                    "Oscillate spinup/down": "19",
                    "Pulse spinup/down": "20",
                    "Random pitch": "21",
                    "Random pitch fast": "22",
                    "Incremental Spinup": "23",
                    "Alien": "24",
                    "Bizzare": "25",
                    "Planet X": "26",
                    "Haunted": "27"
                }
            },
            {
                "name": "Transition Volume",
                "key": "volstart",
                "type": "integer",
                "default": "0",
                "desc": "The Volume to start/end with. Use with Fade In and Out times."
            },
            {
                "name": "Volume Transition Time - Start (0-100)",
                "key": "fadeinsecs",
                "type": "integer",
                "default": "0",
                "desc": "Time in seconds for the sound to transition from the Transition Volume to the set volume as it starts playing."
            },
            {
                "name": "Volume Transition Time - Stop (0-100)",
                "key": "fadeoutsecs",
                "type": "integer",
                "default": "0",
                "desc": "Time in seconds for the sound to transition from the set volume to the Transition Volume as it stops playing."
            },
            {
                "name": "Transition Pitch",
                "key": "pitchstart",
                "type": "integer",
                "default": "100",
                "desc": "Pitch to start with/end. Use with Spin Up and Spin Down."
            },
            {
                "name": "Pitch Transition Time - Start (0-100)",
                "key": "spinup",
                "type": "integer",
                "default": "0",
                "desc": "The time taken to change from the Transition Pitch to the final Pitch while the sound starts playing. Simulates the noise powering-up when an object is activated."
            },
            {
                "name": "Pitch Transition Time - Stop (0-100)",
                "key": "spindown",
                "type": "integer",
                "default": "0",
                "desc": "The time taken to transition from the Pitch to the Transition pitch while the sound stops playing. Simulates the noise fading out as the object shuts down."
            },
            {
                "name": "LFO type",
                "key": "lfotype",
                "type": "choices",
                "default": "None (0)",
                "desc": "The kind of Low Frequency Oscillation to apply to the sound. Allows subtle modification to the sound. Square waves instantly switch between the high and low values, whereas Triangle Waves gradually switch between the two.",
                "choices": {
                    "None": "0",
                    "Square Wave": "1",
                    "Triangle Wave": "2",
                    "Random": "3"
                }
            },
            {
                "name": "LFO rate (0-1000)",
                "key": "lforate",
                "type": "integer",
                "default": "0",
                "desc": "How often the Low Frequency Oscillation repeats itself."
            },
            {
                "name": "LFO Effect On Pitch (0-100)",
                "key": "lfomodpitch",
                "type": "integer",
                "default": "0",
                "desc": "The amount the Low Frequency Oscillation affects the pitch."
            },
            {
                "name": "LFO Effect On Volume (0-100)",
                "key": "lfomodvol",
                "type": "integer",
                "default": "0",
                "desc": "The amount the Low Frequency Oscillation affects the volume."
            },
            {
                "name": "Incremental Spinup Count",
                "key": "cspinup",
                "type": "integer",
                "default": "0",
                "desc": "Appears non-functional."
            }
        ],
        "inputs": [
            {
                "name": "Pitch",
                "type": "integer",
                "desc": "Sets the sound pitch, expressed as a range from 1 to 255, where 100 is the sound's default pitch."
            },
            {
                "name": "PlaySound",
                "type": "void",
                "desc": "Starts the sound or restart from beginning (if looped)."
            },
            {
                "name": "StopSound",
                "type": "void",
                "desc": "Stops the sound if it is playing. Only works properly if the looped flag is checked."
            },
            {
                "name": "ToggleSound",
                "type": "void",
                "desc": "Toggles the sound between playing and stopping."
            },
            {
                "name": "Volume",
                "type": "integer",
                "desc": "Sets the sound volume, expressed as a range from 0 to 10, where 10 is the loudest."
            },
            {
                "name": "FadeIn",
                "type": "integer",
                "desc": "Fades the sound up to full volume over a specified number of seconds, with a range from 0 to 100 seconds."
            },
            {
                "name": "FadeOut",
                "type": "integer",
                "desc": "Fades the sound to silence over a specified number of seconds, with a range from 0 to 100 seconds. Sound is forced to full volume first!"
            },
            {
                "name": "SetSound",
                "type": "string",
                "desc": "Sets the sound this ambient_generic should play."
            }
        ],
        "outputs": [
            {
                "name": "OnSoundFinished",
                "type": "void",
                "desc": "Fires when the sound finishes playing. NOTE: This sound should be set to pause when the game is paused."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "assault_assaultpoint",
        "desc": "(Assault) assault point",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Assault Hint Group",
                "key": "assaultgroup",
                "type": "string",
                "default": "",
                "desc": "NPC's movements are constrained to this hint group once assault has begun"
            },
            {
                "name": "Next assault point (optional)",
                "key": "nextassaultpoint",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Assault time out",
                "key": "assaulttimeout",
                "type": "float",
                "default": "3.0",
                "desc": "This point is cleared when no enemies are seen for this long (seconds)"
            },
            {
                "name": "Clear on contact with enemies",
                "key": "clearoncontact",
                "type": "boolean",
                "default": "No",
                "desc": "If you come in contact with enemies while approaching the assault point, clear our assault point"
            },
            {
                "name": "Allow diversion",
                "key": "allowdiversion",
                "type": "boolean",
                "default": "No",
                "desc": "If you come in contact with enemies while approaching the assault point, divert to kill them. Resume the assault once contact is lost."
            },
            {
                "name": "Diversion Proximity",
                "key": "allowdiversionradius",
                "type": "float",
                "default": "0",
                "desc": "If Allow Diversion is set, NPC will only divert from assault to attack an enemy that is within this distance of the assault point. 0 = No limit."
            },
            {
                "name": "Never Timeout",
                "key": "nevertimeout",
                "type": "boolean",
                "default": "No",
                "desc": "If set, the assault never ends for NPCs assaulting this point. Useful for forcing NPCs back to a point."
            },
            {
                "name": "Strict?",
                "key": "strict",
                "type": "choices",
                "default": "No, NPC may move from point to attack (0)",
                "desc": "",
                "choices": {
                    "No, NPC may move from point to attack": "0",
                    "Yes, NPC may not move to attack": "1"
                }
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Clear this point upon arrival, UNCONDITIONALLY": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Force Crouch",
                "key": "forcecrouch",
                "type": "boolean",
                "default": "No",
                "desc": "NPCs using this assault point are forced into crouching while holding it."
            },
            {
                "name": "Urgent",
                "key": "urgent",
                "type": "boolean",
                "default": "No",
                "desc": "If true, NPCs will consider movement to this assault point as Urgent Navigation."
            },
            {
                "name": "Attack Tolerance",
                "key": "assaulttolerance",
                "type": "choices",
                "default": "Tight (3ft) (36)",
                "desc": "How far this NPC may move from the assault point to try to attack an enemy.",
                "choices": {
                    "Tight (3ft)": "36",
                    "Medium (6ft)": "72",
                    "Large (10ft)": "120"
                }
            }
        ],
        "inputs": [
            {
                "name": "SetClearOnContact",
                "type": "integer",
                "desc": "Set the clear on contact flag. NPCs who spot enemies while running to the assault point, or while waiting at it, will immediately Clear it."
            },
            {
                "name": "SetAllowDiversion",
                "type": "integer",
                "desc": "Set the allow diversion flag. NPCs who spot enemies while running to the assault point, or while waiting on it, will divert away (leave Assault mode) to deal with the enemies. Upon losing enemies, they'll go back to Assault mode, and return to this assault point."
            },
            {
                "name": "SetForceClear",
                "type": "integer",
                "desc": "Set the Force Clear flag. NPCs who are currently running to the assault point will Clear it immediately. NPCs who acquire it in the future will Clear it automatically."
            }
        ],
        "outputs": [
            {
                "name": "OnArrival",
                "type": "void",
                "desc": "Fires when the NPC reaches this assault point"
            },
            {
                "name": "OnAssaultClear",
                "type": "void",
                "desc": "Fires when this assault point is cleared of enemies"
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "assault_rallypoint",
        "desc": "(Assault) rally point",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Assault Point",
                "key": "assaultpoint",
                "type": "target_destination",
                "default": "",
                "desc": "Location to move to as assault begins"
            },
            {
                "name": "Assault Delay",
                "key": "assaultdelay",
                "type": "float",
                "default": "0",
                "desc": "How long to wait after cue is given before assault begins."
            },
            {
                "name": "Rally Sequence",
                "key": "rallysequence",
                "type": "string",
                "default": "",
                "desc": "Override the NPC's wait activity by entering a sequence name."
            },
            {
                "name": "Priority",
                "key": "priority",
                "type": "integer",
                "default": "1",
                "desc": "Higher priority rally points get selected first."
            },
            {
                "name": "Force Crouch",
                "key": "forcecrouch",
                "type": "boolean",
                "default": "No",
                "desc": "NPCs using this assault point are forced into crouching while holding it."
            },
            {
                "name": "Urgent",
                "key": "urgent",
                "type": "boolean",
                "default": "No",
                "desc": "If true, NPCs will consider movement to this rally point as Urgent Navigation. NPCs will ignore prop_physics obstructions, and eventually teleport to reach the point."
            },
            {
                "name": "Lock Point",
                "key": "lockpoint",
                "type": "boolean",
                "default": "No",
                "desc": "Should this point be locked by a character using it."
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnArrival",
                "type": "void",
                "desc": "Fires when the NPC reaches this rally point."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "beam_spotlight",
        "desc": "An entity to draw a spotlight. Will draw a beam when the player views it side on, and a halo when it's facing towards the player. Unless the 'No Dynamic Light' spawnflag is checked, it will also create a dynamic light wherever the end of the spotlight rests.This spotlight is entirely client side, it is not sync'd across clients.",
        "bases": [
            "BaseEntityPoint",
            "Angles",
            "SystemLevelChoice"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start On": {
                        "default": true,
                        "num": 1
                    },
                    "[2] No Dynamic Light": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Start rotation on": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Reverse Direction": {
                        "default": false,
                        "num": 8
                    },
                    "[16] X Axis": {
                        "default": false,
                        "num": 16
                    },
                    "[32] Y Axis": {
                        "default": false,
                        "num": 32
                    }
                }
            },
            {
                "name": "Max Rotation Speed",
                "key": "maxspeed",
                "type": "integer",
                "default": "100",
                "desc": "The maximum rotation speed of the spotlight, in degrees per second."
            },
            {
                "name": "Spotlight Length",
                "key": "spotlightlength",
                "type": "integer",
                "default": "500",
                "desc": "Length of the spotlight beam."
            },
            {
                "name": "Spotlight Width",
                "key": "spotlightwidth",
                "type": "integer",
                "default": "50",
                "desc": "Width of the spotlight beam."
            },
            {
                "name": "Color (R G B)",
                "key": "rendercolor",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "HDR color scale.",
                "key": "hdrcolorscale",
                "type": "float",
                "default": "0.7",
                "desc": "float value to multiply sprite color by when running in HDR mode."
            }
        ],
        "inputs": [
            {
                "name": "LightOn",
                "type": "void",
                "desc": "Turn the spotlight on."
            },
            {
                "name": "LightOff",
                "type": "void",
                "desc": "Turn the spotlight off"
            },
            {
                "name": "Start",
                "type": "void",
                "desc": "Start the rotator rotating."
            },
            {
                "name": "Stop",
                "type": "void",
                "desc": "Stop the rotator from rotating."
            },
            {
                "name": "Reverse",
                "type": "void",
                "desc": "Reverse the direction of rotation of the rotator."
            }
        ],
        "outputs": [
            {
                "name": "OnLightOn",
                "type": "void",
                "desc": "Fires when light turns on."
            },
            {
                "name": "OnLightOff",
                "type": "void",
                "desc": "Fires when light turns off."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "color_correction",
        "desc": "An entity to control the color correction in the map.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Lookup Falloff Start Distance",
                "key": "minfalloff",
                "type": "float",
                "default": "0.0",
                "desc": "This is the distance to the start of the falloff region (-1 = everywhere)"
            },
            {
                "name": "Lookup Falloff End Distance",
                "key": "maxfalloff",
                "type": "float",
                "default": "200.0",
                "desc": "This is the distance to the end of the falloff region (-1 = everywhere)"
            },
            {
                "name": "Maximum Weight",
                "key": "maxweight",
                "type": "float",
                "default": "1.0",
                "desc": "This is the maximum weight for this lookup"
            },
            {
                "name": "Lookup Table Filename",
                "key": "filename",
                "type": "string",
                "default": "",
                "desc": "This is the lookup table filename"
            },
            {
                "name": "Lookup Fade In Duration",
                "key": "fadeinduration",
                "type": "float",
                "default": "0.0",
                "desc": "Duration of fade in on when enabled."
            },
            {
                "name": "Lookup Fade out Duration",
                "key": "fadeoutduration",
                "type": "float",
                "default": "0.0",
                "desc": "Dration of fade out on when disabled."
            },
            {
                "name": "Exlusive",
                "key": "exclusive",
                "type": "boolean",
                "default": "No",
                "desc": "An exclusive color_correction entity disables and fades out all other color corrections when it is enabled. There should only be one active exclusive color_correction ent at any time."
            }
        ],
        "inputs": [
            {
                "name": "SetFadeInDuration",
                "type": "float",
                "desc": "Sets the 'fadeInDuration' variable, used to fade cc lookup usage when entity is enabled."
            },
            {
                "name": "SetFadeOutDuration",
                "type": "float",
                "desc": "Sets the 'fadeOutDuration' variable, used to fade cc lookup usage when entity is disabled."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "color_correction_volume",
        "desc": "An entity to control the color correction in the map.",
        "bases": [
            "BaseEntityBrush",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Lookup Fade Duration",
                "key": "fadeduration",
                "type": "float",
                "default": "10.0",
                "desc": "This is the duration for the lookup to fade in/out on extry/exit"
            },
            {
                "name": "Maximum Weight",
                "key": "maxweight",
                "type": "float",
                "default": "1.0",
                "desc": "This is the maximum weight for this lookup"
            },
            {
                "name": "Lookup Table Filename",
                "key": "filename",
                "type": "string",
                "default": "",
                "desc": "This is the lookup table filename"
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "commentary_auto",
        "desc": "Commentary-specific version of logic_auto.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": [
            {
                "name": "OnCommentaryNewGame",
                "type": "void",
                "desc": "Fired when a new game is started with commentary enabled."
            },
            {
                "name": "OnCommentaryMidGame",
                "type": "void",
                "desc": "Fired when commentary is enabled in the middle of a map."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_ambient_light",
        "desc": "An entity to control the color correction in the map.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Color (R G B)",
                "key": "color",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "Lookup Falloff Start Distance",
                "key": "minfalloff",
                "type": "float",
                "default": "0.0",
                "desc": "This is the distance to the start of the falloff region (-1 = everywhere)"
            },
            {
                "name": "Lookup Falloff End Distance",
                "key": "maxfalloff",
                "type": "float",
                "default": "200.0",
                "desc": "This is the distance to the end of the falloff region (-1 = everywhere)"
            },
            {
                "name": "Maximum Weight",
                "key": "maxweight",
                "type": "float",
                "default": "1.0",
                "desc": "This is the maximum weight for this lookup"
            },
            {
                "name": "Lookup Fade In Duration",
                "key": "fadeinduration",
                "type": "float",
                "default": "0.0",
                "desc": "Duration of fade in on when enabled."
            },
            {
                "name": "Lookup Fade out Duration",
                "key": "fadeoutduration",
                "type": "float",
                "default": "0.0",
                "desc": "Duration of fade out on when disabled."
            }
        ],
        "inputs": [
            {
                "name": "SetColor",
                "type": "color255",
                "desc": "Sets the color."
            },
            {
                "name": "SetFadeInDuration",
                "type": "float",
                "desc": "Sets the 'fadeInDuration' variable, used to fade cc lookup usage when entity is enabled."
            },
            {
                "name": "SetFadeOutDuration",
                "type": "float",
                "desc": "Sets the 'fadeOutDuration' variable, used to fade cc lookup usage when entity is disabled."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_blood",
        "desc": "An entity used to spawn blood effects.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Spray Direction (Pitch Yaw Roll)",
                "key": "spraydir",
                "type": "angle",
                "default": "0 0 0",
                "desc": "The general direction that the blood should spray and the direction to trace to apply the decal."
            },
            {
                "name": "Blood Color",
                "key": "color",
                "type": "choices",
                "default": "Red (Human) (0)",
                "desc": "",
                "choices": {
                    "Red (Human)": "0",
                    "Yellow (Alien)": "1"
                }
            },
            {
                "name": "Amount of blood (damage to simulate)",
                "key": "amount",
                "type": "string",
                "default": "100",
                "desc": ""
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Random Direction": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Blood Stream": {
                        "default": false,
                        "num": 2
                    },
                    "[4] On Player": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Spray decals": {
                        "default": false,
                        "num": 8
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "EmitBlood",
                "type": "void",
                "desc": "Triggers the blood effect."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "env_bubbles",
        "desc": "An entity used to create a volume in which to spawn bubbles.",
        "bases": [
            "BaseEffectBrush"
        ],
        "keyvalues": [
            {
                "name": "Bubble density",
                "key": "density",
                "type": "integer",
                "default": "2",
                "desc": "The amount of bubbles per cycle. Final amount is inputted value plus one. -1 is max."
            },
            {
                "name": "Bubble frequency",
                "key": "frequency",
                "type": "integer",
                "default": "2",
                "desc": "How frequent cycles occur. Values include negative numbers to 20, the final time between cycles is 2.5s minus X tenths of a second if positive, or 2.5s plus X tenths of a second if negative."
            },
            {
                "name": "Speed of Current",
                "key": "current",
                "type": "integer",
                "default": "0",
                "desc": "The speed of the water current in the volume, used to move the bubbles."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start Off": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Activate",
                "type": "void",
                "desc": "Activates the bubbles."
            },
            {
                "name": "Deactivate",
                "type": "void",
                "desc": "Deactivates the bubbles."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggles the bubbles on and off."
            },
            {
                "name": "SetDensity",
                "type": "integer",
                "desc": "Sets the bubble density."
            },
            {
                "name": "SetFrequency",
                "type": "integer",
                "desc": "Sets bubble emission rate in bubbles per second."
            },
            {
                "name": "SetCurrent",
                "type": "integer",
                "desc": "Sets current speed in units per second."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_cascade_light",
        "desc": "An entity to control the sunlight that casts cascaded shadows in the map.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Pitch Yaw Roll (Y Z X)",
                "key": "angles",
                "type": "angle",
                "default": "50 43 0",
                "desc": "This is the shadow casting direction. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, and roll is the rotation around the X axis. (Note that pitch is negated vs. light_environment's pitch.)"
            },
            {
                "name": "Light Color",
                "key": "color",
                "type": "color255",
                "default": "255 255 255 1",
                "desc": "This is the color of the sunlight."
            },
            {
                "name": "Max Shadow Distance",
                "key": "maxshadowdistance",
                "type": "float",
                "default": "400",
                "desc": "Maximum dynamic shadow distance. Higher values are slower, default on PC is 400 units."
            },
            {
                "name": "Use light_environment's angles",
                "key": "uselightenvangles",
                "type": "boolean",
                "default": "No",
                "desc": "If true, the CSM shadow angles are automatically harvested from the light_environment's angles. If false, this entity's angles are used."
            },
            {
                "name": "CSM_Volume_Mode",
                "key": "csmvolumemode",
                "type": "choices",
                "default": "Auto (0)",
                "desc": "CSM Volume Modes - Auto: Static cache will update once every 10 frames (approx) covering max shadow distance or whole map around player. Manual : Static cache area coverage and updates are managed via csm volumes i/o. \n Use Manual mode for better quality and performence. \n In near future Auto mode will be removed from the game.",
                "choices": {
                    "Auto": "0",
                    "Manual": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "LightColor",
                "type": "color255",
                "desc": "Set the light color."
            },
            {
                "name": "LightColorScale",
                "type": "integer",
                "desc": "Set the light color scale"
            },
            {
                "name": "SetAngles",
                "type": "string",
                "desc": "Set the sun direction."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_credits",
        "desc": "The entity that controls the rolling credits, loaded from 'scripts/credits.txt'.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "RollCredits",
                "type": "void",
                "desc": "Start the intro credits rolling."
            },
            {
                "name": "RollOutroCredits",
                "type": "void",
                "desc": "Start the outro credits rolling."
            },
            {
                "name": "ShowLogo",
                "type": "void",
                "desc": "Show the HL2 logo."
            }
        ],
        "outputs": [
            {
                "name": "OnCreditsDone",
                "type": "void",
                "desc": "Fired when the credits having finished rolling."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_detail_controller",
        "desc": "An entity that lets you control override the min and max fade distances for details sprites in the map.",
        "bases": [
            "BaseEntityPoint",
            "Angles"
        ],
        "keyvalues": [
            {
                "name": "Start Fade Dist/Pixels",
                "key": "fademindist",
                "type": "float",
                "default": "512",
                "desc": "The distance at which the detail props will start fading away."
            },
            {
                "name": "End Fade Dist/Pixels",
                "key": "fademaxdist",
                "type": "float",
                "default": "1024",
                "desc": "The distance at which the detail props will stop fading and stop drawing entirely."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_dof_controller",
        "desc": "An entity that controls the depth of field settings for the player. Depth of field simulates camera blur of out-of-focus regions of the scene.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Enabled",
                "key": "enabled",
                "type": "boolean",
                "default": "No",
                "desc": "Whether the effect should be active"
            },
            {
                "name": "Near blur depth",
                "key": "near_blur",
                "type": "float",
                "default": "20",
                "desc": "Distance that the blurriness is at its peak near the viewpoint."
            },
            {
                "name": "Near focus depth",
                "key": "near_focus",
                "type": "float",
                "default": "100",
                "desc": "Distance that the focus is in full effect near the viewpoint."
            },
            {
                "name": "Near blur radius",
                "key": "near_radius",
                "type": "float",
                "default": "8",
                "desc": "Radius (in pixels) to blur the surrounding pixels."
            },
            {
                "name": "Far blur depth",
                "key": "far_blur",
                "type": "float",
                "default": "1000",
                "desc": "Distance where blurriness is at its peak far from the viewpoint."
            },
            {
                "name": "Far focus depth",
                "key": "far_focus",
                "type": "float",
                "default": "500",
                "desc": "Distance that the focus is in full effect far from the viewpoint."
            },
            {
                "name": "Far blur radius",
                "key": "far_radius",
                "type": "float",
                "default": "8",
                "desc": "Radius (in pixels) to blur the surrounding pixels."
            },
            {
                "name": "Focus target",
                "key": "focus_target",
                "type": "target_destination",
                "default": "",
                "desc": "Entity to use as a focal point."
            },
            {
                "name": "Focus target range",
                "key": "focus_range",
                "type": "float",
                "default": "200",
                "desc": "Distance behind the focal plane to remain in focus."
            }
        ],
        "inputs": [
            {
                "name": "SetNearBlurDepth",
                "type": "float",
                "desc": "Set the distance in front of the focus region at which the scene will be completely blurred using the near blur radius. Must be smaller than NearFocusDepth."
            },
            {
                "name": "SetNearFocusDepth",
                "type": "float",
                "desc": "The area between the near focus and far focus distances is perfectly in focus. Must be smaller than FarFocusDepth."
            },
            {
                "name": "SetFarFocusDepth",
                "type": "float",
                "desc": "The area between the near focus and far focus distances is perfectly in focus. Must be smaller than FarBlurDepth."
            },
            {
                "name": "SetFarBlurDepth",
                "type": "float",
                "desc": "Set the distance beyond the focus region at which the scene will be completely blurred using the far blur radius. Must be larger than FarFocusDepth."
            },
            {
                "name": "SetNearBlurRadius",
                "type": "float",
                "desc": "Set the blur radius (in pixels) to use at the near blur distance. Set to 0 to disable near blur."
            },
            {
                "name": "SetFarBlurRadius",
                "type": "float",
                "desc": "Set the blur radius (in pixels) to use at the far blur distance. Set to 0 to disable far blur."
            },
            {
                "name": "SetFocusTarget",
                "type": "string",
                "desc": "Set the focal target for the effect."
            },
            {
                "name": "SetFocusTargetRange",
                "type": "float",
                "desc": "Set the distance behind the focal point that will remain in focus."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_dustpuff",
        "desc": "An entity that can emit dust puffs.",
        "bases": [
            "BaseEntityPoint",
            "Angles"
        ],
        "keyvalues": [
            {
                "name": "Scale",
                "key": "scale",
                "type": "float",
                "default": "8",
                "desc": "Size of the dust puff."
            },
            {
                "name": "Speed",
                "key": "speed",
                "type": "float",
                "default": "16",
                "desc": "Speed at which the dust particles should move."
            },
            {
                "name": "Dust color",
                "key": "color",
                "type": "color255",
                "default": "128 128 128",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "SpawnDust",
                "type": "void",
                "desc": "Spawn a dust puff."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "env_embers",
        "desc": "An entity used to create a volume in which to spawn fire embers.",
        "bases": [
            "BaseEffectBrush"
        ],
        "keyvalues": [
            {
                "name": "Pitch Yaw Roll (X Y Z)",
                "key": "angles",
                "type": "angle",
                "default": "0 0 0",
                "desc": "This entity's orientation in the world. Roll is the rotation around the X axis, pitch is rotation around the Y axis and yaw is the rotation around the Z axis."
            },
            {
                "name": "Ember type",
                "key": "particletype",
                "type": "choices",
                "default": "Normal (0)",
                "desc": "",
                "choices": {
                    "Normal": "0",
                    "Smooth Fade": "1",
                    "Pulled": "2"
                }
            },
            {
                "name": "Density (particles per second)",
                "key": "density",
                "type": "integer",
                "default": "50",
                "desc": ""
            },
            {
                "name": "Particle Lifetime (seconds)",
                "key": "lifetime",
                "type": "integer",
                "default": "4",
                "desc": ""
            },
            {
                "name": "Particle Speed (units per second)",
                "key": "speed",
                "type": "integer",
                "default": "32",
                "desc": ""
            },
            {
                "name": "Ember Color (R G B)",
                "key": "rendercolor",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start On": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Toggle": {
                        "default": false,
                        "num": 2
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_entity_dissolver",
        "desc": "Dissolves the target entity when triggered. Only works on model entities. In Portal 2, this uses the Fizzler effects.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Target to Dissolve",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Targetname of the entity you want to dissolve."
            },
            {
                "name": "Magnitude",
                "key": "magnitude",
                "type": "integer",
                "default": "250",
                "desc": "How strongly to push away from the center."
            },
            {
                "name": "Dissolve Type",
                "key": "dissolvetype",
                "type": "choices",
                "default": "Energy (0)",
                "desc": "",
                "choices": {
                    "Energy": "0",
                    "Heavy electrical": "1",
                    "Light electrical": "2",
                    "Citadel Core Effect": "3"
                }
            }
        ],
        "inputs": [
            {
                "name": "Dissolve",
                "type": "string",
                "desc": "Dissolve target, if no target is passed it'll use the target specified in the target field."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_entity_igniter",
        "desc": "An entity that catches a target entity on fire. If the entity is an animating model, it will have sprite flames attached to its skeleton. Otherwise the entity will emit particle flame puffs.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Entity to ignite",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity to catch on fire."
            },
            {
                "name": "Lifetime in seconds",
                "key": "lifetime",
                "type": "float",
                "default": "10",
                "desc": "Duration of flames."
            }
        ],
        "inputs": [
            {
                "name": "Ignite",
                "type": "void",
                "desc": "Ignite the target entity."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_entity_maker",
        "desc": "Spawns the specified entity template at its origin. If set to auto-spawn, it will spawn the template whenever there's room and the player is looking elsewhere.",
        "bases": [
            "BaseEntityPoint",
            "Angles"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Enable AutoSpawn (will spawn whenever there's room)": {
                        "default": false,
                        "num": 1
                    },
                    "[2] AutoSpawn: Wait for entity destruction": {
                        "default": false,
                        "num": 2
                    },
                    "[4] AutoSpawn: Even if the player is looking": {
                        "default": false,
                        "num": 4
                    },
                    "[8] ForceSpawn: Only if there's room": {
                        "default": false,
                        "num": 8
                    },
                    "[16] ForceSpawn: Only if the player isn't looking": {
                        "default": false,
                        "num": 16
                    }
                }
            },
            {
                "name": "Point_template To Spawn",
                "key": "entitytemplate",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the point_template to spawn here."
            },
            {
                "name": "PostSpawn Movement Speed",
                "key": "postspawnspeed",
                "type": "float",
                "default": "0",
                "desc": "If specified, all the entities created in the template will move this fast in the specified PostSpawn Movement Direction."
            },
            {
                "name": "PostSpawn Movement Direction",
                "key": "postspawndirection",
                "type": "angle",
                "default": "0 0 0",
                "desc": "If a PostSpawn Movement Speed is specified, all the entities created in the template will move in this direction."
            },
            {
                "name": "PostSpawn Direction Variance",
                "key": "postspawndirectionvariance",
                "type": "float",
                "default": "0.15",
                "desc": "This variance is applied to the PostSpawn Movement Direction for each spawned entity in the template. Use it to apply some randomness to the directions."
            },
            {
                "name": "PostSpawn Inherit Angles",
                "key": "postspawninheritangles",
                "type": "boolean",
                "default": "No",
                "desc": "If in hierarchy, is spawn direction in world space, or object local space of parent."
            }
        ],
        "inputs": [
            {
                "name": "ForceSpawn",
                "type": "void",
                "desc": "Spawn an instance of the template at this origin and angle."
            },
            {
                "name": "ForceSpawnAtEntityOrigin",
                "type": "target_destination",
                "desc": "Spawns an instance of the template that has the same origin and angles as the specified entity."
            }
        ],
        "outputs": [
            {
                "name": "OnEntitySpawned",
                "type": "void",
                "desc": "Fired when an instance of the entity template has been spawned."
            },
            {
                "name": "OnEntityFailedSpawn",
                "type": "void",
                "desc": "Fired when a ForceSpawn input failed to spawn the template, either due to lack of space or being in player's view, depending on the spawnflags."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_explosion",
        "desc": "An entity that creates an explosion at its origin.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Magnitude",
                "key": "imagnitude",
                "type": "integer",
                "default": "100",
                "desc": "The amount of damage done by the explosion."
            },
            {
                "name": "Radius Override",
                "key": "iradiusoverride",
                "type": "integer",
                "default": "0",
                "desc": "If specified, the radius in which the explosion damages entities. If unspecified, the radius will be based on the magnitude."
            },
            {
                "name": "Fireball Sprite",
                "key": "fireballsprite",
                "type": "sprite",
                "default": "sprites/zerogxplode.spr",
                "desc": ""
            },
            {
                "name": "Render Mode",
                "key": "rendermode",
                "type": "choices",
                "default": "Additive (5)",
                "desc": "",
                "choices": {
                    "Normal": "0",
                    "Solid": "4",
                    "Additive": "5"
                }
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] No Damage": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Repeatable": {
                        "default": false,
                        "num": 2
                    },
                    "[4] No Fireball": {
                        "default": false,
                        "num": 4
                    },
                    "[8] No Smoke": {
                        "default": false,
                        "num": 8
                    },
                    "[16] No Decal": {
                        "default": false,
                        "num": 16
                    },
                    "[32] No Sparks": {
                        "default": false,
                        "num": 32
                    },
                    "[64] No Sound": {
                        "default": false,
                        "num": 64
                    },
                    "[128] Random Orientation": {
                        "default": false,
                        "num": 128
                    },
                    "[256] No Fireball Smoke": {
                        "default": false,
                        "num": 256
                    },
                    "[512] No particles": {
                        "default": false,
                        "num": 512
                    },
                    "[1024] No DLights": {
                        "default": false,
                        "num": 1024
                    },
                    "[2048] Don't clamp Min": {
                        "default": false,
                        "num": 2048
                    },
                    "[4096] Don't clamp Max": {
                        "default": false,
                        "num": 4096
                    },
                    "[8192] Damage above surface only": {
                        "default": false,
                        "num": 8192
                    },
                    "[16384] Generic damage": {
                        "default": false,
                        "num": 16384
                    }
                }
            },
            {
                "name": "Ignored Entity",
                "key": "ignoredentity",
                "type": "target_destination",
                "default": "",
                "desc": "Do not harm or affect the named entity."
            },
            {
                "name": "Ignored Class",
                "key": "ignoredclass",
                "type": "choices",
                "default": "None (0)",
                "desc": "Do not harm or affect this class.",
                "choices": {
                    "None": "0",
                    "Players": "1",
                    "Player Allies": "2",
                    "Vital Player Allies": "3",
                    "Antlions": "4",
                    "Barnacles": "5",
                    "npc_bullseyes": "6",
                    "Citizens - Passive": "7",
                    "Citizens Rebel": "8",
                    "Combine": "9",
                    "Combine Gunships": "10",
                    "Conscripts": "11",
                    "Headcrabs": "12",
                    "Manhacks": "13",
                    "Metropolice": "14",
                    "Military": "15",
                    "Scanners": "16",
                    "Stalkers": "17",
                    "Vortigaunts": "18",
                    "Zombies": "19",
                    "Protosnipers": "20",
                    "Missiles": "21",
                    "Flares": "22",
                    "Earth Fauna": "23",
                    "Hacked Rollermines": "24",
                    "Combine Hunters": "25"
                }
            }
        ],
        "inputs": [
            {
                "name": "Explode",
                "type": "void",
                "desc": "Triggers the explosion."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_fade",
        "desc": "An entity that controls screen fades.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Fade From": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Modulate": {
                        "default": false,
                        "num": 2
                    },
                    "[8] Stay Out": {
                        "default": false,
                        "num": 8
                    }
                }
            },
            {
                "name": "Duration (seconds)",
                "key": "duration",
                "type": "float",
                "default": "2",
                "desc": "The time that it will take to fade the screen in or out."
            },
            {
                "name": "Hold Fade (seconds)",
                "key": "holdtime",
                "type": "float",
                "default": "0",
                "desc": "The time to hold the faded in/out state."
            },
            {
                "name": "Fade Alpha",
                "key": "renderamt",
                "type": "integer",
                "default": "255",
                "desc": "Alpha of the fade, where 0 = fully transparent and 255 = fully opaque."
            },
            {
                "name": "Fade Color (R G B)",
                "key": "rendercolor",
                "type": "color255",
                "default": "0 0 0",
                "desc": ""
            },
            {
                "name": "Reverse Fade Duration (seconds)",
                "key": "reversefadeduration",
                "type": "float",
                "default": "2",
                "desc": "The duration of the reverse fade."
            }
        ],
        "inputs": [
            {
                "name": "Fade",
                "type": "void",
                "desc": "Start the screen fade."
            },
            {
                "name": "FadeReverse",
                "type": "void",
                "desc": "Begin doing the reverse of the current fade."
            }
        ],
        "outputs": [
            {
                "name": "OnBeginFade",
                "type": "void",
                "desc": "Fired when the fade has begun."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_fire",
        "desc": "An entity that handles a single flame at its origin. The flame causes heat 'damage' to other env_fire entities around it, and will eventually ignite non-flaming env_fire entities nearby, causing the fire to spread.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Duration",
                "key": "health",
                "type": "integer",
                "default": "30",
                "desc": "Amount of time the fire will burn."
            },
            {
                "name": "Size",
                "key": "firesize",
                "type": "integer",
                "default": "64",
                "desc": "Height (in world units) of the flame."
            },
            {
                "name": "Attack",
                "key": "fireattack",
                "type": "integer",
                "default": "4",
                "desc": "Amount of time the fire takes to grow to full strength."
            },
            {
                "name": "Type",
                "key": "firetype",
                "type": "choices",
                "default": "Natural (0)",
                "desc": "",
                "choices": {
                    "Natural": "0",
                    "Plasma": "1"
                }
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Infinite Duration": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Smokeless": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Start On": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Start Full": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Don't drop": {
                        "default": false,
                        "num": 16
                    },
                    "[32] No glow": {
                        "default": false,
                        "num": 32
                    },
                    "[128] Delete when out": {
                        "default": false,
                        "num": 128
                    },
                    "[256] Visible from above": {
                        "default": false,
                        "num": 256
                    }
                }
            },
            {
                "name": "Ignition Point",
                "key": "ignitionpoint",
                "type": "float",
                "default": "32",
                "desc": "Amount of heat 'damage' to take before this flame should ignite."
            },
            {
                "name": "Damage Scale",
                "key": "damagescale",
                "type": "float",
                "default": "1.0",
                "desc": "Multiplier of the burn damage done by the flame."
            }
        ],
        "inputs": [
            {
                "name": "StartFire",
                "type": "void",
                "desc": "Start the fire."
            },
            {
                "name": "Extinguish",
                "type": "float",
                "desc": "Puts out the fire permanently in the number of seconds specified."
            },
            {
                "name": "ExtinguishTemporary",
                "type": "float",
                "desc": "Puts out the fire temporarily in the number of seconds specified."
            }
        ],
        "outputs": [
            {
                "name": "OnIgnited",
                "type": "void",
                "desc": "Fires when the fire is first ignited."
            },
            {
                "name": "OnExtinguished",
                "type": "void",
                "desc": "Fires when the fire is fully extinguished."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_firesensor",
        "desc": "An entity that detects changes in heat nearby.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start On": {
                        "default": true,
                        "num": 1
                    }
                }
            },
            {
                "name": "Radius",
                "key": "fireradius",
                "type": "float",
                "default": "128",
                "desc": "The radius around this entity in which to detect heat changes."
            },
            {
                "name": "Heat level",
                "key": "heatlevel",
                "type": "float",
                "default": "32",
                "desc": "The target heat level to check for. Outputs are fired when the heat moves over this target level (increasing or decreasing)."
            },
            {
                "name": "Time at level",
                "key": "heattime",
                "type": "float",
                "default": "0",
                "desc": "The amount of time the heat level must spend over the target level before the 'OnHeatLevelStart' output is fired."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable fire sensor."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable fire sensor."
            }
        ],
        "outputs": [
            {
                "name": "OnHeatLevelStart",
                "type": "void",
                "desc": "Fires when the heat level has been sustained for the specified length of time."
            },
            {
                "name": "OnHeatLevelEnd",
                "type": "void",
                "desc": "Fires when the heat level drops below the target level."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_firesource",
        "desc": "An entity that provides heat to all nearby env_fire entities. Cannot be extinguished.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start On": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Radius",
                "key": "fireradius",
                "type": "float",
                "default": "128",
                "desc": "The radius around this entity in which to provide heat."
            },
            {
                "name": "Intensity / Damage",
                "key": "firedamage",
                "type": "float",
                "default": "10",
                "desc": "Amount of heat 'damage' to apply to env_fire entities within the radius."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable fire source."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable fire source."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_fog_controller",
        "desc": "An entity that controls the fog and view distance in the map.",
        "bases": [
            "BaseEntityPoint",
            "SystemLevelChoice"
        ],
        "keyvalues": [
            {
                "name": "Fog Enable",
                "key": "fogenable",
                "type": "boolean",
                "default": "No",
                "desc": "Whether or not the fog should start enabled."
            },
            {
                "name": "Fog Blend",
                "key": "fogblend",
                "type": "boolean",
                "default": "No",
                "desc": "Enables color blending between the primary color and the secondary color. When looking at the Primary Fog Direction, the primary fog color will appear. When looking away, the secondary color will. Looking between directly at the direction and directly away will cause color blending."
            },
            {
                "name": "Use Angles for Fog Dir",
                "key": "use_angles",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Primary Fog Color",
                "key": "fogcolor",
                "type": "color255",
                "default": "255 255 255",
                "desc": "The color of the fog. If fog blend is enabled, this color blends with the secondary color when not looking at the primary fog direction."
            },
            {
                "name": "Secondary Fog Color",
                "key": "fogcolor2",
                "type": "color255",
                "default": "255 255 255",
                "desc": "The secondary fog color. If fog blend is disabled, this color will never appear."
            },
            {
                "name": "Primary Fog Direction",
                "key": "fogdir",
                "type": "string",
                "default": "1 0 0",
                "desc": "If fog blend is enabled, this is the direction that shows only the primary color. Directly away is the secondary color and in-between the colors are blended."
            },
            {
                "name": "Fog Start",
                "key": "fogstart",
                "type": "string",
                "default": "500.0",
                "desc": "The distance from the player the fog starts."
            },
            {
                "name": "Fog End",
                "key": "fogend",
                "type": "string",
                "default": "2000.0",
                "desc": "The distance from the player the fog reaches the Fog Max Density keyvalue."
            },
            {
                "name": "Fog Max Density [0..1]",
                "key": "fogmaxdensity",
                "type": "float",
                "default": "1",
                "desc": "The max density the fog can get to, 0-1."
            },
            {
                "name": "Interpolate time",
                "key": "foglerptime",
                "type": "float",
                "default": "0",
                "desc": "The fade time for the StartFogTransition input."
            },
            {
                "name": "Far Z Clip Plane",
                "key": "farz",
                "type": "string",
                "default": "-1",
                "desc": "The distance at which the world will not be rendered."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Master (Has priority if multiple env_fog_controllers exist)": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "HDR Color Scale",
                "key": "hdrcolorscale",
                "type": "float",
                "default": "1",
                "desc": "Float value to multiply fog color by when running in HDR mode."
            },
            {
                "name": "Zoom Fog Scale",
                "key": "zoomfogscale",
                "type": "float",
                "default": "1",
                "desc": "How much the fog min/max values will scale the default value by when players are zoomed in (scoped)."
            }
        ],
        "inputs": [
            {
                "name": "SetStartDist",
                "type": "float",
                "desc": "Set the fog start distance."
            },
            {
                "name": "SetEndDist",
                "type": "float",
                "desc": "Set the fog end distance."
            },
            {
                "name": "SetMaxDensity",
                "type": "float",
                "desc": "Set the max density, 0 to 1"
            },
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turn the fog on."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Turn the fog off."
            },
            {
                "name": "SetColor",
                "type": "color255",
                "desc": "Set the primary fog color."
            },
            {
                "name": "SetColorSecondary",
                "type": "color255",
                "desc": "Set the secondary fog color."
            },
            {
                "name": "SetFarZ",
                "type": "integer",
                "desc": "Set the far clip plane distance."
            },
            {
                "name": "SetAngles",
                "type": "string",
                "desc": "Set the angles to use for the secondary fog direction."
            },
            {
                "name": "SetColorLerpTo",
                "type": "color255",
                "desc": "Set the primary fog color."
            },
            {
                "name": "SetColorSecondaryLerpTo",
                "type": "color255",
                "desc": "Set the secondary fog color."
            },
            {
                "name": "SetStartDistLerpTo",
                "type": "float",
                "desc": "Set the fog start distance."
            },
            {
                "name": "SetEndDistLerpTo",
                "type": "float",
                "desc": "Set the fog end distance."
            },
            {
                "name": "StartFogTransition",
                "type": "void",
                "desc": "Start fog transition."
            },
            {
                "name": "SetMaxDensityLerpTo",
                "type": "float",
                "desc": "Set max density lerp to."
            },
            {
                "name": "SetZoomFogScale",
                "type": "void",
                "desc": "Set the value the fog will scale the default value by when players are zoomed in (scoped)."
            },
            {
                "name": "ActivateAllPlayers",
                "type": "void",
                "desc": "Activates this fog controller for all players"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_funnel",
        "desc": "The suck-in effect from the HL1 Resonance Cascade sequence.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Reverse (repel particles instead of suck in)": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_global",
        "desc": "An entity to control a game-specific global states.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Global State to Set",
                "key": "globalstate",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Initial State",
                "key": "initialstate",
                "type": "choices",
                "default": "Off (0)",
                "desc": "",
                "choices": {
                    "Off": "0",
                    "On": "1",
                    "Dead": "2"
                }
            },
            {
                "name": "Counter",
                "key": "counter",
                "type": "integer",
                "default": "0",
                "desc": "An integer counter value associated with this global."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Set Initial State": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Set state of global to ON."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Set state of global to OFF."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggles state of global between ON and OFF."
            },
            {
                "name": "Remove",
                "type": "void",
                "desc": "Set state of global to DEAD."
            },
            {
                "name": "SetCounter",
                "type": "integer",
                "desc": "Sets the counter value of this global."
            },
            {
                "name": "AddToCounter",
                "type": "integer",
                "desc": "Adds to the counter value of this global. Negative numbers subtract."
            },
            {
                "name": "GetCounter",
                "type": "void",
                "desc": "Causes the Counter output to be fired, passing the current counter value for this global. This doesn't work properly."
            }
        ],
        "outputs": [
            {
                "name": "Counter",
                "type": "integer",
                "desc": "Fired in response to the GetCounter input, passing the current value of the counter."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_gunfire",
        "desc": "Gunfire Effect",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Target",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Shoot at this target. REMEMBER - this is an effect only! It does not do damage!"
            },
            {
                "name": "Min Burst Size",
                "key": "minburstsize",
                "type": "integer",
                "default": "2",
                "desc": "Minimum number of rounds in a burst."
            },
            {
                "name": "Max Burst Size",
                "key": "maxburstsize",
                "type": "integer",
                "default": "7",
                "desc": "Maximum number of rounds in a burst."
            },
            {
                "name": "Min Delay Between Bursts",
                "key": "minburstdelay",
                "type": "float",
                "default": "2",
                "desc": "Minimum delay between bursts. (seconds)"
            },
            {
                "name": "Max Delay Between Bursts",
                "key": "maxburstdelay",
                "type": "float",
                "default": "5",
                "desc": "Maximum delay between bursts. (seconds)"
            },
            {
                "name": "Rate of fire",
                "key": "rateoffire",
                "type": "float",
                "default": "10",
                "desc": "Expressed as rounds per second"
            },
            {
                "name": "Bullet spread",
                "key": "spread",
                "type": "choices",
                "default": "5 Degrees (5)",
                "desc": "The 'cone of inaccuracy' of the shots fired by this entity.",
                "choices": {
                    "1 Degree": "1",
                    "5 Degrees": "5",
                    "10 Degrees": "10",
                    "15 Degrees": "15"
                }
            },
            {
                "name": "Bullet distribution should be...",
                "key": "bias",
                "type": "choices",
                "default": "Evenly distributed (1)",
                "desc": "How to distribute bullets within the spread. Even distribution is a true scatter throughout the spread. Biased towards the outside makes the shots 'miss' the target by tending towards the outside of the spread.",
                "choices": {
                    "Evenly distributed": "1",
                    "Biased towards the outside": "-1"
                }
            },
            {
                "name": "Collision detection",
                "key": "collisions",
                "type": "choices",
                "default": "None. Cheap for performance. (0)",
                "desc": "Whether/how to handle bullet collision detection. NOTE: If you select NONE, this entity will be very cheap to use, but all bullets will stop short at their target's position in space and there will be no impact effects. Normal collision detection does the same things NPCs do when they fire their guns (except harm anything).",
                "choices": {
                    "None. Cheap for performance.": "0",
                    "Normal collision detection.": "1"
                }
            },
            {
                "name": "Shoot Sound",
                "key": "shootsound",
                "type": "sound",
                "default": "Weapon_AR2.NPC_Single",
                "desc": "Gunfire sound to make"
            },
            {
                "name": "Tracer",
                "key": "tracertype",
                "type": "choices",
                "default": "AR2 (AR2TRACER)",
                "desc": "Type of tracer to display",
                "choices": {
                    "Default": "Tracer",
                    "AR2": "AR2TRACER",
                    "None": ""
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_hudhint",
        "desc": "An entity to control the display of HUD hints. HUD hints are used to show the player what key is bound to a particular command.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {}
            },
            {
                "name": "Hint Text (localized)",
                "key": "message",
                "type": "string",
                "default": "",
                "desc": "This should be set to match the desired HUD hint entry in resource/valve_english.txt."
            }
        ],
        "inputs": [
            {
                "name": "ShowHudHint",
                "type": "void",
                "desc": "Shows the hint message."
            },
            {
                "name": "HideHudHint",
                "type": "void",
                "desc": "Hides the hint message."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_instructor_hint",
        "desc": "An entity that allows for creation and control of instructor lessons by map logic.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Replace Key",
                "key": "hint_replace_key",
                "type": "string",
                "default": "",
                "desc": "Unique name so that messages with the same key will replace each other."
            },
            {
                "name": "Target Entity",
                "key": "hint_target",
                "type": "target_destination",
                "default": "",
                "desc": "The entity to show this hint on top of. The entity used must exist on the client, info_target_instructor_hint can be parented to server only entities for this purpose."
            },
            {
                "name": "Positioning",
                "key": "hint_static",
                "type": "choices",
                "default": "Follow the Target Entity (0)",
                "desc": "Either show at the position of the Target Entity. Or show the hint directly on the hud at a fixed position.",
                "choices": {
                    "Follow the Target Entity": "0",
                    "Show on the hud": "1"
                }
            },
            {
                "name": "Allow invisible target",
                "key": "hint_allow_nodraw_target",
                "type": "choices",
                "default": "Yes (1)",
                "desc": "Do we allow the hint to follow entities with nodraw set?",
                "choices": {
                    "End immediately on nodraw": "0",
                    "Yes": "1"
                }
            },
            {
                "name": "Caption",
                "key": "hint_caption",
                "type": "string",
                "default": "",
                "desc": "The text of your hint."
            },
            {
                "name": "Activator Caption",
                "key": "hint_activator_caption",
                "type": "string",
                "default": "",
                "desc": "The text of your hint shown to only the activating player."
            },
            {
                "name": "Caption Color",
                "key": "hint_color",
                "type": "color255",
                "default": "255 255 255",
                "desc": "The color of the caption text"
            },
            {
                "name": "Show through walls",
                "key": "hint_forcecaption",
                "type": "choices",
                "default": "No (0)",
                "desc": "Do we show the caption text even if the hint is occluded by a wall?",
                "choices": {
                    "No": "0",
                    "Show when occluded": "1"
                }
            },
            {
                "name": "Onscreen Icon",
                "key": "hint_icon_onscreen",
                "type": "choices",
                "default": "Information (icon_tip)",
                "desc": "The icon to use when the hint is within the player's view.",
                "choices": {
                    "Show controls instead": "use_binding",
                    "Blank": "icon_blank",
                    "Bulb": "icon_bulb",
                    "Caution": "icon_caution",
                    "White Exclamation Mark": "icon_alert",
                    "Red Exclamation Mark": "icon_alert_red",
                    "Information": "icon_tip",
                    "Eye": "icon_skull",
                    "Interact/Pickup": "icon_interact",
                    "Button": "icon_button",
                    "Door": "icon_door",
                    "Joystick": "icon_useable_item",
                    "Simple Down Arrow": "icon_arrow_plain_white_dn",
                    "Simple Up Arrow": "icon_arrow_plain_white_up",
                    "Up Arrow": "icon_arrow_up",
                    "Right Arrow": "icon_arrow_right",
                    "Right-Click": "icon_mouseRight",
                    "Left-Click": "icon_mouseLeft",
                    "MouseWheel Up": "icon_mouseWheel_up",
                    "MouseWheel Down": "icon_mouseWheel_down",
                    "Click Scrollwheel": "icon_mouseThree",
                    "Empty Key": "icon_key_generic",
                    "Spacebar": "icon_key_wide",
                    "Right Key": "icon_key_right",
                    "Left Key": "icon_key_left",
                    "Down Key": "icon_key_down",
                    "Up Key": "icon_key_up",
                    "D-Pad": "icon_dpad",
                    "Fire": "icon_fire",
                    "Present": "icon_present"
                }
            },
            {
                "name": "Offscreen Icon",
                "key": "hint_icon_offscreen",
                "type": "choices",
                "default": "Information (icon_tip)",
                "desc": "The icon to use when the hint is outside the player's view.",
                "choices": {
                    "Blank": "icon_blank",
                    "Bulb": "icon_bulb",
                    "Caution": "icon_caution",
                    "White Exclamation Mark": "icon_alert",
                    "Red Exclamation Mark": "icon_alert_red",
                    "Information": "icon_tip",
                    "Eye": "icon_skull",
                    "Interact/Pickup": "icon_interact",
                    "Button": "icon_button",
                    "Door": "icon_door",
                    "Joystick": "icon_useable_item",
                    "Simple Down Arrow": "icon_arrow_plain_white_dn",
                    "Simple Up Arrow": "icon_arrow_plain_white_up",
                    "Up Arrow": "icon_arrow_up",
                    "Right Arrow": "icon_arrow_right",
                    "Right-Click": "icon_mouseRight",
                    "Left-Click": "icon_mouseLeft",
                    "MouseWheel Up": "icon_mouseWheel_up",
                    "MouseWheel Down": "icon_mouseWheel_down",
                    "Click Scrollwheel": "icon_mouseThree",
                    "Empty Key": "icon_key_generic",
                    "Spacebar": "icon_key_wide",
                    "Right Key": "icon_key_right",
                    "Left Key": "icon_key_left",
                    "Down Key": "icon_key_down",
                    "Up Key": "icon_key_up",
                    "D-Pad": "icon_dpad",
                    "Fire": "icon_fire",
                    "Present": "icon_present"
                }
            },
            {
                "name": "Show offscreen",
                "key": "hint_nooffscreen",
                "type": "choices",
                "default": "Show (0)",
                "desc": "When the hint is offscreen, do we show an icon and arrow?",
                "choices": {
                    "Show": "0",
                    "Don't show": "1"
                }
            },
            {
                "name": "Bound Command",
                "key": "hint_binding",
                "type": "choices",
                "default": "Unused ()",
                "desc": "If using 'show key bindings' for the onscreen icon, this field should be the command we want to show bindings for.",
                "choices": {
                    "Unused": "",
                    "Forward": "+forward",
                    "Backward": "+back",
                    "Strafe Left": "+left",
                    "strafe Right": "+right",
                    "Crouch": "+duck",
                    "Jump": "+jump",
                    "Primary Attack": "+attack",
                    "Secondary Attack": "+attack2",
                    "Use Key": "+use",
                    "Zoom In": "+zoom",
                    "Zoom Out": "-zoom"
                }
            },
            {
                "name": "Icon Height Offset",
                "key": "hint_icon_offset",
                "type": "float",
                "default": "0",
                "desc": "A height offset from the target entity's origin to display the hint"
            },
            {
                "name": "Size Pulsing",
                "key": "hint_pulseoption",
                "type": "choices",
                "default": "No Pulse (0)",
                "desc": "The icon size can pulsate",
                "choices": {
                    "No Pulse": "0",
                    "Slow Pulse": "1",
                    "Fast Pulse": "2",
                    "Urgent Pulse": "3"
                }
            },
            {
                "name": "Alpha Pulsing",
                "key": "hint_alphaoption",
                "type": "choices",
                "default": "No Pulse (0)",
                "desc": "The icon alpha can pulsate",
                "choices": {
                    "No Pulse": "0",
                    "Slow Pulse": "1",
                    "Fast Pulse": "2",
                    "Urgent Pulse": "3"
                }
            },
            {
                "name": "Shaking",
                "key": "hint_shakeoption",
                "type": "choices",
                "default": "No Shaking (0)",
                "desc": "The icon can shake",
                "choices": {
                    "No Shaking": "0",
                    "Narrow Shake": "1",
                    "Wide Shake": "2"
                }
            },
            {
                "name": "Timeout",
                "key": "hint_timeout",
                "type": "integer",
                "default": "0",
                "desc": "The automatic timeout for the hint. 0 will persist until stopped with EndHint."
            },
            {
                "name": "Display Range",
                "key": "hint_range",
                "type": "float",
                "default": "0",
                "desc": "The visible range of the hint."
            },
            {
                "name": "Gamepad Bound Command",
                "key": "hint_gamepad_binding",
                "type": "string",
                "default": "",
                "desc": "If using 'show key bindings' for the onscreen icon, this field should be the command we want to show bindings for when gamepad is enabled"
            }
        ],
        "inputs": [
            {
                "name": "ShowHint",
                "type": "string",
                "desc": "Start showing the hint. If an entity name is passed as a parameter, the hint is shown only to that entity."
            },
            {
                "name": "EndHint",
                "type": "void",
                "desc": "Stop showing the hint if it hasn't already timed out."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_lightglow",
        "desc": "An entity that puts an additive glow in the world, mostly used over light sources.",
        "bases": [
            "BaseEntityPoint",
            "RenderFields"
        ],
        "keyvalues": [
            {
                "name": "Color (R G B)",
                "key": "rendercolor",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "Vertical Size",
                "key": "verticalglowsize",
                "type": "integer",
                "default": "30",
                "desc": ""
            },
            {
                "name": "Horizontal Size",
                "key": "horizontalglowsize",
                "type": "integer",
                "default": "30",
                "desc": ""
            },
            {
                "name": "Minimum Distance",
                "key": "mindist",
                "type": "integer",
                "default": "500",
                "desc": "The distance at which this effect will be fully translucent."
            },
            {
                "name": "Maximum Distance",
                "key": "maxdist",
                "type": "integer",
                "default": "2000",
                "desc": "The distance at which this effect will be at full intensity."
            },
            {
                "name": "Outer Maximum Distance",
                "key": "outermaxdist",
                "type": "integer",
                "default": "0",
                "desc": "If larger than the maximum distance, this is the length at which the glow will fade completely out, between the span of the maximum distance and this length."
            },
            {
                "name": "Glow Proxy Geometry Size",
                "key": "glowproxysize",
                "type": "float",
                "default": "2",
                "desc": "Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space. So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered."
            },
            {
                "name": "HDR color scale.",
                "key": "hdrcolorscale",
                "type": "float",
                "default": "0.5",
                "desc": "float value to multiply sprite color by when running in HDR mode."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Visible only from front": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Color",
                "type": "color255",
                "desc": "Change the render color of the glow. Format: <Red 0-255> <Green 0-255> <Blue 0-255>"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_lightrail_endpoint",
        "desc": "Special effects for the endpoints of the lightrail.|||Special effects for the endpoints of the Unstationary Scaffold.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start On (w/ Small FX)": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Scale Small FX",
                "key": "small_fx_scale",
                "type": "float",
                "default": "1",
                "desc": "Scale of the small effect.  1 is the default size, 2 is twice that, etc."
            },
            {
                "name": "Scale Large FX",
                "key": "large_fx_scale",
                "type": "float",
                "default": "1",
                "desc": "Scale of the large effect.  1 is the default size, 2 is twice that, etc."
            }
        ],
        "inputs": [
            {
                "name": "StartCharge",
                "type": "float",
                "desc": "Start charging the endpoint from the small to large state over a specified amount of seconds."
            },
            {
                "name": "StartSmallFX",
                "type": "void",
                "desc": "Start discharging particles at the small effects state over specified number of seconds."
            },
            {
                "name": "StartLargeFX",
                "type": "void",
                "desc": "Start discharging particles at the large effects state over specified number of seconds."
            },
            {
                "name": "Stop",
                "type": "float",
                "desc": "Stops the effect at any point."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_message",
        "desc": "An entity that draws a text message on player's HUDs.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Message Text",
                "key": "message",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Play Once": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Sound Effect",
                "key": "messagesound",
                "type": "sound",
                "default": "",
                "desc": "When the message is shown, this sound effect will be played, originating from this entity."
            },
            {
                "name": "Volume 0-10",
                "key": "messagevolume",
                "type": "string",
                "default": "10",
                "desc": "Volume of the sound effect."
            },
            {
                "name": "Sound Radius",
                "key": "messageattenuation",
                "type": "choices",
                "default": "Small Radius (0)",
                "desc": "",
                "choices": {
                    "Small Radius": "0",
                    "Medium Radius": "1",
                    "Large  Radius": "2",
                    "Play Everywhere": "3"
                }
            }
        ],
        "inputs": [
            {
                "name": "ShowMessage",
                "type": "void",
                "desc": "Shows the message and plays the sound."
            }
        ],
        "outputs": [
            {
                "name": "OnShowMessage",
                "type": "void",
                "desc": "Fired when the message is activated."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_microphone",
        "desc": "An entity that acts as a microphone. It works in one of two modes. If it has a 'Speaker' set, it picks up all sounds within the specified sound range, and rebroadcasts them through the Speaker entity. In this Speaker mode, it ignores the Hears X spawnflags and does not fire the SoundLevel output. If it has no Speaker set, it measures the sound level at a point, and outputs the sound level as a value between 0 and 1. In Measuring mode, it only hears sounds that match the Hear X spawnflags.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Measure target",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "If the speaker is in Measuring mode, this is the name of the entity where the sound level is to be measured."
            },
            {
                "name": "Speaker target",
                "key": "speakername",
                "type": "target_destination",
                "default": "",
                "desc": "The name of an entity through which to play any sounds heard by this microphone. If specified, the microphone will consider itself in Speaker mode."
            },
            {
                "name": "Listen Filter",
                "key": "listenfilter",
                "type": "filterclass",
                "default": "",
                "desc": "The name of an filter entity which specifies the only entities the microphone can hear. Sounds emitted by other entities will not be heard."
            },
            {
                "name": "Speaker DSP Preset",
                "key": "speaker_dsp_preset",
                "type": "choices",
                "default": "Use Default (0)",
                "desc": "Only useful in Speaker mode. If specified, when the microphone is enabled, it'll set the global dsp_speaker preset to this value. Sounds played back through speakers will then be affected by the selected DSP.",
                "choices": {
                    "Use Default": "0",
                    "1 NO EFFECT": "50",
                    "2 (DUPLICATE OF 1)": "51",
                    "3 (DUPLICATE OF 1)": "52",
                    "4 (DUPLICATE OF 1)": "53",
                    "5 (DUPLICATE OF 1)": "54",
                    "6 SPEAKER, LOUDER": "55",
                    "7 SPEAKER VERY SMALL": "56",
                    "8 LOUDSPEAKER, ECHO": "57",
                    "9 SPEAKER SMALL": "58",
                    "10 SPEAKER TINY": "59"
                }
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Hears combat sounds": {
                        "default": true,
                        "num": 1
                    },
                    "[2] Hears world sounds": {
                        "default": true,
                        "num": 2
                    },
                    "[4] Hears player sounds": {
                        "default": true,
                        "num": 4
                    },
                    "[8] Hears bullet impacts": {
                        "default": true,
                        "num": 8
                    },
                    "[16] Swallows sounds routed through speakers": {
                        "default": false,
                        "num": 16
                    },
                    "[32] Hears explosions": {
                        "default": false,
                        "num": 32
                    },
                    "[64] Ignores non-attenuated sounds": {
                        "default": false,
                        "num": 64
                    }
                }
            },
            {
                "name": "Sensitivity (0 - 10)",
                "key": "sensitivity",
                "type": "float",
                "default": "1",
                "desc": "Microphone sensitivity, 0=deaf, 1=default, 10=extremely sensitive). Only applicable in Measuring mode."
            },
            {
                "name": "Smoothing (0 - 1)",
                "key": "smoothfactor",
                "type": "float",
                "default": "0",
                "desc": "Smoothing factor, 0=no smoothing, 1=maximum smoothing). Only applicable in Measuring mode."
            },
            {
                "name": "Maximum hearing range (0=infinite)",
                "key": "maxrange",
                "type": "float",
                "default": "240",
                "desc": "Sounds beyond this range won't be heard, irrelevant of attenuation. WARNING: setting this to zero (or a value > 1024) when the microphone is in Speaker mode can be very bad for performance!!"
            }
        ],
        "inputs": [
            {
                "name": "SetSpeakerName",
                "type": "string",
                "desc": "Set the microphone to output through a different speaker entity."
            }
        ],
        "outputs": [
            {
                "name": "SoundLevel",
                "type": "float",
                "desc": "Fired in Measuring mode whenever the sound level changes."
            },
            {
                "name": "OnRoutedSound",
                "type": "void",
                "desc": "Fired whenever a sound is routed out through the specified speaker (if any)."
            },
            {
                "name": "OnHeardSound",
                "type": "void",
                "desc": "Fired whenever this microphone hears any sound it cares about."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_movieexplosion",
        "desc": "",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_muzzleflash",
        "desc": "Muzzle Flash",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Parent Attachment",
                "key": "parentattachment",
                "type": "string",
                "default": "",
                "desc": "The name of an attachment on the parent to hierarchically attach to."
            },
            {
                "name": "Scale",
                "key": "scale",
                "type": "float",
                "default": "1",
                "desc": "Size of the muzzle flash."
            }
        ],
        "inputs": [
            {
                "name": "Fire",
                "type": "void",
                "desc": "Fires the effect once."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_particle_performance_monitor",
        "desc": "An entity for turning on and off measuring and display of particle throughput.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "TurnOnDisplay",
                "type": "void",
                "desc": "Turn on display of particle simulation benchmark"
            },
            {
                "name": "TurnOffDisplay",
                "type": "void",
                "desc": "Turn off display of particle simulation benchmark"
            },
            {
                "name": "StartMeasuring",
                "type": "void",
                "desc": "Start measuring particle simulation speed"
            },
            {
                "name": "StopMeasuring",
                "type": "void",
                "desc": "Stop measuring particle simulation speed"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_particlelight",
        "desc": "An entity that can be used to light the smoke particles emitted by env_smokestack entities. Does not light any other particle types.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Color",
                "key": "color",
                "type": "color255",
                "default": "255 0 0",
                "desc": "Color emitted by this light."
            },
            {
                "name": "Intensity",
                "key": "intensity",
                "type": "integer",
                "default": "5000",
                "desc": ""
            },
            {
                "name": "Directional",
                "key": "directional",
                "type": "boolean",
                "default": "No",
                "desc": "If this is specified, then this light will use the bump map on the particles. Each particle system can have one ambient and one directional light."
            },
            {
                "name": "Particle System Entity",
                "key": "psname",
                "type": "target_destination",
                "default": "",
                "desc": "Set this to the name of the env_smokestack that you want this light to affect."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_particlescript",
        "desc": "An entity that has special animation events that can be fired by a model with an animation inside its .qc designed for use by this entity.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Script Model",
                "key": "model",
                "type": "studio",
                "default": "",
                "desc": "Model to use for animation sequences."
            }
        ],
        "inputs": [
            {
                "name": "SetSequence",
                "type": "string",
                "desc": "Sets the script model's sequence."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_physexplosion",
        "desc": "An entity that creates an explosion at its origin. If the no-damage spawnflag is set, the explosion won't be visible, but will apply force to any physics objects within its radius.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Magnitude",
                "key": "magnitude",
                "type": "string",
                "default": "100",
                "desc": "Amount of physics force applied by the explosion. A negative value can be used to suck entities inward."
            },
            {
                "name": "Clamp Radius (0 = auto)",
                "key": "radius",
                "type": "string",
                "default": "0",
                "desc": "If specified, the radius in which the explosion damages entities. If unspecified, the radius will be based on the magnitude."
            },
            {
                "name": "Limit to Entity",
                "key": "targetentityname",
                "type": "target_destination",
                "default": "",
                "desc": "If specified, the explosion will only affect the matching entity."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] No Damage - Only Force": {
                        "default": true,
                        "num": 1
                    },
                    "[2] Push players": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Push radially - not as a sphere": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Test LOS before pushing": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Disorient player if pushed": {
                        "default": false,
                        "num": 16
                    }
                }
            },
            {
                "name": "Inner radius",
                "key": "inner_radius",
                "type": "float",
                "default": "0",
                "desc": "If not zero, the LOS is calculated from a point intersecting this sphere."
            }
        ],
        "inputs": [
            {
                "name": "Explode",
                "type": "void",
                "desc": "Trigger the explosion."
            },
            {
                "name": "ExplodeAndRemove",
                "type": "void",
                "desc": "Triggers the explosion and then removes the entity."
            }
        ],
        "outputs": [
            {
                "name": "OnPushedPlayer",
                "type": "void",
                "desc": "Fires when the player is pushed by the explosion."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_physimpact",
        "desc": "An entity that will cause a physics impact on another entity.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Pitch Yaw Roll (Y Z X)",
                "key": "angles",
                "type": "angle",
                "default": "0 0 0",
                "desc": "Direction to project the impact."
            },
            {
                "name": "Magnitude",
                "key": "magnitude",
                "type": "integer",
                "default": "100",
                "desc": "Strength of the impact."
            },
            {
                "name": "Distance",
                "key": "distance",
                "type": "integer",
                "default": "0",
                "desc": "How far to project the impact (if 0 uses a default value)."
            },
            {
                "name": "Point to Entity",
                "key": "directionentityname",
                "type": "target_destination",
                "default": "",
                "desc": "If set, 'Distance' and Angle settings are ignored and the direction and distance to the target entity will be used."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] No fall-off": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Infinite Length": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Ignore Mass": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Ignore Surface Normal When Applying Force": {
                        "default": true,
                        "num": 8
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Impact",
                "type": "void",
                "desc": "Trigger the impact"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_player_surface_trigger",
        "desc": "An entity that monitors the material of the surface the player is standing on, and fires outputs whenever it changes to/from a specific material.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Game Material to Watch",
                "key": "gamematerial",
                "type": "choices",
                "default": "Nonfunctional (air) (0)",
                "desc": "The material to watch. When the player stands on/off this material, this entity's outputs will be fired.",
                "choices": {
                    "Nonfunctional (air)": "0",
                    "A - Antlion": "65",
                    "B - Bloody Flesh": "66",
                    "C - Concrete": "67",
                    "D - Dirt": "68",
                    "E - Eggshell": "69",
                    "F - Flesh": "70",
                    "G - Grate": "71",
                    "H - Alien Flesh": "72",
                    "I - Clip": "73",
                    "J - Grass": "74",
                    "K - Snow": "75",
                    "L - Plastic": "76",
                    "M - Metal": "77",
                    "N - Sand": "78",
                    "O - Foliage": "79",
                    "P - Computer": "80",
                    "Q - Asphalt": "81",
                    "R - Brick": "82",
                    "S - Slosh": "83",
                    "T - Tile": "84",
                    "U - Cardboard": "85",
                    "V - Vent": "86",
                    "W - Wood": "87",
                    "X - Fake surfaces": "88",
                    "Y - Glass": "89",
                    "Z - Warp Shield": "90",
                    "1 - Clay": "1",
                    "2 - Plaster": "2",
                    "3 - Rock": "3",
                    "4 - Rubber": "4",
                    "5 - Sheet Rock": "5",
                    "6 - Cloth": "6",
                    "7 - Carpet": "7",
                    "8 - Paper": "8",
                    "9 - Upholstery": "9",
                    "11 - Mud": "11",
                    "12 - Sand Barrel": "12",
                    "13 - Dense Wood": "13"
                }
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Start watching the player's surface."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Stop watching the player's surface."
            }
        ],
        "outputs": [
            {
                "name": "OnSurfaceChangedToTarget",
                "type": "void",
                "desc": "Fired when the player moves onto the specified game material."
            },
            {
                "name": "OnSurfaceChangedFromTarget",
                "type": "void",
                "desc": "Fired when the player moves off the specified game material."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_player_viewfinder",
        "desc": "When enabled, the viewfinder screen overlay will turn on, like when gesturing to cameras. Applies to both Coop players.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "ShowViewFinder",
                "type": "void",
                "desc": "Shows the view finder screen overlay."
            },
            {
                "name": "HideViewFinder",
                "type": "void",
                "desc": "Hides the view finder screen overlay."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_portal_credits",
        "desc": "The entity that controls the Portal credits, loaded from 'scripts/credits.txt'.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "RollCredits",
                "type": "void",
                "desc": "Start the intro credits rolling."
            },
            {
                "name": "RollOutroCredits",
                "type": "void",
                "desc": "Start the outro credits rolling."
            },
            {
                "name": "ShowLogo",
                "type": "void",
                "desc": "Show the HL2 logo."
            },
            {
                "name": "SetLogoLength",
                "type": "float",
                "desc": "How long the logo shows."
            },
            {
                "name": "RollPortalOutroCredits",
                "type": "void",
                "desc": "Start the Portal greenscreen outro credits."
            }
        ],
        "outputs": [
            {
                "name": "OnCreditsDone",
                "type": "void",
                "desc": "Fired when the credits having finished rolling."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_projectedtexture",
        "desc": "Projected texture entity.",
        "bases": [
            "BaseEntityPoint",
            "SystemLevelChoice"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Enabled": {
                        "default": true,
                        "num": 1
                    },
                    "[2] Always Update (moving light)": {
                        "default": false,
                        "num": 2
                    }
                }
            },
            {
                "name": "target",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "target"
            },
            {
                "name": "FOV",
                "key": "lightfov",
                "type": "float",
                "default": "90.0",
                "desc": "FOV"
            },
            {
                "name": "NearZ",
                "key": "nearz",
                "type": "float",
                "default": "4.0",
                "desc": "Near Z for projected texture"
            },
            {
                "name": "FarZ",
                "key": "farz",
                "type": "float",
                "default": "750.0",
                "desc": "Far Z for projected texture"
            },
            {
                "name": "Enable Shadows",
                "key": "enableshadows",
                "type": "boolean",
                "default": "No",
                "desc": "Enables/disables shadows from this projected texture."
            },
            {
                "name": "Shadow Quality",
                "key": "shadowquality",
                "type": "choices",
                "default": "High (1)",
                "desc": "Quality of shadows.",
                "choices": {
                    "Low": "0",
                    "High": "1"
                }
            },
            {
                "name": "Light Only Target",
                "key": "lightonlytarget",
                "type": "boolean",
                "default": "No",
                "desc": "Limit flashlight effect to only effect target entity."
            },
            {
                "name": "Light World",
                "key": "lightworld",
                "type": "boolean",
                "default": "No",
                "desc": "Control whether flashlight effects static world geometry."
            },
            {
                "name": "Simple Projection",
                "key": "simpleprojection",
                "type": "boolean",
                "default": "No",
                "desc": "Indicates if this is a simple, non-light casting texture projection"
            },
            {
                "name": "Light Color",
                "key": "lightcolor",
                "type": "color255",
                "default": "255 255 255 200",
                "desc": "Light Color RGB-Intensity"
            },
            {
                "name": "Brightness Scale",
                "key": "brightnessscale",
                "type": "float",
                "default": "1.0",
                "desc": "Scale the light color by this brightness"
            },
            {
                "name": "Camera Space",
                "key": "cameraspace",
                "type": "boolean",
                "default": "No",
                "desc": "Angles are interpreted as being relative to camera."
            },
            {
                "name": "Color Transition Time",
                "key": "colortransitiontime",
                "type": "float",
                "default": "0.5",
                "desc": "Amount of time it takes for a color change to occur."
            },
            {
                "name": "Texture Name",
                "key": "texturename",
                "type": "string",
                "default": "effects/flashlight001",
                "desc": "VTF Texture to 'project' onto the enviroment. Please note that env_projectedtexture uses .vtf files directly when not in simple projection mode. The material browser is only available here to assist with finding textures since materials typically have the same name as their textures."
            },
            {
                "name": "Movie Name",
                "key": "moviename",
                "type": "string",
                "default": "",
                "desc": "Show a movie instead of a static texture. Keep empty if you want to project a static texture. BUG: Video needs a black border to avoid glitchy artifacts"
            },
            {
                "name": "Texture Frame",
                "key": "textureframe",
                "type": "integer",
                "default": "0",
                "desc": "If the VTF is multi-frame, specify the frame to use."
            },
            {
                "name": "Enable Volumetrics",
                "key": "volumetric",
                "type": "boolean",
                "default": "No",
                "desc": "Enables/disables volumetrics from this projected texture."
            },
            {
                "name": "Volumetric Intensity",
                "key": "volumetricintensity",
                "type": "float",
                "default": "1.0",
                "desc": "Sets the intensity of the volumetric lighting."
            },
            {
                "name": "Volumetric Falloff",
                "key": "volumetricfalloff",
                "type": "float",
                "default": "1.0",
                "desc": "Sets the falloff exponent of the volumetric lighting."
            },
            {
                "name": "Appearance",
                "key": "style",
                "type": "choices",
                "default": "Normal (0)",
                "desc": "",
                "choices": {
                    "Normal": "0",
                    "Fluorescent flicker": "10",
                    "Slow, strong pulse": "2",
                    "Slow pulse, noblack": "11",
                    "Gentle pulse": "5",
                    "Flicker A": "1",
                    "Flicker B": "6",
                    "Candle A": "3",
                    "Candle B": "7",
                    "Candle C": "8",
                    "Fast strobe": "4",
                    "Slow strobe": "9"
                }
            },
            {
                "name": "Custom Appearance",
                "key": "pattern",
                "type": "string",
                "default": "",
                "desc": "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turn on the texture"
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Turn off the texture"
            },
            {
                "name": "FOV",
                "type": "float",
                "desc": "Set FOV of projection."
            },
            {
                "name": "Target",
                "type": "target_destination",
                "desc": "Set a new target entity to point at."
            },
            {
                "name": "CameraSpace",
                "type": "boolean",
                "desc": "Set Camera Space."
            },
            {
                "name": "AlwaysUpdateOn",
                "type": "void",
                "desc": "Turn on per frame updating (for moving lights)"
            },
            {
                "name": "AlwaysUpdateOff",
                "type": "void",
                "desc": "Turn off per frame updating (for moving lights)"
            },
            {
                "name": "SpotlightTexture",
                "type": "string",
                "desc": "Set the spotlight texture"
            },
            {
                "name": "SetSpotlightTextureFrame",
                "type": "integer",
                "desc": "Sets the spotlight texture frame"
            },
            {
                "name": "EnableShadows",
                "type": "boolean",
                "desc": "Set if the shadows are enabled."
            },
            {
                "name": "LightColor",
                "type": "color255",
                "desc": "Change the light color/brightness"
            },
            {
                "name": "SetLightStyle",
                "type": "integer",
                "desc": "Change the lightstyle (see Appearance field for possible values)."
            },
            {
                "name": "SetPattern",
                "type": "string",
                "desc": "Set a custom pattern of light brightness for this light. The Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
            },
            {
                "name": "SetNearZ",
                "type": "float",
                "desc": "Sets the near Z distance."
            },
            {
                "name": "SetFarZ",
                "type": "float",
                "desc": "Sets the far Z distance."
            },
            {
                "name": "LightOnlyTarget",
                "type": "boolean",
                "desc": "Set if the projected texture lights the target only."
            },
            {
                "name": "LightWorld",
                "type": "boolean",
                "desc": "Set if the projected texture lights the world and static geometry."
            },
            {
                "name": "EnableVolumetrics",
                "type": "void",
                "desc": "Enables volumetrics."
            },
            {
                "name": "DisableVolumetrics",
                "type": "void",
                "desc": "Disables volumetrics."
            },
            {
                "name": "SetVolumetricIntensity",
                "type": "float",
                "desc": "Sets the volumetric lighting's intensity."
            },
            {
                "name": "SetVolumetricFalloff",
                "type": "float",
                "desc": "Sets the volumetric lighting's falloff exponent."
            },
            {
                "name": "SetBrightnessScale",
                "type": "float",
                "desc": "Sets the brightness."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_rockettrail",
        "desc": "Continuous rocket flame for HL2 RPG missiles.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_screeneffect",
        "desc": "Allows screenspace effects to be played on the player's view.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Effect Type",
                "key": "type",
                "type": "choices",
                "default": "Advisor Stun (0)",
                "desc": "Which effect to use.",
                "choices": {
                    "Advisor Stun": "0",
                    "Intro Blur": "1",
                    "Groggy Vision": "2"
                }
            }
        ],
        "inputs": [
            {
                "name": "StartEffect",
                "type": "float",
                "desc": "Start the effect with the duration in seconds as the passed parameter."
            },
            {
                "name": "StopEffect",
                "type": "float",
                "desc": "Stop the effect."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_screenoverlay",
        "desc": "An entity that can display and control a set of screen overlays, to be displayed over the player's view. Useful for view effects like drunkenness, or teleporter afterimages, etc.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Overlay Name 1",
                "key": "overlayname1",
                "type": "material",
                "default": "",
                "desc": "Name of the first overlay material to display."
            },
            {
                "name": "Overlay Duration 1",
                "key": "overlaytime1",
                "type": "float",
                "default": "1.0",
                "desc": "Amount of time that the first overlay should be displayed for, after which it will begin showing the second overlay."
            },
            {
                "name": "Overlay Name 2",
                "key": "overlayname2",
                "type": "material",
                "default": "",
                "desc": "Name of the second overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
            },
            {
                "name": "Overlay Duration 2",
                "key": "overlaytime2",
                "type": "float",
                "default": "1.0",
                "desc": "Amount of time that the second overlay should be displayed for, after which it will begin showing the third overlay."
            },
            {
                "name": "Overlay Name 3",
                "key": "overlayname3",
                "type": "material",
                "default": "",
                "desc": "Name of the third overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
            },
            {
                "name": "Overlay Duration 3",
                "key": "overlaytime3",
                "type": "float",
                "default": "1.0",
                "desc": "Amount of time that the third overlay should be displayed for, after which it will begin showing the fourth overlay."
            },
            {
                "name": "Overlay Name 4",
                "key": "overlayname4",
                "type": "material",
                "default": "",
                "desc": "Name of the fourth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
            },
            {
                "name": "Overlay Duration 4",
                "key": "overlaytime4",
                "type": "float",
                "default": "1.0",
                "desc": "Amount of time that the fourth overlay should be displayed for, after which it will begin showing the fifth overlay."
            },
            {
                "name": "Overlay Name 5",
                "key": "overlayname5",
                "type": "material",
                "default": "",
                "desc": "Name of the fifth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
            },
            {
                "name": "Overlay Duration 5",
                "key": "overlaytime5",
                "type": "float",
                "default": "1.0",
                "desc": "Amount of time that the fifth overlay should be displayed for, after which it will begin showing the sixth overlay."
            },
            {
                "name": "Overlay Name 6",
                "key": "overlayname6",
                "type": "material",
                "default": "",
                "desc": "Name of the sixth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
            },
            {
                "name": "Overlay Duration 6",
                "key": "overlaytime6",
                "type": "float",
                "default": "1.0",
                "desc": "Amount of time that the sixth overlay should be displayed for, after which it will begin showing the seventh overlay."
            },
            {
                "name": "Overlay Name 7",
                "key": "overlayname7",
                "type": "material",
                "default": "",
                "desc": "Name of the seventh overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
            },
            {
                "name": "Overlay Duration 7",
                "key": "overlaytime7",
                "type": "float",
                "default": "1.0",
                "desc": "Amount of time that the seventh overlay should be displayed for, after which it will begin showing the eighth overlay."
            },
            {
                "name": "Overlay Name 8",
                "key": "overlayname8",
                "type": "material",
                "default": "",
                "desc": "Name of the eighth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
            },
            {
                "name": "Overlay Duration 8",
                "key": "overlaytime8",
                "type": "float",
                "default": "1.0",
                "desc": "Amount of time that the eighth overlay should be displayed for, after which it will begin showing the ninth overlay."
            },
            {
                "name": "Overlay Name 9",
                "key": "overlayname9",
                "type": "material",
                "default": "",
                "desc": "Name of the ninth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
            },
            {
                "name": "Overlay Duration 9",
                "key": "overlaytime9",
                "type": "float",
                "default": "1.0",
                "desc": "Amount of time that the ninth overlay should be displayed for, after which it will begin showing the tenth overlay."
            },
            {
                "name": "Overlay Name 10",
                "key": "overlayname10",
                "type": "material",
                "default": "",
                "desc": "Name of the tenth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
            },
            {
                "name": "Overlay Duration 10",
                "key": "overlaytime10",
                "type": "float",
                "default": "1.0",
                "desc": "Amount of time that the tenth overlay should be displayed for, after which this entity will stop displaying overlays."
            }
        ],
        "inputs": [
            {
                "name": "StartOverlays",
                "type": "void",
                "desc": "Start displaying the first overlay."
            },
            {
                "name": "StopOverlays",
                "type": "void",
                "desc": "Stop displaying any overlays."
            },
            {
                "name": "SwitchOverlay",
                "type": "float",
                "desc": "Switch to displaying a specific overlay. Pass in the desired overlay number in the parameter."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_shake",
        "desc": "An entity to control screen shake on players.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] GlobalShake": {
                        "default": false,
                        "num": 1
                    },
                    "[4] In Air": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Physics": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Ropes": {
                        "default": false,
                        "num": 16
                    },
                    "[32] DON'T shake view (for shaking ropes or physics only)": {
                        "default": false,
                        "num": 32
                    },
                    "[64] DON'T Rumble Controller": {
                        "default": false,
                        "num": 64
                    }
                }
            },
            {
                "name": "Amplitude (0-16)",
                "key": "amplitude",
                "type": "float",
                "default": "4",
                "desc": "The amount of noise in the screen shake. Should be a range between 0 and 16."
            },
            {
                "name": "Effect Radius",
                "key": "radius",
                "type": "float",
                "default": "500",
                "desc": "The radius around this entity in which to affect players."
            },
            {
                "name": "Duration (seconds)",
                "key": "duration",
                "type": "float",
                "default": "1",
                "desc": "The length of time in which to shake the player's screens."
            },
            {
                "name": "Frequency",
                "key": "frequency",
                "type": "float",
                "default": "2.5",
                "desc": "The frequency used to apply the screen shake. Should be a value between 0 and 255, where 0.1 = jerk, and 255.0 = rumble."
            }
        ],
        "inputs": [
            {
                "name": "Amplitude",
                "type": "string",
                "desc": "Set the amplitude (0-16)"
            },
            {
                "name": "Frequency",
                "type": "string",
                "desc": "Set the frequence. Should be a value between 0 and 255, where 0.1 = jerk, and 255.0 = rumble."
            },
            {
                "name": "StartShake",
                "type": "void",
                "desc": "Start the shake."
            },
            {
                "name": "StopShake",
                "type": "void",
                "desc": "Stop the shake."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_smokestack",
        "desc": "An entity that spits out a constant stream of smoke. See particlezoo.vmf for sample usage. You can place up to two env_particlelight entities near the smoke stack to add ambient light to its particles.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Initial State",
                "key": "initialstate",
                "type": "choices",
                "default": "Off (0)",
                "desc": "",
                "choices": {
                    "Off": "0",
                    "On": "1"
                }
            },
            {
                "name": "Spread at the base",
                "key": "basespread",
                "type": "integer",
                "default": "20",
                "desc": "Amount of random spread in the origins of the smoke particles when they're spawned."
            },
            {
                "name": "Spread Speed",
                "key": "spreadspeed",
                "type": "integer",
                "default": "15",
                "desc": "Amount of random spread in the velocity of the smoke particles after they're spawned."
            },
            {
                "name": "Speed",
                "key": "speed",
                "type": "integer",
                "default": "30",
                "desc": "The speed at which the smoke particles move after they're spawned."
            },
            {
                "name": "Particle start size",
                "key": "startsize",
                "type": "integer",
                "default": "20",
                "desc": "Size of the smoke particles when they're first emitted."
            },
            {
                "name": "Particle end size",
                "key": "endsize",
                "type": "integer",
                "default": "30",
                "desc": "Size of the smoke particles at the point they fade out completely."
            },
            {
                "name": "Emission rate",
                "key": "rate",
                "type": "integer",
                "default": "20",
                "desc": "Rate at which to emit smoke particles (i.e. particles to emit per second)."
            },
            {
                "name": "Length of smoke trail",
                "key": "jetlength",
                "type": "integer",
                "default": "180",
                "desc": "Length of the smokestack. Lifetime of the smoke particles is derived from this & particle speed."
            },
            {
                "name": "Wind X/Y Angle",
                "key": "windangle",
                "type": "integer",
                "default": "0",
                "desc": "This specifies the wind direction. It is an angle in the XY plane. WindSpeed specifies the strength of the wind."
            },
            {
                "name": "Wind Speed",
                "key": "windspeed",
                "type": "integer",
                "default": "0",
                "desc": "The strength of the wind."
            },
            {
                "name": "Particle material",
                "key": "smokematerial",
                "type": "material",
                "default": "particle/SmokeStack.vmt",
                "desc": "Material of the smoke particles emitted by this stack."
            },
            {
                "name": "Twist",
                "key": "twist",
                "type": "integer",
                "default": "0",
                "desc": "The amount, in degrees per second, that the smoke particles twist around the origin."
            },
            {
                "name": "Roll Speed",
                "key": "roll",
                "type": "float",
                "default": "0",
                "desc": "Amount of roll in degrees per second."
            },
            {
                "name": "Base Color (R G B)",
                "key": "rendercolor",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "Translucency",
                "key": "renderamt",
                "type": "integer",
                "default": "255",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turn on the smokestack."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Turn off the smokestack."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggles the smokestack between on and off state."
            },
            {
                "name": "JetLength",
                "type": "integer",
                "desc": "Set the length of the smoke trail."
            },
            {
                "name": "Rate",
                "type": "integer",
                "desc": "Set the rate at which to emit smoke particles (particles per second)."
            },
            {
                "name": "Speed",
                "type": "integer",
                "desc": "Set the speed at which the smoke particles move after they're spawned."
            },
            {
                "name": "SpreadSpeed",
                "type": "integer",
                "desc": "Set the amount of random spread in the velocity of the smoke particles after they're spawned."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_smoketrail",
        "desc": "An entity that creates a smoke trail.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Sprite Opacity",
                "key": "opacity",
                "type": "float",
                "default": "0.75",
                "desc": "Opacity of the sprites (range from 0 - 1)."
            },
            {
                "name": "Spawn Rate",
                "key": "spawnrate",
                "type": "float",
                "default": "20",
                "desc": "Number of particles to emit each second."
            },
            {
                "name": "Particle Life Time",
                "key": "lifetime",
                "type": "float",
                "default": "5.0",
                "desc": "Number of seconds until each particle dies."
            },
            {
                "name": "Start Color",
                "key": "startcolor",
                "type": "color255",
                "default": "192 192 192",
                "desc": "Starting color of the emitted particles."
            },
            {
                "name": "End Color",
                "key": "endcolor",
                "type": "color255",
                "default": "160 160 160",
                "desc": "Ending color of the emitted particles."
            },
            {
                "name": "Emitter Life Time",
                "key": "emittime",
                "type": "float",
                "default": "0",
                "desc": "Number of seconds until the env_smoketrail stops emitting particles. 0 means never stop emitting particles."
            },
            {
                "name": "Minimum Random Speed",
                "key": "minspeed",
                "type": "float",
                "default": "10",
                "desc": "Minimum randomly-directed speed to use for emitted particles."
            },
            {
                "name": "Maximum Random Speed",
                "key": "maxspeed",
                "type": "float",
                "default": "20",
                "desc": "Maximum randomly-directed speed to use for emitted particles."
            },
            {
                "name": "Minimum Directed Speed",
                "key": "mindirectedspeed",
                "type": "float",
                "default": "0",
                "desc": "Minimum speed along the env_smoketrail's forward direction (x axis) to use for emitted particles."
            },
            {
                "name": "Maximum Directed Speed",
                "key": "maxdirectedspeed",
                "type": "float",
                "default": "0",
                "desc": "Maximum speed along the env_smoketrail's forward direction (x axis) to use for emitted particles."
            },
            {
                "name": "Starting particle size",
                "key": "startsize",
                "type": "float",
                "default": "15",
                "desc": "Starting particle size."
            },
            {
                "name": "Ending particle size",
                "key": "endsize",
                "type": "float",
                "default": "50",
                "desc": "Ending particle size."
            },
            {
                "name": "Spawn radius",
                "key": "spawnradius",
                "type": "float",
                "default": "15",
                "desc": "Distance from env_smoketrail at which particles are emitted."
            },
            {
                "name": "Fire Sprite",
                "key": "firesprite",
                "type": "sprite",
                "default": "sprites/firetrail.spr",
                "desc": ""
            },
            {
                "name": "Smoke Puff",
                "key": "smokesprite",
                "type": "sprite",
                "default": "sprites/whitepuff.spr",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_soundscape",
        "desc": "An entity to control sound in an area. The active soundscape at any time is the last one that had line-of-sight to the player, and was within the radius.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Radius",
                "key": "radius",
                "type": "integer",
                "default": "128",
                "desc": "If set to -1, then the player can hear the soundscape as long as they can see it (regardless of distance to it)."
            },
            {
                "name": "Soundscape",
                "key": "soundscape",
                "type": "choices",
                "default": "Nothing (Nothing)",
                "desc": "The name of the soundscape to use. Corresponds to an entry in the soundscapes*.txt file in the scripts/ directory.",
                "choices": {
                    "Nothing": "Nothing",
                    "Automatic": "Automatic",
                    "Automatic (dialog)": "Automatic_Dialog",
                    "Indoor": "GenericIndoor",
                    "Outdoor": "GenericOutdoor"
                }
            },
            {
                "name": "Sound Position 0",
                "key": "position0",
                "type": "target_destination",
                "default": "",
                "desc": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."
            },
            {
                "name": "Sound Position 1",
                "key": "position1",
                "type": "target_destination",
                "default": "",
                "desc": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."
            },
            {
                "name": "Sound Position 2",
                "key": "position2",
                "type": "target_destination",
                "default": "",
                "desc": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."
            },
            {
                "name": "Sound Position 3",
                "key": "position3",
                "type": "target_destination",
                "default": "",
                "desc": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."
            },
            {
                "name": "Sound Position 4",
                "key": "position4",
                "type": "target_destination",
                "default": "",
                "desc": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."
            },
            {
                "name": "Sound Position 5",
                "key": "position5",
                "type": "target_destination",
                "default": "",
                "desc": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."
            },
            {
                "name": "Sound Position 6",
                "key": "position6",
                "type": "target_destination",
                "default": "",
                "desc": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."
            },
            {
                "name": "Sound Position 7",
                "key": "position7",
                "type": "target_destination",
                "default": "",
                "desc": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable the soundscape."
            },
            {
                "name": "Disabled",
                "type": "void",
                "desc": "Disable the soundscape."
            },
            {
                "name": "ToggleEnabled",
                "type": "void",
                "desc": "Toggle the soundscape enabled state."
            }
        ],
        "outputs": [
            {
                "name": "OnPlay",
                "type": "void",
                "desc": "Fired when this soundscape becomes the active one."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_soundscape_proxy",
        "desc": "An entity that acts like a soundscape but gets all of its sound parameters from another env_soundscape entity.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Soundscape Entity",
                "key": "mainsoundscapename",
                "type": "target_destination",
                "default": "",
                "desc": "The soundscape to get all sound parameters from."
            },
            {
                "name": "Radius",
                "key": "radius",
                "type": "integer",
                "default": "128",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable the soundscape."
            },
            {
                "name": "Disabled",
                "type": "void",
                "desc": "Disable the soundscape."
            },
            {
                "name": "ToggleEnabled",
                "type": "void",
                "desc": "Toggle the soundscape enabled state."
            }
        ],
        "outputs": [
            {
                "name": "OnPlay",
                "type": "void",
                "desc": "Fired when this soundscape becomes the active one."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_spark",
        "desc": "An entity used to create sparks at its origin.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Max Delay",
                "key": "maxdelay",
                "type": "string",
                "default": "0",
                "desc": "The longest delay between sparks (in seconds)."
            },
            {
                "name": "Magnitude",
                "key": "magnitude",
                "type": "choices",
                "default": "Small (1)",
                "desc": "The size of the sparks.",
                "choices": {
                    "Small": "1",
                    "Medium": "2",
                    "Large": "5",
                    "Huge": "8"
                }
            },
            {
                "name": "Spark Trail Length",
                "key": "traillength",
                "type": "choices",
                "default": "Short (1)",
                "desc": "",
                "choices": {
                    "Short": "1",
                    "Medium": "2",
                    "Long": "3"
                }
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[64] Start ON": {
                        "default": false,
                        "num": 64
                    },
                    "[128] Glow": {
                        "default": false,
                        "num": 128
                    },
                    "[256] Silent": {
                        "default": false,
                        "num": 256
                    },
                    "[512] Directional": {
                        "default": false,
                        "num": 512
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "StartSpark",
                "type": "void",
                "desc": "Start the spark effect."
            },
            {
                "name": "StopSpark",
                "type": "void",
                "desc": "Stop the spark effect."
            },
            {
                "name": "ToggleSpark",
                "type": "void",
                "desc": "Toggle the on/off state of the spark effect."
            },
            {
                "name": "SparkOnce",
                "type": "void",
                "desc": "Spark once."
            }
        ],
        "outputs": [
            {
                "name": "OnSpark",
                "type": "void",
                "desc": "Fired every time this entity sparks."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_speaker",
        "desc": "Announcement Speaker",
        "bases": [
            "BaseEntityPoint",
            "ResponseContext"
        ],
        "keyvalues": [
            {
                "name": "Min Delay Between Announcements",
                "key": "delaymin",
                "type": "string",
                "default": "15",
                "desc": ""
            },
            {
                "name": "Max Delay Between Announcements",
                "key": "delaymax",
                "type": "string",
                "default": "135",
                "desc": ""
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start Silent": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Play Everywhere": {
                        "default": false,
                        "num": 2
                    }
                }
            },
            {
                "name": "Context rule script",
                "key": "rulescript",
                "type": "string",
                "default": "",
                "desc": "Script file containing rules for playing appropriate sounds."
            },
            {
                "name": "Concept name",
                "key": "concept",
                "type": "string",
                "default": "",
                "desc": "High level concept name used as primary search key."
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turn on the random announcements."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Turn off the random announcements."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the random announcements off and on."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_splash",
        "desc": "An entity that creates a splash effect at its origin. If the 'find water surface' spawnflag is set, it will instead trace down below itself to find the water surface on which to create splashes.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Scale of the splash",
                "key": "scale",
                "type": "float",
                "default": "8.0",
                "desc": ""
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Automatically find water surface (place entity above water)": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Diminish with depth (diminished completely in 10 feet of water)": {
                        "default": true,
                        "num": 2
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Splash",
                "type": "void",
                "desc": "Create a splash effect."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_sporeexplosion",
        "desc": "Bugbait Spore Effect",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Spawn Rate (as percentage)",
                "key": "spawnrate",
                "type": "float",
                "default": "25",
                "desc": "How dense the spore effect is"
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_sprite",
        "desc": "An entity that controls the drawing of a sprite in the world.",
        "bases": [
            "BaseEntityPoint",
            "RenderFields",
            "SystemLevelChoice"
        ],
        "keyvalues": [
            {
                "name": "Framerate",
                "key": "framerate",
                "type": "float",
                "default": "10.0",
                "desc": "Rate at which the sprite should animate, if at all."
            },
            {
                "name": "Sprite Name",
                "key": "model",
                "type": "sprite",
                "default": "sprites/glow01.spr",
                "desc": "Material of the sprite to be drawn."
            },
            {
                "name": "Scale",
                "key": "scale",
                "type": "float",
                "default": "0.25",
                "desc": "Scale multiplier of the sprite."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start on": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Play Once": {
                        "default": false,
                        "num": 2
                    }
                }
            },
            {
                "name": "Render Mode",
                "key": "rendermode",
                "type": "choices",
                "default": "World Space Glow (9)",
                "desc": "Specify the sprite rendering behaviour.",
                "choices": {
                    "Glow": "3",
                    "World Space Glow": "9",
                    "Normal": "0",
                    "Color": "1",
                    "Texture": "2",
                    "Solid": "4",
                    "Additive": "5",
                    "Additive Fractional Frame": "7",
                    "Don't Render": "10"
                }
            },
            {
                "name": "Size of Glow Proxy Geometry.",
                "key": "glowproxysize",
                "type": "float",
                "default": "2.0",
                "desc": "Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space. So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered."
            },
            {
                "name": "HDR color scale.",
                "key": "hdrcolorscale",
                "type": "float",
                "default": "0.7",
                "desc": "float value to multiply sprite color by when running in HDR mode."
            }
        ],
        "inputs": [
            {
                "name": "ColorRedValue",
                "type": "float",
                "desc": "Sets the red color channel's value (0 - 255)."
            },
            {
                "name": "ColorGreenValue",
                "type": "float",
                "desc": "Sets the green color channel's value (0 - 255)."
            },
            {
                "name": "ColorBlueValue",
                "type": "float",
                "desc": "Sets the blue color channel's value (0 - 255)."
            },
            {
                "name": "SetScale",
                "type": "float",
                "desc": "Set the sprite's scale (0 - 8.0)."
            },
            {
                "name": "HideSprite",
                "type": "void",
                "desc": "Hide the sprite. Won't be drawn until the 'ShowSprite' input is received."
            },
            {
                "name": "ShowSprite",
                "type": "void",
                "desc": "Show the sprite."
            },
            {
                "name": "ToggleSprite",
                "type": "void",
                "desc": "Toggle the sprite between hidden and shown."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_spritetrail",
        "desc": "A magical trail you can parent to anything you heart desires.",
        "bases": [
            "BaseEntityPoint",
            "RenderFields"
        ],
        "keyvalues": [
            {
                "name": "Lifetime",
                "key": "lifetime",
                "type": "float",
                "default": "0.5",
                "desc": ""
            },
            {
                "name": "Start Width",
                "key": "startwidth",
                "type": "float",
                "default": "8.0",
                "desc": ""
            },
            {
                "name": "End Width",
                "key": "endwidth",
                "type": "float",
                "default": "1.0",
                "desc": ""
            },
            {
                "name": "Sprite Name",
                "key": "spritename",
                "type": "sprite",
                "default": "sprites/bluelaser1.vmt",
                "desc": ""
            },
            {
                "name": "FX Amount (0 - 255)",
                "key": "renderamt",
                "type": "integer",
                "default": "255",
                "desc": "The FX amount is used by the selected Render Mode."
            },
            {
                "name": "FX Color (R G B)",
                "key": "rendercolor",
                "type": "color255",
                "default": "255 255 255",
                "desc": "The FX color is used by the selected Render Mode."
            },
            {
                "name": "Render Mode",
                "key": "rendermode",
                "type": "choices",
                "default": "Additive (5)",
                "desc": "",
                "choices": {
                    "Normal": "0",
                    "Solid": "4",
                    "Additive": "5"
                }
            }
        ],
        "inputs": [
            {
                "name": "ColorRedValue",
                "type": "float",
                "desc": "Sets the red color channel's value (0 - 255)."
            },
            {
                "name": "ColorGreenValue",
                "type": "float",
                "desc": "Sets the green color channel's value (0 - 255)."
            },
            {
                "name": "ColorBlueValue",
                "type": "float",
                "desc": "Sets the blue color channel's value (0 - 255)."
            },
            {
                "name": "SetScale",
                "type": "float",
                "desc": "Set the sprite's scale (0 - 8.0)."
            },
            {
                "name": "HideSprite",
                "type": "void",
                "desc": "Hide the sprite. Won't be drawn until the 'ShowSprite' input is received."
            },
            {
                "name": "ShowSprite",
                "type": "void",
                "desc": "Show the sprite."
            },
            {
                "name": "ToggleSprite",
                "type": "void",
                "desc": "Toggle the sprite between hidden and shown."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_steam",
        "desc": "An entity used to create a jet of steam.",
        "bases": [
            "BaseEntityPoint",
            "RenderFields"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Emissive": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Start Enabled",
                "key": "initialstate",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Particle Type",
                "key": "type",
                "type": "choices",
                "default": "Normal (0)",
                "desc": "",
                "choices": {
                    "Normal": "0",
                    "Heat Wave": "1"
                }
            },
            {
                "name": "Spread Speed",
                "key": "spreadspeed",
                "type": "integer",
                "default": "15",
                "desc": "The amount of random spread in the particle's velocity after they spawn."
            },
            {
                "name": "Speed",
                "key": "speed",
                "type": "integer",
                "default": "120",
                "desc": "The default speed at which the particles move after they spawn."
            },
            {
                "name": "Particle start size",
                "key": "startsize",
                "type": "integer",
                "default": "10",
                "desc": "The initial size of the particles after they spawn."
            },
            {
                "name": "Particle end size",
                "key": "endsize",
                "type": "integer",
                "default": "25",
                "desc": "The size of the particles at the point at which they are removed."
            },
            {
                "name": "Emission rate",
                "key": "rate",
                "type": "integer",
                "default": "26",
                "desc": "The rate of particle emission. i.e. particles per second."
            },
            {
                "name": "Color (R G B)",
                "key": "rendercolor",
                "type": "color255",
                "default": "60 65 68",
                "desc": "The color of the steam. Only has an effect if the Emissive flag is on, but can otherwise be used to set the color shown in Hammer."
            },
            {
                "name": "Length of steam jet",
                "key": "jetlength",
                "type": "integer",
                "default": "80",
                "desc": "The length of the jet determines the lifetime of each particle."
            },
            {
                "name": "Translucency",
                "key": "renderamt",
                "type": "integer",
                "default": "255",
                "desc": ""
            },
            {
                "name": "Spin Speed",
                "key": "rollspeed",
                "type": "float",
                "default": "8",
                "desc": "How fast do the particles spin"
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turns the steam jet on."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Turns the steam jet off."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggles the steam jet between on and off."
            },
            {
                "name": "JetLength",
                "type": "integer",
                "desc": "Sets the length of steam jet."
            },
            {
                "name": "Rate",
                "type": "integer",
                "desc": "Sets the particle emission rate in particles per second."
            },
            {
                "name": "Speed",
                "type": "integer",
                "desc": "Sets the default speed of the particles in units per second."
            },
            {
                "name": "SpreadSpeed",
                "type": "integer",
                "desc": "Sets the spread speed in units per second."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_sun",
        "desc": "An entity to control & draw a sun effect in the sky.",
        "bases": [
            "BaseEntityPoint",
            "RenderFields",
            "SystemLevelChoice"
        ],
        "keyvalues": [
            {
                "name": "Viewer entity",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Name of an entity used to determine where the sun is in the skybox. The sun should be lined up on a line from this entity to the env_sun entity."
            },
            {
                "name": "UseAngles",
                "key": "use_angles",
                "type": "boolean",
                "default": "No",
                "desc": "The old way to orient env_sun is to point it at a target. The new way is to specify the angles. If you use the new way, set this property to YES."
            },
            {
                "name": "Pitch",
                "key": "pitch",
                "type": "integer",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Sun Color (R G B)",
                "key": "rendercolor",
                "type": "color255",
                "default": "100 80 80",
                "desc": ""
            },
            {
                "name": "Overlay Color (R G B)",
                "key": "overlaycolor",
                "type": "color255",
                "default": "0 0 0",
                "desc": "A value of 0 0 0 will act the old way."
            },
            {
                "name": "Size",
                "key": "size",
                "type": "integer",
                "default": "16",
                "desc": ""
            },
            {
                "name": "Overlay Size",
                "key": "overlaysize",
                "type": "integer",
                "default": "-1",
                "desc": "A value of -1 means the overlay will act the old way."
            },
            {
                "name": "Material Name",
                "key": "material",
                "type": "sprite",
                "default": "sprites/light_glow02_add_noz",
                "desc": "Material of the inner glow."
            },
            {
                "name": "Overlay Material Name",
                "key": "overlaymaterial",
                "type": "sprite",
                "default": "sprites/light_glow02_add_noz",
                "desc": "Material of the overlay glow."
            },
            {
                "name": "HDR color scale.",
                "key": "hdrcolorscale",
                "type": "float",
                "default": "0.5",
                "desc": "float value to multiply sprite color by when running in HDR mode."
            },
            {
                "name": "Glow Distance Scale",
                "key": "glowdistancescale",
                "type": "float",
                "default": "0.99",
                "desc": "Scales the distance used to test for sun glow occlusion, 0.99 will act the old way."
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Enable sun rendering."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Disable sun rendering."
            },
            {
                "name": "SetColor",
                "type": "color255",
                "desc": "Change the sun's color. Format: <Red 0-255> <Green 0-255> <Blue 0-255>"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_surface_teleport",
        "desc": "Teleports the player to the Remote Destination when they stand on a specified material.",
        "bases": [
            "StaticTargetName"
        ],
        "keyvalues": [
            {
                "name": "Remote Destination",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The entity specifying the point to which the player should be teleported."
            },
            {
                "name": "Game Material to Watch",
                "key": "gamematerial",
                "type": "choices",
                "default": "None (player's in the air) (0)",
                "desc": "The material to watch. When the player stands on this material, they will get teleported",
                "choices": {
                    "None (player's in the air)": "0",
                    "A - Antlion": "65",
                    "B - Bloody Flesh": "66",
                    "C - Concrete": "67",
                    "D - Dirt": "68",
                    "E - Eggshell": "69",
                    "F - Flesh": "70",
                    "G - Grate": "71",
                    "H - Alien Flesh": "72",
                    "I - Clip": "73",
                    "J - Grass": "74",
                    "K - Snow": "75",
                    "L - Plastic": "76",
                    "M - Metal": "77",
                    "N - Sand": "78",
                    "O - Foliage": "79",
                    "P - Computer": "80",
                    "Q - Asphalt": "81",
                    "R - Brick": "82",
                    "S - Slosh": "83",
                    "T - Tile": "84",
                    "U - Cardboard": "85",
                    "V - Vent": "86",
                    "W - Wood": "87",
                    "X - Fake surfaces": "88",
                    "Y - Glass": "89",
                    "Z - Warp Shield": "90",
                    "1 - Clay": "1",
                    "2 - Plaster": "2",
                    "3 - Rock": "3",
                    "4 - Rubber": "4",
                    "5 - Sheet Rock": "5",
                    "6 - Cloth": "6",
                    "7 - Carpet": "7",
                    "8 - Paper": "8",
                    "9 - Upholstery": "9",
                    "11 - Mud": "11",
                    "12 - Sand Barrel": "12",
                    "13 - Dense Wood": "13"
                }
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Start watching the player's surface."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Stop watching the player's surface."
            }
        ],
        "outputs": [
            {
                "name": "OnSurfaceChangedToTarget",
                "type": "void",
                "desc": "Fired when the player moves onto the specified game material."
            },
            {
                "name": "OnSurfaceChangedFromTarget",
                "type": "void",
                "desc": "Fired when the player moves off the specified game material."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_texturetoggle",
        "desc": "An entity that allows you to change the textures on other brush-built entities, or on overlays.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Target Brush or Overlay name.",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "IncrementTextureIndex",
                "type": "void",
                "desc": "Increments target brush's current texture frame by one."
            },
            {
                "name": "SetTextureIndex",
                "type": "integer",
                "desc": "Sets target brush's texture frame to the specified index."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_tilt",
        "desc": "An entity to control screen tilt on players.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] GlobalTilt": {
                        "default": false,
                        "num": 1
                    },
                    "[128] Ease in/out": {
                        "default": false,
                        "num": 128
                    }
                }
            },
            {
                "name": "Effect Radius",
                "key": "radius",
                "type": "float",
                "default": "500",
                "desc": "The radius around this entity in which to affect players."
            },
            {
                "name": "Duration (seconds)",
                "key": "duration",
                "type": "float",
                "default": "1",
                "desc": "The length of time in which to tilt the player's screens."
            },
            {
                "name": "Tilt time (seconds)",
                "key": "tilttime",
                "type": "float",
                "default": "2.5",
                "desc": "How long it takes to reach full tilt."
            }
        ],
        "inputs": [
            {
                "name": "StartTilt",
                "type": "void",
                "desc": "Start the shake."
            },
            {
                "name": "StopTilt",
                "type": "void",
                "desc": "Stop the tilt."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_tonemap_controller",
        "desc": "An entity that controls the HDR tonemapping for the player. Think of it as a method of controlling the exposure of the player's eyes.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Master (Has priority if multiple env_tonemap_controllers exist)": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "SetTonemapScale",
                "type": "integer",
                "desc": "Set the player's tonemap scale. It should be a value between 0 and 2, where 0 is the eyes fully closed, 1 is use the unchanged autoexposure (default), and 2 is the eye fully wide open."
            },
            {
                "name": "BlendTonemapScale",
                "type": "string",
                "desc": "Blend from the player's current tonemap scale to a new one. The parameter syntax is as follows: <target tonemap scale> <blend duration>. For example: '0.5 10' would blend from the current tonemap scale to 0.5 over a period of 10 seconds. Tonemap scale is a value between 0 and 2, where 0 is the eyes fully closed, 1 is use the unchanged autoexposure (default), and 2 is the eye fully wide open."
            },
            {
                "name": "UseDefaultAutoExposure",
                "type": "void",
                "desc": "Revert to using the default tonemap auto exposure."
            },
            {
                "name": "SetAutoExposureMin",
                "type": "float",
                "desc": "Set a custom tonemap auto exposure minimum."
            },
            {
                "name": "SetAutoExposureMax",
                "type": "float",
                "desc": "Set a custom tonemap auto exposure maximum."
            },
            {
                "name": "SetBloomScale",
                "type": "float",
                "desc": "Set a custom bloom scale."
            },
            {
                "name": "UseDefaultBloomScale",
                "type": "void",
                "desc": "Revert to using the default bloom scale."
            },
            {
                "name": "SetBloomScaleRange",
                "type": "string",
                "desc": "Specify a base and minimum bloom scale. Format is <max bloom> <min bloom>."
            },
            {
                "name": "SetTonemapRate",
                "type": "float",
                "desc": "Set the rate for autoexposure adjustment."
            },
            {
                "name": "SetBloomExponent",
                "type": "float",
                "desc": "Set a custom bloom exponent."
            },
            {
                "name": "SetBloomSaturation",
                "type": "float",
                "desc": "Set a custom bloom saturation."
            },
            {
                "name": "SetTonemapPercentBrightPixels",
                "type": "float",
                "desc": "Set a target for percentage of pixels above a certain brightness. (default: 2)"
            },
            {
                "name": "SetTonemapPercentTarget",
                "type": "float",
                "desc": "Set a custom brightness target for SetTonemapPercentBrightPixels. (default: 60)"
            },
            {
                "name": "SetTonemapMinAvgLum",
                "type": "float",
                "desc": "Sets custom tonemapping param (ask Alex for details; default: 3)."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_viewpunch",
        "desc": "Causes a view punch on players.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Punch all players (ignore radius)": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Punch players in the air": {
                        "default": false,
                        "num": 2
                    }
                }
            },
            {
                "name": "Punch angles",
                "key": "punchangle",
                "type": "angle",
                "default": "0 0 90",
                "desc": "The punch angles to apply."
            },
            {
                "name": "Effect Radius",
                "key": "radius",
                "type": "float",
                "default": "500",
                "desc": "The radius around this entity in which to affect players."
            }
        ],
        "inputs": [
            {
                "name": "ViewPunch",
                "type": "void",
                "desc": "Performs the view punch."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_wind",
        "desc": "An entity to control wind in the map. Partially functional.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start disabled": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Min normal speed",
                "key": "minwind",
                "type": "integer",
                "default": "20",
                "desc": "Minimum speed of the wind while idling."
            },
            {
                "name": "Max normal speed",
                "key": "maxwind",
                "type": "integer",
                "default": "50",
                "desc": "Maximum speed of the wind while idling."
            },
            {
                "name": "Min gust speed",
                "key": "mingust",
                "type": "integer",
                "default": "100",
                "desc": "Minimum speed of wind gusts."
            },
            {
                "name": "Max gust speed",
                "key": "maxgust",
                "type": "integer",
                "default": "250",
                "desc": "Maximum speed of wind gusts."
            },
            {
                "name": "Min gust delay",
                "key": "mingustdelay",
                "type": "integer",
                "default": "10",
                "desc": "Minimum time delay between random gusts."
            },
            {
                "name": "Max gust delay",
                "key": "maxgustdelay",
                "type": "integer",
                "default": "20",
                "desc": "Maximum time delay between random gusts."
            },
            {
                "name": "Gust Duration",
                "key": "gustduration",
                "type": "integer",
                "default": "5",
                "desc": "How long will the wind gust for."
            },
            {
                "name": "Max gust dir change (degrees)",
                "key": "gustdirchange",
                "type": "integer",
                "default": "20",
                "desc": "Maximum amount that the wind's direction changes due to a gust."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enables the wind."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disables the wind."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggles the wind."
            }
        ],
        "outputs": [
            {
                "name": "OnGustStart",
                "type": "void",
                "desc": "Fired when a wind gust begins."
            },
            {
                "name": "OnGustEnd",
                "type": "void",
                "desc": "Fired when a wind gust ends."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_zoom",
        "desc": "An entity that can be used to control the player's FOV. Useful for scenes where the player's view is being controlled, or player-usable binoculars/telescopes, etc.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Seconds to reach target",
                "key": "rate",
                "type": "float",
                "default": "1.0",
                "desc": "Amount of time it should take to reach the specified FOV."
            },
            {
                "name": "Target FOV",
                "key": "fov",
                "type": "integer",
                "default": "75",
                "desc": "FOV that this entity should set the player's FOV to when active."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Allow Suit Zoom": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Zoom",
                "type": "void",
                "desc": "Start controlling the player's FOV."
            },
            {
                "name": "UnZoom",
                "type": "void",
                "desc": "Stop controlling the player's FOV."
            }
        ],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_base",
        "desc": "Base filter, which all other filters are based off of. This filter passes any entity whatsoever.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Filter Mode",
                "key": "negated",
                "type": "choices",
                "default": "Allow entities that match criteria (0)",
                "desc": "If set to Allow, only entities who match the criteria will pass the filter. If set to Disallow, only entities who do NOT match the criteria will pass the filter.",
                "choices": {
                    "Allow entities that match criteria": "0",
                    "Disallow entities that match criteria": "1"
                }
            },
            {
                "name": "Pass caller when tested",
                "key": "passcallerwhentested",
                "type": "boolean",
                "default": "No",
                "desc": "When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller."
            }
        ],
        "inputs": [
            {
                "name": "TestActivator",
                "type": "void",
                "desc": "Test the activator against the filter and fires OnPass or OnFail output."
            },
            {
                "name": "TestEntity",
                "type": "target_destination",
                "desc": "Tests the target entity against the specified entity and fires the OnPass or OnFail output."
            },
            {
                "name": "SetField",
                "type": "string",
                "desc": "Sets this filter's primary test criteria. (e.g. the name to test against the activator)"
            }
        ],
        "outputs": [
            {
                "name": "OnPass",
                "type": "void",
                "desc": "Fired in response to TestActivator input if the activator passes the filter."
            },
            {
                "name": "OnFail",
                "type": "void",
                "desc": "Fired in response to TestActivator input if the activator fails to pass the filter."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "fog_volume",
        "desc": "An entity to control the fog in the map.",
        "bases": [
            "BaseEntityBrush",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Fog Name",
                "key": "fogname",
                "type": "target_destination",
                "default": "",
                "desc": "The name of the fog entity associated with this volume."
            },
            {
                "name": "Postprocess Name",
                "key": "postprocessname",
                "type": "target_destination",
                "default": "",
                "desc": "The name of the postprocess entity associated with this volume."
            },
            {
                "name": "ColorCorrection Name",
                "key": "colorcorrectionname",
                "type": "target_destination",
                "default": "",
                "desc": "The name of the color_correction entity associated with this volume."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_areaportal",
        "desc": "A portal brush used to manage visibility in maps. Portals define areas, which are spaces that are connected in the map. Both sides of a portal cannot touch the same area, for example, a doughnut shaped map would require at least two portals to divide the map into two areas. A linear map could be divided into two areas with a single area portal.",
        "bases": [
            "BaseEntity"
        ],
        "keyvalues": [
            {
                "name": "Name of Linked Door",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "(Optional) The name of a prop_door_rotating or func_door whose open/closed state controls the on/off state of this area portal."
            },
            {
                "name": "Initial State",
                "key": "startopen",
                "type": "choices",
                "default": "Open (1)",
                "desc": "",
                "choices": {
                    "Closed": "0",
                    "Open": "1"
                }
            },
            {
                "name": "Portal Version",
                "key": "portalversion",
                "type": "integer",
                "default": "1",
                "desc": "(Don't change). Differentiates between shipping HL2 maps and maps using new engine features."
            }
        ],
        "inputs": [
            {
                "name": "Open",
                "type": "void",
                "desc": "Open the portal. When the portal is open is can be seen through."
            },
            {
                "name": "Close",
                "type": "void",
                "desc": "Close the portal. When the portal is closed it cannot be seen through."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the open/closed state of the portal."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_areaportalwindow",
        "desc": "An entity that can be used to optimize the visibility in a map. If you seal off an area with them, when the viewer moves the specified distance away from them, they will go opaque and the parts inside the area will not be drawn. The window brush should enclose the func_areaportal window so no parts of it are culled by the window. If you use the optional foreground brush, then it should enclose the window brush. Both brush models will have their drawing disabled as the areaportal will render them itself.",
        "bases": [
            "BaseEntity"
        ],
        "keyvalues": [
            {
                "name": "Rendered Window",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a brush model to render as the window."
            },
            {
                "name": "Fade Start Distance",
                "key": "fadestartdist",
                "type": "integer",
                "default": "128",
                "desc": "When the viewer is closer than this distance, the alpha is set to 'TranslucencyLimit'."
            },
            {
                "name": "Fade End Distance",
                "key": "fadedist",
                "type": "integer",
                "default": "512",
                "desc": "When the viewer is at this distance, the portal becomes solid and closes off. If set to zero, the window will always be closed."
            },
            {
                "name": "Translucency limit",
                "key": "translucencylimit",
                "type": "float",
                "default": "0",
                "desc": "This can be used to limit the translucency of the window, preventing it from becoming entirely invisible. This could be used with an opaque material, acting as a window."
            },
            {
                "name": "Foreground Brush",
                "key": "backgroundbmodel",
                "type": "target_destination",
                "default": "",
                "desc": "(Optional) brush model that is drawn after the fading brush model. This model should be translucent so you can see through it."
            },
            {
                "name": "Portal Version",
                "key": "portalversion",
                "type": "integer",
                "default": "1",
                "desc": "(Don't change). Differentiates between shipping HL2 maps and maps using new engine features."
            }
        ],
        "inputs": [
            {
                "name": "SetFadeStartDistance",
                "type": "integer",
                "desc": "Set fade start distance."
            },
            {
                "name": "SetFadeEndDistance",
                "type": "integer",
                "desc": "Set fade end distance. If set to zero, this will force the window closed."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_clip_vphysics",
        "desc": "A brush entity that's considered solid to vphysics.",
        "bases": [
            "BaseEntityBrush"
        ],
        "keyvalues": [
            {
                "name": "Filter Name",
                "key": "filtername",
                "type": "filterclass",
                "default": "",
                "desc": "Filter to use to see if activator collides with me. See filter_activator_name for more explanation. Allow means 'Allow to Block' for this entity."
            },
            {
                "name": "Start Disabled?",
                "key": "startdisabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable this entity."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable this entity."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "func_instance",
        "desc": "An entity for placing an instance of a map file.  You may translate and rotate this entity. You can use the replace keys to do parameter changes on the instance contents in a $ at the beginning of a variable name. Then just use the $variable name inside of the instance contents on any value portion of a key/value pair.",
        "bases": [
            "Angles"
        ],
        "keyvalues": [
            {
                "name": "Fix Up Name",
                "key": "targetname",
                "type": "target_source",
                "default": "",
                "desc": "The name that all entities will be fixed up with based upon the fix up style."
            },
            {
                "name": "VMF Filename",
                "key": "file",
                "type": "instance_file",
                "default": "",
                "desc": "This indicates a map file relative to the map's file name. This is also looked up relative to sdk_content/maps/, if one exists in the parent directories."
            },
            {
                "name": "Entity Name Fix Up",
                "key": "fixup_style",
                "type": "choices",
                "default": "Prefix (0)",
                "desc": "Fixup style for instanced entity names.  Uses the 'Fix Up Name' field.",
                "choices": {
                    "Prefix": "0",
                    "Postfix": "1",
                    "None": "2"
                }
            },
            {
                "name": "Replace Variable",
                "key": "replace01",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace02",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace03",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace04",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace05",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace06",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace07",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace08",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace09",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace10",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace11",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace12",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace13",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace14",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace15",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace16",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace17",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace18",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace19",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace20",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace21",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace22",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace23",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace24",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace25",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace26",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace27",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace28",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace29",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            },
            {
                "name": "Replace Variable",
                "key": "replace30",
                "type": "instance_variable",
                "default": "",
                "desc": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "func_ladderendpoint",
        "desc": "An entity used to specify the endpoints of a ladder. This entity is functional, but has been replaced by the easier-to-use func_useableladder entity. Left in only for backwards-compatibility!\n\nTo be valid, a full sized player hull traced between the start and end points must not be obstructed at level activation time. The angle determines in which direction the player leaves the ladder if the player presses the +jump button.\n\nNote: This entity is non-functional in Counter-Strike: Source. In CS:S, use func_ladder instead.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Other",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "A ladder goes between any two func_ladderendpoints pointing at each other."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_noportal_volume",
        "desc": "A region which prevents portal placement.",
        "bases": [
            "BaseEntityBrush",
            "Origin"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start inactive": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Deactivate",
                "type": "void",
                "desc": "Turn off blocking functionality"
            },
            {
                "name": "Activate",
                "type": "void",
                "desc": "Turn on blocking functionality"
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle blocking functionality"
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_occluder",
        "desc": "A occluder brush used to manage dynamic visibility in maps. Occluders are used to dynamically determine what things are behind them, to prevent trying to draw them at all.",
        "bases": [
            "BaseEntity"
        ],
        "keyvalues": [
            {
                "name": "Initial State",
                "key": "startactive",
                "type": "choices",
                "default": "Active (1)",
                "desc": "",
                "choices": {
                    "Inactive": "0",
                    "Active": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "Deactivate",
                "type": "void",
                "desc": "Deactivate the occluder, When inactive, it can be seen through."
            },
            {
                "name": "Activate",
                "type": "void",
                "desc": "Activate the occluder. When active, it cannot be seen through."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the active/inactive state of the occluder."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_portal_bumper",
        "desc": "A region which 'bumps' portals outside of it, but will still allow portals to be placed on it.",
        "bases": [
            "BaseEntityBrush",
            "Origin"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start inactive": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Deactivate",
                "type": "void",
                "desc": "Turn off bumping functionality"
            },
            {
                "name": "Activate",
                "type": "void",
                "desc": "Turn on bumping functionality"
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle bumping functionality"
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_portal_detector",
        "desc": "A region that fires an output if a portal is placed inside it.",
        "bases": [
            "BaseEntityBrush",
            "Origin"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start inactive": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Portal pair ID that it detects",
                "key": "linkagegroupid",
                "type": "integer",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Check all portals",
                "key": "checkallids",
                "type": "boolean",
                "default": "No",
                "desc": "Ignore the Group ID and check for all portals."
            }
        ],
        "inputs": [
            {
                "name": "Disable",
                "type": "void",
                "desc": "Turn off detecting functionality"
            },
            {
                "name": "Enable",
                "type": "void",
                "desc": "Turn on detecting functionality"
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle detecting functionality"
            }
        ],
        "outputs": [
            {
                "name": "OnStartTouchPortal1",
                "type": "void",
                "desc": "Fired when the Blue portal is placed intersecting the portal detector."
            },
            {
                "name": "OnStartTouchPortal2",
                "type": "void",
                "desc": "Fired when the Orange portal is placed intersecting the portal detector."
            },
            {
                "name": "OnStartTouchLinkedPortal",
                "type": "void",
                "desc": "Fired when linked portal is placed intersecting the portal detector."
            },
            {
                "name": "OnStartTouchBothLinkedPortals",
                "type": "void",
                "desc": "Fired when both of a pair of portals is placed intersecting the portal detector."
            },
            {
                "name": "OnStartTouchPortal",
                "type": "void",
                "desc": "Fired when any portal touches the detector."
            },
            {
                "name": "OnEndTouchPortal",
                "type": "void",
                "desc": "Fired when any portal leaves the detector bounds."
            },
            {
                "name": "OnEndTouchPortal1",
                "type": "void",
                "desc": "Fired when the Blue portal has left the volume of the detector."
            },
            {
                "name": "OnEndTouchPortal2",
                "type": "void",
                "desc": "Fired when the Orange portal has left the volume of the detector."
            },
            {
                "name": "OnEndTouchLinkedPortal",
                "type": "void",
                "desc": "Fired when a portal with a linked partner has left the volume of the detector."
            },
            {
                "name": "OnEndTouchBothLinkedPortals",
                "type": "void",
                "desc": "Fired when both portals have left the volume of the detector."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "func_portal_orientation",
        "desc": "Adjusts a portal's rotation to match a specified angle. The 'front' of the portal points in the specified direction. In Portal 2, portals are only reoriented when the entity is sent an Enable input, so this will need to be done every time a portal is placed.",
        "bases": [
            "BaseEntityBrush",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Angles to face",
                "key": "anglestoface",
                "type": "angle",
                "default": "0 0 0",
                "desc": "The angles to rotate portals to. An easy way to figure out what to set this to is to place a prop_portal, rotate it to the desired orientation, then look at its angles."
            },
            {
                "name": "Match linked angles.",
                "key": "matchlinkedangles",
                "type": "boolean",
                "default": "No",
                "desc": "If set, portals placed in this volume will have their angles match their linked portals. This only works for floor or ceiling portals with a linked partner that is on a surface with the same orientation."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_precipitation",
        "desc": "A brush entity that creates rain and snow inside its volume.",
        "bases": [
            "BaseEffectBrush"
        ],
        "keyvalues": [
            {
                "name": "Density (0-100%)",
                "key": "renderamt",
                "type": "integer",
                "default": "5",
                "desc": "This is the amount of particles that fall down from top side of brush. However distance from first particle to second depends on a brush volume size!"
            },
            {
                "name": "Color (R G B)",
                "key": "rendercolor",
                "type": "color255",
                "default": "100 100 100",
                "desc": "Color added to sprites which are rendered transparently (probably rain and snow particles)"
            },
            {
                "name": "Precipitation Type",
                "key": "preciptype",
                "type": "choices",
                "default": "Rain (0)",
                "desc": "",
                "choices": {
                    "Rain": "0",
                    "Snow": "1",
                    "Ash": "2",
                    "Snowfall": "3",
                    "Particle Rain": "4",
                    "Particle Ash": "5",
                    "Particle Rainstorm": "6",
                    "Particle Snow": "7"
                }
            },
            {
                "name": "Inner particle distance",
                "key": "innerdistance",
                "type": "float",
                "default": "-1",
                "desc": "Distance between the inner and outer particle systems. If not set, this will be automatically selected from the precipitation type keyvalue."
            },
            {
                "name": "Inner near system",
                "key": "innernearparticle",
                "type": "particlesystem",
                "default": "",
                "desc": "Name of the inner near particle system. If not set, this will be automatically selected from the precipitation type keyvalue."
            },
            {
                "name": "Inner far system",
                "key": "innerfarparticle",
                "type": "particlesystem",
                "default": "",
                "desc": "Name of the inner far particle system. If not set, this will be automatically selected from the precipitation type keyvalue."
            },
            {
                "name": "Outer system",
                "key": "outerparticle",
                "type": "particlesystem",
                "default": "",
                "desc": "Name of the outer particle system. If not set, this will be automatically selected from the precipitation type keyvalue."
            }
        ],
        "inputs": [
            {
                "name": "Alpha",
                "type": "integer",
                "desc": "Changes the density of the rain, and may add additional particle effects like fog or leaves. Accepts inputs from -1 to 255."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_precipitation_blocker",
        "desc": "A brush entity that prevents rain and snow from func_precipitation inside its volume.",
        "bases": [
            "BaseEntityBrush"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_proprrespawnzone",
        "desc": "Zone that handles respawning and distribution of clientside physics props.",
        "bases": [
            "BaseEntityBrush"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_smokevolume",
        "desc": "A brush entity that spawns smoke particles within its volume.",
        "bases": [
            "BaseEffectBrush"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Emissive": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Particle Color1 (R G B)",
                "key": "color1",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "Particle Color2 (R G B)",
                "key": "color2",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "Material",
                "key": "material",
                "type": "material",
                "default": "particle/particle_smokegrenade",
                "desc": "The material to use for the particles"
            },
            {
                "name": "Particle Draw Width (units)",
                "key": "particledrawwidth",
                "type": "float",
                "default": "120",
                "desc": "The size of the particles, in units."
            },
            {
                "name": "Particle Spacing Distance (units)",
                "key": "particlespacingdistance",
                "type": "float",
                "default": "80",
                "desc": "The distance between the particles inside the volume. The lower the number, the denser the particles, and the more overdraw there will be. It is best to keep it as high as you can without it looking bad."
            },
            {
                "name": "Density Ramp Speed (seconds)",
                "key": "densityrampspeed",
                "type": "float",
                "default": "1",
                "desc": "Time to go from density 0 to density 1, in seconds."
            },
            {
                "name": "Rotation Speed (degrees/sec)",
                "key": "rotationspeed",
                "type": "float",
                "default": "10",
                "desc": "The speed that the particles should rotate, in degrees per second."
            },
            {
                "name": "Movement Speed (units/sec)",
                "key": "movementspeed",
                "type": "float",
                "default": "10",
                "desc": "The speed that the particles should move around, in units per second."
            },
            {
                "name": "Density [0..1]",
                "key": "density",
                "type": "float",
                "default": "1",
                "desc": ""
            },
            {
                "name": "Max Draw Distance (0 is unlimited)",
                "key": "maxdrawdistance",
                "type": "float",
                "default": "0",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "SetRotationSpeed",
                "type": "float",
                "desc": "Set the particle rotation speed (in degrees per second)."
            },
            {
                "name": "SetMovementSpeed",
                "type": "float",
                "desc": "Set the particle movement speed (in units per second)."
            },
            {
                "name": "SetDensity",
                "type": "float",
                "desc": "Set the particle density. It should be a range from 0 to 1."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "func_useableladder",
        "desc": "A Half-Life 2 ladder. Handles player auto mount/unmount, as well as +use to get onto the ladder. \n\nSee also 'info_ladder_dismount', used to specify ladder auto-dismount points.\n\nNote: This entity is non-functional in Counter-Strike: Source. Use func_ladder instead.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Fake Ladder": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Start",
                "key": "point0",
                "type": "vector",
                "default": "",
                "desc": "Ladder end point."
            },
            {
                "name": "End",
                "key": "point1",
                "type": "vector",
                "default": "",
                "desc": "Ladder end point."
            },
            {
                "name": "Start Disabled",
                "key": "startdisabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Surface properties (optional)",
                "key": "laddersurfaceproperties",
                "type": "string",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable this ladder."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable this ladder."
            }
        ],
        "outputs": [
            {
                "name": "OnPlayerGotOnLadder",
                "type": "void",
                "desc": "Fired whenever a player gets on this ladder."
            },
            {
                "name": "OnPlayerGotOffLadder",
                "type": "void",
                "desc": "Fired whenever a player gets off this ladder."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "func_wall",
        "desc": "Legacy support for Half-Life. Use func_brush instead. A general brush entity.",
        "bases": [
            "BaseEntityBrush"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "game_gib_manager",
        "desc": "An entity to control the number of gibs in the world, for performance reasons.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Max Gib Count",
                "key": "maxpieces",
                "type": "integer",
                "default": "-1",
                "desc": "Sets the max number of gib that can be spawned at a time. (-1=no limit)"
            },
            {
                "name": "Allow New Gibs To Spawn",
                "key": "allownewgibs",
                "type": "boolean",
                "default": "No",
                "desc": "If true, when the max gib count is reached, oldest gibs are removed as new gibs spawn. If false, new gibs will not be spawned once the gib limit is reached."
            }
        ],
        "inputs": [
            {
                "name": "SetMaxPieces",
                "type": "integer",
                "desc": "Set the max gib count."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "game_globalvars",
        "desc": "Outputs a few global variables when requested.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "GetCurtime",
                "type": "void",
                "desc": "Gets curtime."
            },
            {
                "name": "GetFrameCount",
                "type": "void",
                "desc": "Gets frame count."
            },
            {
                "name": "GetFrametime",
                "type": "void",
                "desc": "Gets frame time."
            },
            {
                "name": "GetTickCount",
                "type": "void",
                "desc": "Gets tick count."
            },
            {
                "name": "GetIntervalPerTick",
                "type": "void",
                "desc": "Gets interval per tick."
            }
        ],
        "outputs": [
            {
                "name": "OutCurtime",
                "type": "float",
                "desc": "Outputs curtime."
            },
            {
                "name": "OutFrameCount",
                "type": "integer",
                "desc": "Outputs frame count."
            },
            {
                "name": "OutFrametime",
                "type": "float",
                "desc": "Outputs frame time."
            },
            {
                "name": "OutTickCount",
                "type": "integer",
                "desc": "Outputs tick count."
            },
            {
                "name": "OutIntervalPerTick",
                "type": "integer",
                "desc": "Outputs interval per tick."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "game_player_equip",
        "desc": "An entity that gives equipment to the player who activates it. To use, add new keys to this entity, where each key is the classname of a weapon/item, and the corresponding value is the number of those weapons/items to give to the player who uses this entity. ",
        "bases": [
            "BaseEntityPoint",
            "MasterEnt"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Use Only": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "game_ragdoll_manager",
        "desc": "An entity to control the number of ragdolls in the world, for performance reasons.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Max Ragdoll Count",
                "key": "maxragdollcount",
                "type": "integer",
                "default": "-1",
                "desc": "Sets the max number of ragdolls that can be in the world at a time (if they are flagged to fade). Set to -1 if you want to use the default value (g_ragdoll_maxcount)."
            },
            {
                "name": "Save Important Ragdolls",
                "key": "saveimportant",
                "type": "boolean",
                "default": "No",
                "desc": "Should the ragdoll manager make sure ally ragdolls aren't deleted?"
            }
        ],
        "inputs": [
            {
                "name": "SetMaxRagdollCount",
                "type": "integer",
                "desc": "Set the Max Ragdoll Count."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "game_text",
        "desc": "An entity that displays text on player's screens.",
        "bases": [
            "BaseEntityPoint",
            "MasterEnt"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {}
            },
            {
                "name": "Message Text",
                "key": "message",
                "type": "string",
                "default": "",
                "desc": "Message to display onscreen."
            },
            {
                "name": "X Position",
                "key": "x",
                "type": "float",
                "default": "-1",
                "desc": "Horizontal position on the player's screens to draw the text. The value should be between 0 and 1, where 0 is the far left of the screen and 1 is the far right. -1 centers the text."
            },
            {
                "name": "Y Position",
                "key": "y",
                "type": "float",
                "default": "0.6",
                "desc": "Vertical position on the player's screens to draw the text. The value should be between 0 and 1, where 0 is the top of the screen and 1 is the bottom. -1 centers the text."
            },
            {
                "name": "Text Effect",
                "key": "effect",
                "type": "choices",
                "default": "Fade In/Out (0)",
                "desc": "",
                "choices": {
                    "Fade In/Out": "0",
                    "Credits": "1",
                    "Scan Out": "2"
                }
            },
            {
                "name": "Text Color",
                "key": "color",
                "type": "color255",
                "default": "100 100 100",
                "desc": "The main color of the text."
            },
            {
                "name": "Transition Color",
                "key": "color2",
                "type": "color255",
                "default": "240 110 0",
                "desc": "Secondary color used when revealing text."
            },
            {
                "name": "Fade in Time/Character Scan Time",
                "key": "fadein",
                "type": "float",
                "default": "1.5",
                "desc": "The time it should take for the text to fully fade in."
            },
            {
                "name": "Fade Out Time",
                "key": "fadeout",
                "type": "float",
                "default": "0.5",
                "desc": "The time it should take for the text to fade out, after the hold time has expired."
            },
            {
                "name": "Hold Time",
                "key": "holdtime",
                "type": "float",
                "default": "1.2",
                "desc": "The time the text should stay onscreen, after fading in, before it begins to fade out."
            },
            {
                "name": "Scan time (scan effect only)",
                "key": "fxtime",
                "type": "float",
                "default": "0.25",
                "desc": "If the 'Text Effect' is set to Scan Out, this is the time it should take to scan out all the letters in the text."
            },
            {
                "name": "Text Channel",
                "key": "channel",
                "type": "choices",
                "default": "Channel 1 (medium text size) (1)",
                "desc": "You can have up to six individual game_text messages onscreen at once, stored in channels. Select which channel this text should be placed in, which will overwrite any active message already in that channel.",
                "choices": {
                    "Channel 0 (unused)": "0",
                    "Channel 1 (medium text size)": "1",
                    "Channel 2 (small text size)": "2",
                    "Channel 3 (large text size)": "3",
                    "Channel 4 (medium text size)": "4",
                    "Channel 5 (unused)": "5"
                }
            }
        ],
        "inputs": [
            {
                "name": "Display",
                "type": "void",
                "desc": "Display the message text."
            },
            {
                "name": "SetText",
                "type": "string",
                "desc": "Set the text to display."
            },
            {
                "name": "SetPosX",
                "type": "float",
                "desc": "Set the X position of the text. (0 - 1.0 = left to right) (-1 centers)"
            },
            {
                "name": "SetPosY",
                "type": "float",
                "desc": "Set the Y position of the text. (0 - 1.0 = top to bottom) (-1 centers)"
            },
            {
                "name": "SetTextColor",
                "type": "color255",
                "desc": "Set color of the front text."
            },
            {
                "name": "SetTextColor2",
                "type": "color255",
                "desc": "Set color of the transition text."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "game_ui",
        "desc": "An entity used to override player input when the player is looking at it.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[32] Freeze Player": {
                        "default": true,
                        "num": 32
                    },
                    "[64] Hide Weapon": {
                        "default": true,
                        "num": 64
                    },
                    "[128] +Use Deactivates": {
                        "default": true,
                        "num": 128
                    },
                    "[256] Jump Deactivates": {
                        "default": true,
                        "num": 256
                    }
                }
            },
            {
                "name": "FieldOfView",
                "key": "fieldofview",
                "type": "float",
                "default": "-1.0",
                "desc": "The amount of tolerance in the view checking when determining whether the player's input is still under control. 1.0 = straight ahead, 0.0 = +/- 90 degrees, -1.0 = all directions. If the player isn't within the tolerance, the player regains control."
            }
        ],
        "inputs": [
            {
                "name": "Deactivate",
                "type": "void",
                "desc": "Return Player Control."
            },
            {
                "name": "Activate",
                "type": "string",
                "desc": "Take Player Control."
            }
        ],
        "outputs": [
            {
                "name": "PlayerOn",
                "type": "void",
                "desc": "Fired whenever this entity starts controlling the player's input."
            },
            {
                "name": "PlayerOff",
                "type": "void",
                "desc": "Fired whenever this entity stops controlling the player's input."
            },
            {
                "name": "PressedMoveLeft",
                "type": "void",
                "desc": "Fired whenever the player presses the moveleft key."
            },
            {
                "name": "PressedMoveRight",
                "type": "void",
                "desc": "Fired whenever the player presses the moveright key."
            },
            {
                "name": "PressedForward",
                "type": "void",
                "desc": "Fired whenever the player presses the forward key."
            },
            {
                "name": "PressedBack",
                "type": "void",
                "desc": "Fired whenever the player presses the backward key."
            },
            {
                "name": "PressedAttack",
                "type": "void",
                "desc": "Fired whenever the player presses the attack key."
            },
            {
                "name": "PressedAttack2",
                "type": "void",
                "desc": "Fired whenever the player presses the secondary attack key."
            },
            {
                "name": "UnpressedMoveLeft",
                "type": "void",
                "desc": "Fired whenever the player releases the moveleft key."
            },
            {
                "name": "UnpressedMoveRight",
                "type": "void",
                "desc": "Fired whenever the player releases the moveright key."
            },
            {
                "name": "UnpressedForward",
                "type": "void",
                "desc": "Fired whenever the player releases the forward key."
            },
            {
                "name": "UnpressedBack",
                "type": "void",
                "desc": "Fired whenever the player releases the backward key."
            },
            {
                "name": "UnpressedAttack",
                "type": "void",
                "desc": "Fired whenever the player releases the attack key."
            },
            {
                "name": "UnpressedAttack2",
                "type": "void",
                "desc": "Fired whenever the player releases the secondary attack key."
            },
            {
                "name": "XAxis",
                "type": "string",
                "desc": "An output that fires whenever the X axis of the player's input changes. i.e. -1 when the player has moveleft key down, 1 when the player has moveright key down, and 0 if neither."
            },
            {
                "name": "YAxis",
                "type": "string",
                "desc": "An output that fires whenever the Y axis of the player's input changes. i.e. -1 when the player has backward key down, 1 when the player has forward key down, and 0 if neither."
            },
            {
                "name": "AttackAxis",
                "type": "string",
                "desc": "An output that fires whenever the state of the player's attack key changes. i.e. 1 when the player has the attack key down, 0 otherwise."
            },
            {
                "name": "Attack2Axis",
                "type": "string",
                "desc": "An output that fires whenever the state of the player's secondary attack key changes. i.e. 1 when the player has the secondary attack key down, 0 otherwise."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "game_weapon_manager",
        "desc": "An entity used to limit the number of a particular weapon type in the world. Useful in places where NPCs are spawning rapidly, dying, and dropping weapons.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Weapon Classname",
                "key": "weaponname",
                "type": "string",
                "default": "",
                "desc": "Classname of the weapon type to limit."
            },
            {
                "name": "Max Allowed in Level",
                "key": "maxpieces",
                "type": "integer",
                "default": "0",
                "desc": "The maximum amount of the specified weapon type allowed in the world."
            },
            {
                "name": "Ammo modifier",
                "key": "ammomod",
                "type": "float",
                "default": "1",
                "desc": "Modifier for amount of ammo dropped by a weapon."
            }
        ],
        "inputs": [
            {
                "name": "SetAmmoModifier",
                "type": "float",
                "desc": "Adjust the ammo modifier."
            },
            {
                "name": "SetMaxPieces",
                "type": "integer",
                "desc": "Set the max amount of weapons of the specified type allowed to be in the world."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "game_zone_player",
        "desc": "An entity used to count the number of players within a zone.",
        "bases": [
            "BaseEntityBrush"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "CountPlayersInZone",
                "type": "void",
                "desc": "Count the number of players in the zone, and fire the corresponding outputs."
            }
        ],
        "outputs": [
            {
                "name": "OnPlayerInZone",
                "type": "void",
                "desc": "Fired whenever a count finds a player inside the zone, with the player as the activator."
            },
            {
                "name": "OnPlayerOutZone",
                "type": "void",
                "desc": "Fired whenever a count finds a player outside the zone, with the player as the activator."
            },
            {
                "name": "PlayersInCount",
                "type": "integer",
                "desc": "Fired after a count, and contains the number of players found inside the zone."
            },
            {
                "name": "PlayersOutCount",
                "type": "integer",
                "desc": "Fired after a count, and contains the number of players found outside the zone."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "gibshooterbase",
        "desc": "",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Gib Direction (Pitch Yaw Roll)",
                "key": "angles",
                "type": "angle",
                "default": "0 0 0",
                "desc": "The direction the gibs will fly."
            },
            {
                "name": "Number of Gibs",
                "key": "m_igibs",
                "type": "integer",
                "default": "3",
                "desc": "Total number of gibs to shoot each time it's activated."
            },
            {
                "name": "Delay between shots",
                "key": "delay",
                "type": "float",
                "default": "0",
                "desc": "Delay (in seconds) between shooting each gib. If 0, all gibs shoot at once."
            },
            {
                "name": "Gib Angles (Pitch Yaw Roll)",
                "key": "gibangles",
                "type": "angle",
                "default": "0 0 0",
                "desc": "The orientation of the spawned gibs."
            },
            {
                "name": "Max angular velocity",
                "key": "gibanglevelocity",
                "type": "float",
                "default": "0",
                "desc": "How fast (degrees/sec) the gib pieces should spin. They will spin on x and y axis at between 10% and 100% of this speed."
            },
            {
                "name": "Gib Velocity",
                "key": "m_flvelocity",
                "type": "integer",
                "default": "200",
                "desc": "Speed of the fired gibs."
            },
            {
                "name": "Course Variance",
                "key": "m_flvariance",
                "type": "float",
                "default": "0.15",
                "desc": "How much variance in the direction gibs are fired."
            },
            {
                "name": "Gib Life",
                "key": "m_flgiblife",
                "type": "float",
                "default": "4",
                "desc": "Time in seconds for gibs to live +/- 5%."
            },
            {
                "name": "Simulate",
                "key": "simulation",
                "type": "choices",
                "default": "Point (0)",
                "desc": "",
                "choices": {
                    "Point": "0",
                    "Physics": "1",
                    "Ragdoll": "2"
                }
            },
            {
                "name": "Lighting Origin",
                "key": "lightingorigin",
                "type": "target_destination",
                "default": "",
                "desc": "Select an info_lighting to specify a location to sample lighting from for all gibs spawned by this shooter, instead of their own origins."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Repeatable": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Shoot",
                "type": "void",
                "desc": "Force the gibshooter to create and shoot a gib."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "hammer_updateignorelist",
        "desc": "Specifies entities that are to be ignored by the hammer_update_safe_entities console command. Enter the targetnames of entities that you want to exclude into the list of fields here. Several of these may exist in a map.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Ignored Name 01",
                "key": "ignoredname01",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            },
            {
                "name": "Ignored Name 02",
                "key": "ignoredname02",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            },
            {
                "name": "Ignored Name 03",
                "key": "ignoredname03",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            },
            {
                "name": "Ignored Name 04",
                "key": "ignoredname04",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            },
            {
                "name": "Ignored Name 05",
                "key": "ignoredname05",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            },
            {
                "name": "Ignored Name 06",
                "key": "ignoredname06",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            },
            {
                "name": "Ignored Name 07",
                "key": "ignoredname07",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            },
            {
                "name": "Ignored Name 08",
                "key": "ignoredname08",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            },
            {
                "name": "Ignored Name 09",
                "key": "ignoredname09",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            },
            {
                "name": "Ignored Name 10",
                "key": "ignoredname10",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            },
            {
                "name": "Ignored Name 11",
                "key": "ignoredname11",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            },
            {
                "name": "Ignored Name 12",
                "key": "ignoredname12",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            },
            {
                "name": "Ignored Name 13",
                "key": "ignoredname13",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            },
            {
                "name": "Ignored Name 14",
                "key": "ignoredname14",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            },
            {
                "name": "Ignored Name 15",
                "key": "ignoredname15",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            },
            {
                "name": "Ignored Name 16",
                "key": "ignoredname16",
                "type": "target_destination",
                "default": "",
                "desc": "Do not send this entity's information back to hammer during hammer_update_safe_entities."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_camera_link",
        "desc": "An entity that can use point_cameras to render images for materials used by entities. To author the material, use the special identifier _rt_Camera for the $baseTexture (or whatever texture you want, like envmap, etc.) in the .vmt then connect the 'target' field to the entity which uses that material, and the 'PointCamera' field to the point_camera you want to have appear on that entity's material.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Entity Whose Material Uses _rt_camera",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Camera Name",
                "key": "pointcamera",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a point_camera entity in the map that the material should be rendered from."
            }
        ],
        "inputs": [
            {
                "name": "SetCamera",
                "type": "string",
                "desc": "Set the camera to use. The parameter should be the name of a point_camera entity in the map."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_constraint_anchor",
        "desc": "An entity used to attach constraints to a local position on an entity. Usually constraints will attach to the center of mass of an object. Attach the desired constraint to this entity, and then parent this entity to the entity you want the constraint to apply to.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Mass Scale",
                "key": "massscale",
                "type": "float",
                "default": "1",
                "desc": "Amount to scale the mass of this body in the constraint solver."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_coop_spawn",
        "desc": "Player spawns for cooperative mode.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Initial State",
                "key": "enabled",
                "type": "choices",
                "default": "Enabled (1)",
                "desc": "",
                "choices": {
                    "Disabled": "0",
                    "Enabled": "1"
                }
            },
            {
                "name": "Player",
                "key": "startingteam",
                "type": "choices",
                "default": "Any (0)",
                "desc": "Which player to spawn.",
                "choices": {
                    "Any": "0",
                    "P-Body": "2",
                    "ATLAS": "3"
                }
            },
            {
                "name": "[H] Player",
                "key": "model",
                "type": "choices",
                "default": "Default (models/editor/playerstart.mdl)",
                "desc": "The player model to show in Hammer.",
                "choices": {
                    "Default": "models/editor/playerstart.mdl",
                    "ATLAS": "models/player/ballbot/ballbot.mdl",
                    "P-Body": "models/player/eggbot/eggbot.mdl"
                }
            },
            {
                "name": "Force Gun On Spawn",
                "key": "forcegunonspawn",
                "type": "boolean",
                "default": "No",
                "desc": "Give the player a Portal Gun on spawn. Coop players always have a Dual Portal Device."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable the spawn point to be used."
            },
            {
                "name": "SetAsActiveSpawn",
                "type": "void",
                "desc": "Enable the spawn point to be used, disabling all other spawn points that do not share the same name."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable the spawn point from being used."
            },
            {
                "name": "SetTeam",
                "type": "integer",
                "desc": "Set the player this spawn point is for - 0 and 1 are any player, 2 is P-Body, 3 is ATLAS."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_game_event_proxy",
        "desc": "Entity that, when seen, generates a simple game event.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Event Name",
                "key": "event_name",
                "type": "string",
                "default": "",
                "desc": "The event to trigger by name from modevents.res"
            },
            {
                "name": "Range",
                "key": "range",
                "type": "float",
                "default": "512",
                "desc": "Distance that the player must be before the event is generated."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Automatically detect visibility": {
                        "default": true,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "GenerateGameEvent",
                "type": "void",
                "desc": "Generate my game event. (This entity is sent as the SUBJECT)"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_ladder_dismount",
        "desc": "An entity to handle endpoints for multiple ladders that are too close to each other.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Ladder Name",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "If multiple ladders are near multiple endpoints, use this to stop them from interfering with each other."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_landmark",
        "desc": "An entity that acts as a landmark for transitions to another level. There should be a corresponding info_landmark entity in the next map. Entities will be transitioned to the next level relative to the info_landmark entities.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_landmark_entry",
        "desc": "Entry landmark",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_landmark_exit",
        "desc": "Exit landmark",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_lighting",
        "desc": "An entity that can be used to change the lighting origin of a prop_static. Set the prop_static's Lighting Origin to point at this entity to make the prop_static light as if it was at the info_lighting's origin.  Good for prop_static entities that are embedded in world geometry (like rocks/windows/etc).",
        "bases": [
            "StaticTargetName"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_lighting_relative",
        "desc": "",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Lighting Landmark",
                "key": "lightinglandmark",
                "type": "target_destination",
                "default": "",
                "desc": "Entity at which the reference origin is contained.  If empty, the info_lighting_relative's origin will be used."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_npc_spawn_destination",
        "desc": "NPC Spawn Destination. (Consult npc_template_maker help for more info)",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Reuse Delay",
                "key": "reusedelay",
                "type": "float",
                "default": "1",
                "desc": "After an NPC is spawned at this destination, the delay before this destination is eligible for selection again."
            },
            {
                "name": "New NPC Name",
                "key": "renamenpc",
                "type": "target_source",
                "default": "",
                "desc": "If an NPC spawns at this destination, change that NPC's targetname to this."
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnSpawnNPC",
                "type": "void",
                "desc": "Fired when an NPC spawns at this destination."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "info_null",
        "desc": "An entity that's immediately removed on spawning. Useful as a spotlight target.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_overlay",
        "desc": "An entity that places an overlay on the world.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Material",
                "key": "material",
                "type": "material",
                "default": "",
                "desc": "Material to use for the overlay."
            },
            {
                "name": "Brush faces",
                "key": "sides",
                "type": "sidelist",
                "default": "",
                "desc": "The brush faces this overlay is applied to."
            },
            {
                "name": "Render Order",
                "key": "renderorder",
                "type": "choices",
                "default": "First (0)",
                "desc": "Higher values render after lower values. This value can be 0-3.",
                "choices": {
                    "First": "0",
                    "Second": "1",
                    "Third": "2",
                    "Fourth": "3"
                }
            },
            {
                "name": "U Start",
                "key": "startu",
                "type": "float",
                "default": "0.0",
                "desc": "A value between 0-1, defining the starting X axis position in the overlay material."
            },
            {
                "name": "U End",
                "key": "endu",
                "type": "float",
                "default": "1.0",
                "desc": "A value between 0-1, defining the ending X axis position in the overlay material."
            },
            {
                "name": "V Start",
                "key": "startv",
                "type": "float",
                "default": "0.0",
                "desc": "A value between 0-1, defining the starting Y axis position in the overlay material."
            },
            {
                "name": "V End",
                "key": "endv",
                "type": "float",
                "default": "1.0",
                "desc": "A value between 0-1, defining the ending Y axis position in the overlay material."
            },
            {
                "name": "Overlay Basis Origin(Read-Only)",
                "key": "basisorigin",
                "type": "vector",
                "default": "",
                "desc": "Center of the overlay on the surface(s) the overlay is applied to."
            },
            {
                "name": "Overlay Basis U",
                "key": "basisu",
                "type": "vector",
                "default": "",
                "desc": "The direction the X-axis of the material points."
            },
            {
                "name": "Overlay Basis V",
                "key": "basisv",
                "type": "vector",
                "default": "",
                "desc": "The direction the Y-axis of the material points."
            },
            {
                "name": "Overlay Basis Normal(Read-Only)",
                "key": "basisnormal",
                "type": "vector",
                "default": "",
                "desc": "Normal of the surface(s) the overlay is applied to."
            },
            {
                "name": "Overlay Point 1",
                "key": "uv0",
                "type": "vector",
                "default": "",
                "desc": "Corner 1 of the overlay."
            },
            {
                "name": "Overlay Point 2",
                "key": "uv1",
                "type": "vector",
                "default": "",
                "desc": "Corner 2 of the overlay."
            },
            {
                "name": "Overlay Point 3",
                "key": "uv2",
                "type": "vector",
                "default": "",
                "desc": "Corner 3 of the overlay."
            },
            {
                "name": "Overlay Point 4",
                "key": "uv3",
                "type": "vector",
                "default": "",
                "desc": "Corner 4 of the overlay."
            },
            {
                "name": "Start Fade Dist",
                "key": "fademindist",
                "type": "float",
                "default": "-1",
                "desc": "Distance at which the overlay starts to fade (<0 = use fademaxdist)."
            },
            {
                "name": "End Fade Dist",
                "key": "fademaxdist",
                "type": "float",
                "default": "0",
                "desc": "Maximum distance at which the overlay is visible (0 = don't fade out)."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_paint_sprayer",
        "desc": "An entity that sprays Gel.",
        "bases": [
            "BaseEntityPoint",
            "BasePaintType"
        ],
        "keyvalues": [
            {
                "name": "Max number of blobs",
                "key": "maxblobcount",
                "type": "integer",
                "default": "250",
                "desc": "Max number of blobs that sprayer can spawn in the world (1-250)."
            },
            {
                "name": "Light Position Name",
                "key": "light_position_name",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity we want to use as blobs light position."
            },
            {
                "name": "Start Active?",
                "key": "start_active",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Silent?",
                "key": "silent",
                "type": "boolean",
                "default": "No",
                "desc": "If this flag is true, blobs will only paint, appearing entirely invisible."
            },
            {
                "name": "Draw Only?",
                "key": "drawonly",
                "type": "boolean",
                "default": "No",
                "desc": "If this flag is true, blobs will only render, vanishing on contact with surfaces."
            },
            {
                "name": "Render Mode",
                "key": "rendermode",
                "type": "choices",
                "default": "Blobulator (0)",
                "desc": "The mode to render blobs. Appears non-functional.",
                "choices": {
                    "Blobulator": "0",
                    "Fast Sphere": "1"
                }
            },
            {
                "name": "Ambient Sound",
                "key": "ambientsound",
                "type": "choices",
                "default": "None (silent) (0)",
                "desc": "The sound to play when paint is flowing.",
                "choices": {
                    "None (silent)": "0",
                    "Drip": "1",
                    "Medium Flow": "2",
                    "Heavy Flow": "3"
                }
            },
            {
                "name": "Blobs per second",
                "key": "blobs_per_second",
                "type": "float",
                "default": "20",
                "desc": "The number of paint blobs sprayed per second."
            },
            {
                "name": "Min blob speed",
                "key": "min_speed",
                "type": "float",
                "default": "100",
                "desc": "The minimum speed of the sprayed blobs."
            },
            {
                "name": "Max blob speed",
                "key": "max_speed",
                "type": "float",
                "default": "100",
                "desc": "The maximum speed of the sprayed blobs."
            },
            {
                "name": "Blob spread radius",
                "key": "blob_spread_radius",
                "type": "float",
                "default": "0",
                "desc": "Blobs will spawn randomly within this radius."
            },
            {
                "name": "Blob spread angle",
                "key": "blob_spread_angle",
                "type": "float",
                "default": "8",
                "desc": "The spread of the blobs along its direction vector (in degrees)."
            },
            {
                "name": "Blob streak percentage",
                "key": "blob_streak_percentage",
                "type": "float",
                "default": "0",
                "desc": "The percentage of blobs that will streak (0 - 100)."
            },
            {
                "name": "Blob min streak time",
                "key": "min_streak_time",
                "type": "float",
                "default": "0.2",
                "desc": "The minimum time that the blobs will streak for."
            },
            {
                "name": "Blob max streak time",
                "key": "max_streak_time",
                "type": "float",
                "default": "0.5",
                "desc": "The maximum time that the blobs will streak for."
            },
            {
                "name": "Blob min streak speed dampen",
                "key": "min_streak_speed_dampen",
                "type": "float",
                "default": "500",
                "desc": "The minimum speed dampening while streaking."
            },
            {
                "name": "Blob max streak speed dampen",
                "key": "max_streak_speed_dampen",
                "type": "float",
                "default": "1000",
                "desc": "The maximum speed dampening while streaking."
            },
            {
                "name": "Min blob start size",
                "key": "start_radius_min",
                "type": "float",
                "default": "0.5",
                "desc": "The minimum start size of the sprayed blobs."
            },
            {
                "name": "Max blob start size",
                "key": "start_radius_max",
                "type": "float",
                "default": "0.7",
                "desc": "The maximum start size of the sprayed blobs."
            },
            {
                "name": "Min blob end size",
                "key": "end_radius_min",
                "type": "float",
                "default": "0.5",
                "desc": "The minimum end size of the sprayed blobs."
            },
            {
                "name": "Max blob end size",
                "key": "end_radius_max",
                "type": "float",
                "default": "0.7",
                "desc": "The maximum end size of the sprayed blobs."
            },
            {
                "name": "Min grow time",
                "key": "radius_grow_time_min",
                "type": "float",
                "default": "0.5",
                "desc": "The minimum time to grow from start to end size."
            },
            {
                "name": "Max grow time",
                "key": "radius_grow_time_max",
                "type": "float",
                "default": "1",
                "desc": "The maximum time to grow from start to end size."
            }
        ],
        "inputs": [
            {
                "name": "Start",
                "type": "void",
                "desc": "Start shooting Gel."
            },
            {
                "name": "Stop",
                "type": "void",
                "desc": "Stop shooting Gel."
            },
            {
                "name": "ChangePaintType",
                "type": "integer",
                "desc": "Change the type of Gel being sprayed. Values between 0-4, higher values are unstable."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_particle_system",
        "desc": "An entity that spawns a particle system built using the particle editor.",
        "bases": [
            "BaseEntityPoint",
            "Reflection"
        ],
        "keyvalues": [
            {
                "name": "Particle System Name",
                "key": "effect_name",
                "type": "particlesystem",
                "default": "",
                "desc": ""
            },
            {
                "name": "Start Active?",
                "key": "start_active",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Control Point 1",
                "key": "cpoint1",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 1 of the effect will be at this entity's location."
            },
            {
                "name": "Control Point 2",
                "key": "cpoint2",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 2 of the effect will be at this entity's location. If control point 1 is not set, this will be ignored."
            },
            {
                "name": "Control Point 3",
                "key": "cpoint3",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 3 of the effect will be at this entity's location. If control point 2 is not set, this will be ignored."
            },
            {
                "name": "Control Point 4",
                "key": "cpoint4",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 4 of the effect will be at this entity's location. If control point 3 is not set, this will be ignored."
            },
            {
                "name": "Control Point 5",
                "key": "cpoint5",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 5 of the effect will be at this entity's location. If control point 4 is not set, this will be ignored."
            },
            {
                "name": "Control Point 6",
                "key": "cpoint6",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 6 of the effect will be at this entity's location. If control point 5 is not set, this will be ignored."
            },
            {
                "name": "Control Point 7",
                "key": "cpoint7",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 7 of the effect will be at this entity's location. If control point 6 is not set, this will be ignored."
            },
            {
                "name": "Control Point 8",
                "key": "cpoint8",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 8 of the effect will be at this entity's location. If control point 7 is not set, this will be ignored."
            },
            {
                "name": "Control Point 9",
                "key": "cpoint9",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 9 of the effect will be at this entity's location. If control point 8 is not set, this will be ignored."
            },
            {
                "name": "Control Point 10",
                "key": "cpoint10",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 10 of the effect will be at this entity's location. If control point 9 is not set, this will be ignored."
            },
            {
                "name": "Control Point 11",
                "key": "cpoint11",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 11 of the effect will be at this entity's location. If control point 10 is not set, this will be ignored."
            },
            {
                "name": "Control Point 12",
                "key": "cpoint12",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 12 of the effect will be at this entity's location. If control point 11 is not set, this will be ignored."
            },
            {
                "name": "Control Point 13",
                "key": "cpoint13",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 13 of the effect will be at this entity's location. If control point 12 is not set, this will be ignored."
            },
            {
                "name": "Control Point 14",
                "key": "cpoint14",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 14 of the effect will be at this entity's location. If control point 13 is not set, this will be ignored."
            },
            {
                "name": "Control Point 15",
                "key": "cpoint15",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 15 of the effect will be at this entity's location. If control point 14 is not set, this will be ignored."
            },
            {
                "name": "Control Point 16",
                "key": "cpoint16",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 16 of the effect will be at this entity's location. If control point 15 is not set, this will be ignored."
            },
            {
                "name": "Control Point 17",
                "key": "cpoint17",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 17 of the effect will be at this entity's location. If control point 16 is not set, this will be ignored."
            },
            {
                "name": "Control Point 18",
                "key": "cpoint18",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 18 of the effect will be at this entity's location. If control point 17 is not set, this will be ignored."
            },
            {
                "name": "Control Point 19",
                "key": "cpoint19",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 19 of the effect will be at this entity's location. If control point 18 is not set, this will be ignored."
            },
            {
                "name": "Control Point 20",
                "key": "cpoint20",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 20 of the effect will be at this entity's location. If control point 19 is not set, this will be ignored."
            },
            {
                "name": "Control Point 21",
                "key": "cpoint21",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 21 of the effect will be at this entity's location. If control point 10 is not set, this will be ignored."
            },
            {
                "name": "Control Point 22",
                "key": "cpoint22",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 22 of the effect will be at this entity's location. If control point 21 is not set, this will be ignored."
            },
            {
                "name": "Control Point 23",
                "key": "cpoint23",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 23 of the effect will be at this entity's location. If control point 22 is not set, this will be ignored."
            },
            {
                "name": "Control Point 24",
                "key": "cpoint24",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 24 of the effect will be at this entity's location. If control point 23 is not set, this will be ignored."
            },
            {
                "name": "Control Point 25",
                "key": "cpoint25",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 25 of the effect will be at this entity's location. If control point 24 is not set, this will be ignored."
            },
            {
                "name": "Control Point 26",
                "key": "cpoint26",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 26 of the effect will be at this entity's location. If control point 25 is not set, this will be ignored."
            },
            {
                "name": "Control Point 27",
                "key": "cpoint27",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 27 of the effect will be at this entity's location. If control point 26 is not set, this will be ignored."
            },
            {
                "name": "Control Point 28",
                "key": "cpoint28",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 28 of the effect will be at this entity's location. If control point 27 is not set, this will be ignored."
            },
            {
                "name": "Control Point 29",
                "key": "cpoint29",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 29 of the effect will be at this entity's location. If control point 28 is not set, this will be ignored."
            },
            {
                "name": "Control Point 30",
                "key": "cpoint30",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 30 of the effect will be at this entity's location. If control point 29 is not set, this will be ignored."
            },
            {
                "name": "Control Point 31",
                "key": "cpoint31",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 31 of the effect will be at this entity's location. If control point 30 is not set, this will be ignored."
            },
            {
                "name": "Control Point 32",
                "key": "cpoint32",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 32 of the effect will be at this entity's location. If control point 31 is not set, this will be ignored."
            },
            {
                "name": "Control Point 33",
                "key": "cpoint33",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 33 of the effect will be at this entity's location. If control point 32 is not set, this will be ignored."
            },
            {
                "name": "Control Point 34",
                "key": "cpoint34",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 34 of the effect will be at this entity's location. If control point 33 is not set, this will be ignored."
            },
            {
                "name": "Control Point 35",
                "key": "cpoint35",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 35 of the effect will be at this entity's location. If control point 34 is not set, this will be ignored."
            },
            {
                "name": "Control Point 36",
                "key": "cpoint36",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 36 of the effect will be at this entity's location. If control point 35 is not set, this will be ignored."
            },
            {
                "name": "Control Point 37",
                "key": "cpoint37",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 37 of the effect will be at this entity's location. If control point 36 is not set, this will be ignored."
            },
            {
                "name": "Control Point 38",
                "key": "cpoint38",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 38 of the effect will be at this entity's location. If control point 37 is not set, this will be ignored."
            },
            {
                "name": "Control Point 39",
                "key": "cpoint39",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 39 of the effect will be at this entity's location. If control point 38 is not set, this will be ignored."
            },
            {
                "name": "Control Point 40",
                "key": "cpoint40",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 40 of the effect will be at this entity's location. If control point 39 is not set, this will be ignored."
            },
            {
                "name": "Control Point 41",
                "key": "cpoint41",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 41 of the effect will be at this entity's location. If control point 40 is not set, this will be ignored."
            },
            {
                "name": "Control Point 42",
                "key": "cpoint42",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 42 of the effect will be at this entity's location. If control point 41 is not set, this will be ignored."
            },
            {
                "name": "Control Point 43",
                "key": "cpoint43",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 43 of the effect will be at this entity's location. If control point 42 is not set, this will be ignored."
            },
            {
                "name": "Control Point 44",
                "key": "cpoint44",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 44 of the effect will be at this entity's location. If control point 43 is not set, this will be ignored."
            },
            {
                "name": "Control Point 45",
                "key": "cpoint45",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 45 of the effect will be at this entity's location. If control point 44 is not set, this will be ignored."
            },
            {
                "name": "Control Point 46",
                "key": "cpoint46",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 46 of the effect will be at this entity's location. If control point 45 is not set, this will be ignored."
            },
            {
                "name": "Control Point 47",
                "key": "cpoint47",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 47 of the effect will be at this entity's location. If control point 46 is not set, this will be ignored."
            },
            {
                "name": "Control Point 48",
                "key": "cpoint48",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 48 of the effect will be at this entity's location. If control point 47 is not set, this will be ignored."
            },
            {
                "name": "Control Point 49",
                "key": "cpoint49",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 49 of the effect will be at this entity's location. If control point 48 is not set, this will be ignored."
            },
            {
                "name": "Control Point 50",
                "key": "cpoint50",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 50 of the effect will be at this entity's location. If control point 49 is not set, this will be ignored."
            },
            {
                "name": "Control Point 51",
                "key": "cpoint51",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 51 of the effect will be at this entity's location. If control point 50 is not set, this will be ignored."
            },
            {
                "name": "Control Point 52",
                "key": "cpoint52",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 52 of the effect will be at this entity's location. If control point 51 is not set, this will be ignored."
            },
            {
                "name": "Control Point 53",
                "key": "cpoint53",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 53 of the effect will be at this entity's location. If control point 52 is not set, this will be ignored."
            },
            {
                "name": "Control Point 54",
                "key": "cpoint54",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 54 of the effect will be at this entity's location. If control point 53 is not set, this will be ignored."
            },
            {
                "name": "Control Point 55",
                "key": "cpoint55",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 55 of the effect will be at this entity's location. If control point 54 is not set, this will be ignored."
            },
            {
                "name": "Control Point 56",
                "key": "cpoint56",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 56 of the effect will be at this entity's location. If control point 55 is not set, this will be ignored."
            },
            {
                "name": "Control Point 57",
                "key": "cpoint57",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 57 of the effect will be at this entity's location. If control point 56 is not set, this will be ignored."
            },
            {
                "name": "Control Point 58",
                "key": "cpoint58",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 58 of the effect will be at this entity's location. If control point 57 is not set, this will be ignored."
            },
            {
                "name": "Control Point 59",
                "key": "cpoint59",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 59 of the effect will be at this entity's location. If control point 58 is not set, this will be ignored."
            },
            {
                "name": "Control Point 60",
                "key": "cpoint60",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 60 of the effect will be at this entity's location. If control point 59 is not set, this will be ignored."
            },
            {
                "name": "Control Point 61",
                "key": "cpoint61",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 61 of the effect will be at this entity's location. If control point 60 is not set, this will be ignored."
            },
            {
                "name": "Control Point 62",
                "key": "cpoint62",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 62 of the effect will be at this entity's location. If control point 61 is not set, this will be ignored."
            },
            {
                "name": "Control Point 63",
                "key": "cpoint63",
                "type": "target_destination",
                "default": "",
                "desc": "If set, control point 63 of the effect will be at this entity's location. If control point 62 is not set, this will be ignored."
            },
            {
                "name": "Control Point 1's Parent",
                "key": "cpoint1_parent",
                "type": "integer",
                "default": "0",
                "desc": "If set and nonzero, control point 1 of the effect will use this control point for its parent."
            },
            {
                "name": "Control Point 2's Parent",
                "key": "cpoint2_parent",
                "type": "integer",
                "default": "0",
                "desc": "If set and nonzero, control point 2 of the effect will use this control point for its parent."
            },
            {
                "name": "Control Point 3's Parent",
                "key": "cpoint3_parent",
                "type": "integer",
                "default": "0",
                "desc": "If set and nonzero, control point 3 of the effect will use this control point for its parent."
            },
            {
                "name": "Control Point 4's Parent",
                "key": "cpoint4_parent",
                "type": "integer",
                "default": "0",
                "desc": "If set and nonzero, control point 4 of the effect will use this control point for its parent."
            },
            {
                "name": "Control Point 5's Parent",
                "key": "cpoint5_parent",
                "type": "integer",
                "default": "0",
                "desc": "If set and nonzero, control point 5 of the effect will use this control point for its parent."
            },
            {
                "name": "Control Point 6's Parent",
                "key": "cpoint6_parent",
                "type": "integer",
                "default": "0",
                "desc": "If set and nonzero, control point 6 of the effect will use this control point for its parent."
            },
            {
                "name": "Control Point 7's Parent",
                "key": "cpoint7_parent",
                "type": "integer",
                "default": "0",
                "desc": "If set and nonzero, control point 7 of the effect will use this control point for its parent."
            }
        ],
        "inputs": [
            {
                "name": "Start",
                "type": "void",
                "desc": "Tell the particle system to start emitting."
            },
            {
                "name": "Stop",
                "type": "void",
                "desc": "Tell the particle system to stop emitting."
            },
            {
                "name": "StopPlayEndCap",
                "type": "void",
                "desc": "Tell the particle system to stop emitting and play its End Cap Effect."
            },
            {
                "name": "DestroyImmediately",
                "type": "void",
                "desc": "Destroy the particle system and remove all particles immediately."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_placement_helper",
        "desc": "Portal Placement Helper, indicates where portals will snap to. The arrow points to the 'up' diection for the portal.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Radius",
                "key": "radius",
                "type": "float",
                "default": "16",
                "desc": "Radius in which to influence placement."
            },
            {
                "name": "Proxy Entity Name",
                "key": "proxy_name",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity we want to use for our real placement position."
            },
            {
                "name": "Attach Entity Name",
                "key": "attach_target_name",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity we want to force our attachment to. Ensures this applies to the correct brush. Needs parent!"
            },
            {
                "name": "Use helper's angles",
                "key": "snap_to_helper_angles",
                "type": "boolean",
                "default": "No",
                "desc": "Portals will lock to the angles, instead of rotating in all directions.."
            },
            {
                "name": "Force Placement",
                "key": "force_placement",
                "type": "boolean",
                "default": "No",
                "desc": "Force portals to lock to this helper, no matter what. With this disabled the helper will automatically deactivate temporarily, so that you can place portals finely."
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnObjectPlaced",
                "type": "void",
                "desc": "A portal has been successfully placed using us as a guide."
            },
            {
                "name": "OnObjectPlacedSize",
                "type": "integer",
                "desc": "When a portal is successfully placed, this sends the scale level as an out value"
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "info_player_deathmatch",
        "desc": "",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_player_ping_detector",
        "desc": "Detects a specific Co-op player's pings, and optionally rotates a func_tank to face towards them (as seen in the Calibration Course)",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Func_Tank Entity",
                "key": "functankname",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the func_tank that will be told to look at the ping location when detected."
            },
            {
                "name": "Player to Observe",
                "key": "teamtolookat",
                "type": "choices",
                "default": "P-Body (2)",
                "desc": "Which player's pings to look at.",
                "choices": {
                    "Both": "1",
                    "ATLAS": "3",
                    "P-Body": "2"
                }
            },
            {
                "name": "Default State",
                "key": "enabled",
                "type": "choices",
                "default": "Enabled (1)",
                "desc": "Is this entity enabled by default or not?",
                "choices": {
                    "Disabled": "0",
                    "Enabled": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Starts listening for pings and will fire outputs when found."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable this entity from listening for pings."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle from Enabled to Disabled and vice versa."
            }
        ],
        "outputs": [
            {
                "name": "OnPingDetected",
                "type": "void",
                "desc": "Fired when a ping is detected."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "info_player_start",
        "desc": "This entity indicates the position and facing direction at which the player will spawn. Any number of info_player_start entities may be placed in a map for when working in cordoned-off portions of the map. When multiple info_player_start entities are present in a map, set the 'Master' spawnflag on one of them to indicate which one should be used when running the entire map.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Master (Has priority if multiple info_player_starts exist)": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_playtest_manager",
        "desc": "Manages playtest sessions.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "BeginPlaytest",
                "type": "void",
                "desc": "Starts the playtest session"
            },
            {
                "name": "EndPlaytest",
                "type": "void",
                "desc": "Ends playtest session"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_portal_gamerules",
        "desc": "Determines game various rules for gameplay",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Enable health regeneration",
                "key": "enableregen",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Equip long-fall boots",
                "key": "equipboots",
                "type": "boolean",
                "default": "No",
                "desc": "Disabling this will essentially enable fall damage"
            },
            {
                "name": "Equip Portal Gun",
                "key": "equipportalgun",
                "type": "choices",
                "default": "None (0)",
                "desc": "",
                "choices": {
                    "None": "0",
                    "Orange": "1",
                    "Blue": "2",
                    "Dual Portal Device": "3",
                    "Potato Gun": "4"
                }
            },
            {
                "name": "Equip paint gun",
                "key": "equippaintgun",
                "type": "choices",
                "default": "None (0)",
                "desc": "",
                "choices": {
                    "None": "0",
                    "Basic paint gun": "1",
                    "Fully-upgraded paint gun": "2"
                }
            },
            {
                "name": "Max health for players",
                "key": "maxhealth",
                "type": "integer",
                "default": "100",
                "desc": ""
            },
            {
                "name": "Co-op Game type",
                "key": "gametype",
                "type": "choices",
                "default": "Default (0)",
                "desc": "Sets the co-op game type. This is ignored if the game isn't running in co-op mode.",
                "choices": {
                    "Default": "0",
                    "Co-op 2-guns": "1",
                    "Co-op versus mode": "2",
                    "Co-op versus mode and 2-guns": "3"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_projecteddecal",
        "desc": "An entity that projects a decal onto the world (or props). If the decal has no target name, it will immediately apply itself when the level is loaded. If it has a name specified, it won't apply until it receives the 'Activate' input.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Texture",
                "key": "texture",
                "type": "material",
                "default": "",
                "desc": "The texture used for the decal."
            },
            {
                "name": "Distance",
                "key": "distance",
                "type": "float",
                "default": "64",
                "desc": "Distance from the origin to project the decal."
            }
        ],
        "inputs": [
            {
                "name": "Activate",
                "type": "void",
                "desc": "Force the decal to apply itself to the world."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_target",
        "desc": "An entity that does nothing. Very useful as a positioning entity for other entities to refer to (i.e. the endpoint of an env_beam)",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Transmit to client (respect PVS)": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Always transmit to client (ignore PVS)": {
                        "default": false,
                        "num": 2
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_target_instructor_hint",
        "desc": "A generic target that gets replicated to the client for hud hint targeting.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_target_personality_sphere",
        "desc": "Personality Sphere Info Target",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Sphere Line",
                "key": "sphereline",
                "type": "string",
                "default": "",
                "desc": "Line sphere will speak when we are looking at this target."
            },
            {
                "name": "Radius",
                "key": "radius",
                "type": "float",
                "default": "16",
                "desc": "Radius of this object. "
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_teleport_destination",
        "desc": "An entity that does nothing itself, but can be used to specify the destination for a trigger_teleport entity. An info_target can be used instead.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "infodecal",
        "desc": "An entity that places a decal on the world. If the decal has no target name, it will immediately apply itself when the level is loaded.If it has a name specified, it won't apply until it receives the 'Activate' input.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Texture",
                "key": "texture",
                "type": "material",
                "default": "",
                "desc": "The texture used for the decal."
            },
            {
                "name": "Low Priority",
                "key": "lowpriority",
                "type": "boolean",
                "default": "No",
                "desc": "Allow the decal to be overwritten by other decals when needed. This also makes the decal not persist across savegames."
            }
        ],
        "inputs": [
            {
                "name": "Activate",
                "type": "void",
                "desc": "Force the decal to apply itself to the world."
            }
        ],
        "outputs": []
    },
    {
        "type": "ROPES",
        "classname": "keyframe_track",
        "desc": "Animation KeyFrame",
        "bases": [
            "BaseEntityPoint",
            "KeyFrame"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "light",
        "desc": "An invisible omnidirectional lightsource.",
        "bases": [
            "BaseEntityPoint",
            "BaseLight"
        ],
        "keyvalues": [
            {
                "name": "Remove After Compile",
                "key": "_removeaftercompile",
                "type": "boolean",
                "default": "No",
                "desc": "If set, removes this entity after processing the map with VRAD"
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Initially dark": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "light_directional",
        "desc": "A directional light with no falloff. Similar to sunlight in light_environment.",
        "bases": [
            "Angles"
        ],
        "keyvalues": [
            {
                "name": "Pitch",
                "key": "pitch",
                "type": "integer",
                "default": "0",
                "desc": "The downward pitch of the light from the sun. 0 is horizontal, -90 is straight down."
            },
            {
                "name": "Brightness",
                "key": "_light",
                "type": "color255",
                "default": "255 255 255 200",
                "desc": ""
            },
            {
                "name": "BrightnessHDR",
                "key": "_lighthdr",
                "type": "color255",
                "default": "-1 -1 -1 1",
                "desc": ""
            },
            {
                "name": "BrightnessScaleHDR",
                "key": "_lightscalehdr",
                "type": "float",
                "default": "0.7",
                "desc": "Amount to scale the light by when compiling for HDR."
            },
            {
                "name": "SpreadAngle",
                "key": "sunspreadangle",
                "type": "float",
                "default": "0",
                "desc": "The angular extent of the light for casting soft shadows. Higher numbers are more diffuse. 5 is a good starting value."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "light_dynamic",
        "desc": "An invisible lightsource that changes in some way over time.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Entity to point at",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The name of an entity in the map that the dynamic light will point at."
            },
            {
                "name": "Light color",
                "key": "_light",
                "type": "color255",
                "default": "255 255 255 200",
                "desc": ""
            },
            {
                "name": "Light brightness",
                "key": "brightness",
                "type": "integer",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Inner (bright) angle",
                "key": "_inner_cone",
                "type": "integer",
                "default": "30",
                "desc": ""
            },
            {
                "name": "Outer (fading) angle",
                "key": "_cone",
                "type": "integer",
                "default": "45",
                "desc": ""
            },
            {
                "name": "Pitch",
                "key": "pitch",
                "type": "integer",
                "default": "-90",
                "desc": ""
            },
            {
                "name": "Maximum distance",
                "key": "distance",
                "type": "float",
                "default": "120",
                "desc": "This is the distance that light is allowed to cast, in units."
            },
            {
                "name": "Spotlight end radius",
                "key": "spotlight_radius",
                "type": "float",
                "default": "80",
                "desc": "This is the radius of the light, in units, at the object that it is hitting."
            },
            {
                "name": "Appearance",
                "key": "style",
                "type": "choices",
                "default": "Normal (0)",
                "desc": "",
                "choices": {
                    "Normal": "0",
                    "Fluorescent flicker": "10",
                    "Slow, strong pulse": "2",
                    "Slow pulse, noblack": "11",
                    "Gentle pulse": "5",
                    "Flicker A": "1",
                    "Flicker B": "6",
                    "Candle A": "3",
                    "Candle B": "7",
                    "Candle C": "8",
                    "Fast strobe": "4",
                    "Slow strobe": "9"
                }
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Do not light world (better perf)": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Do not light models": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Add Displacement Alpha": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Subtract Displacement Alpha": {
                        "default": false,
                        "num": 8
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Color",
                "type": "color255",
                "desc": "Set the light's render color (R G B)."
            },
            {
                "name": "brightness",
                "type": "integer",
                "desc": "Set the light brightness."
            },
            {
                "name": "distance",
                "type": "float",
                "desc": "Set the maximum light distance."
            },
            {
                "name": "_inner_cone",
                "type": "integer",
                "desc": "Set the inner (bright) angle."
            },
            {
                "name": "_cone",
                "type": "integer",
                "desc": "Set the outer (fading) angle."
            },
            {
                "name": "spotlight_radius",
                "type": "float",
                "desc": "Set the radius of the spotlight at the end point."
            },
            {
                "name": "style",
                "type": "integer",
                "desc": "Change the lightstyle (see Appearance field for possible values)."
            },
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turn the light off."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Turn the light on."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the light on/off."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "light_environment",
        "desc": "Sets the color and angle of the light from the sun and sky.",
        "bases": [
            "BaseEntityPoint",
            "Angles"
        ],
        "keyvalues": [
            {
                "name": "Pitch",
                "key": "pitch",
                "type": "angle_negative_pitch",
                "default": "0",
                "desc": "The downward pitch of the light from the sun. 0 is horizontal, -90 is straight down."
            },
            {
                "name": "Brightness",
                "key": "_light",
                "type": "color255",
                "default": "255 255 255 200",
                "desc": ""
            },
            {
                "name": "Ambient light",
                "key": "_ambient",
                "type": "color255",
                "default": "255 255 255 20",
                "desc": ""
            },
            {
                "name": "BrightnessHDR",
                "key": "_lighthdr",
                "type": "color255",
                "default": "-1 -1 -1 1",
                "desc": ""
            },
            {
                "name": "BrightnessScaleHDR",
                "key": "_lightscalehdr",
                "type": "float",
                "default": "1",
                "desc": "Amount to scale the light by when compiling for HDR."
            },
            {
                "name": "AmbientHDR",
                "key": "_ambienthdr",
                "type": "color255",
                "default": "-1 -1 -1 1",
                "desc": ""
            },
            {
                "name": "AmbientScaleHDR",
                "key": "_ambientscalehdr",
                "type": "float",
                "default": "1",
                "desc": "Amount to scale the ambient light by when compiling for hdr."
            },
            {
                "name": "SunSpreadAngle",
                "key": "sunspreadangle",
                "type": "float",
                "default": "5",
                "desc": "The angular extent of the sun for casting soft shadows. Higher numbers are more diffuse. 5 is a good starting value."
            },
            {
                "name": "Appearance",
                "key": "style",
                "type": "choices",
                "default": "Normal (0)",
                "desc": "",
                "choices": {
                    "Normal": "0",
                    "Fluorescent flicker": "10",
                    "Slow, strong pulse": "2",
                    "Slow pulse, noblack": "11",
                    "Gentle pulse": "5",
                    "Flicker A": "1",
                    "Flicker B": "6",
                    "Candle A": "3",
                    "Candle B": "7",
                    "Candle C": "8",
                    "Fast strobe": "4",
                    "Slow strobe": "9",
                    "Underwater light mutation": "12"
                }
            },
            {
                "name": "Custom Appearance",
                "key": "pattern",
                "type": "string",
                "default": "",
                "desc": "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turn the Sun on."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "The the Sun off."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the Sun's current state."
            },
            {
                "name": "SetPattern",
                "type": "string",
                "desc": "Set a custom pattern of light brightness for the Sun. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
            },
            {
                "name": "FadeToPattern",
                "type": "string",
                "desc": "Fades from first value in old pattern, to first value in the new given pattern. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "light_spot",
        "desc": "An invisible and directional spotlight.",
        "bases": [
            "BaseEntityPoint",
            "BaseLight"
        ],
        "keyvalues": [
            {
                "name": "Entity to point at",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The name of an entity in the map that the spotlight will point at. This will override the spotlight's angles."
            },
            {
                "name": "Inner (bright) angle",
                "key": "_inner_cone",
                "type": "integer",
                "default": "30",
                "desc": ""
            },
            {
                "name": "Outer (fading) angle",
                "key": "_cone",
                "type": "integer",
                "default": "45",
                "desc": ""
            },
            {
                "name": "Focus",
                "key": "_exponent",
                "type": "integer",
                "default": "1",
                "desc": ""
            },
            {
                "name": "Remove After Compile",
                "key": "_removeaftercompile",
                "type": "boolean",
                "default": "No",
                "desc": "If set, removes this entity after processing the map with VRAD"
            },
            {
                "name": "Pitch",
                "key": "pitch",
                "type": "angle_negative_pitch",
                "default": "-90",
                "desc": ""
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Initially dark": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "linked_portal_door",
        "desc": "A door which is linked by a portal to another 'linked_portal_door' entity. Portal shots will pass through, and no effect appears at the edges.",
        "bases": [
            "BaseEntityPoint",
            "LinkedPortalDoor",
            "ToggleDraw"
        ],
        "keyvalues": [
            {
                "name": "Linked Partner",
                "key": "partnername",
                "type": "target_destination",
                "default": "",
                "desc": "Another 'linked_portal_door' entity which will link to this one."
            },
            {
                "name": "Half-Width (G)",
                "key": "width",
                "type": "integer",
                "default": "64",
                "desc": "Half the width of the portal, on the Green axis."
            },
            {
                "name": "Half-Height (B)",
                "key": "height",
                "type": "integer",
                "default": "64",
                "desc": "Half the height of the portal, on the Blue axis."
            },
            {
                "name": "Static Portal",
                "key": "isstatic",
                "type": "boolean",
                "default": "No",
                "desc": "If set to true, this portal does not ever move or toggle, and allows VRAD to cast light through it."
            },
            {
                "name": "Start Active",
                "key": "startactive",
                "type": "boolean",
                "default": "No",
                "desc": "Whether to start the linkage as active from the start."
            }
        ],
        "inputs": [
            {
                "name": "SetWidth",
                "type": "float",
                "desc": "Sets the width of this portal and the partner. Clamped to 1-1024"
            },
            {
                "name": "SetHeight",
                "type": "float",
                "desc": "Sets the height of this portal and the partner. Clamped to 1-1024"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "logic_achievement",
        "desc": "Sends an achievement system related event from the map to the achievement system.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Achievement Name",
                "key": "achievementname",
                "type": "string",
                "default": "",
                "desc": "The name of the achievement to be awarded when this entity receives a 'FireEvent' input."
            }
        ],
        "inputs": [
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the relay between enabled and disabled."
            },
            {
                "name": "FireEvent",
                "type": "void",
                "desc": "Tells the achievement system the specifed event has occured."
            },
            {
                "name": "SetTargetPlayer",
                "type": "target_destination",
                "desc": "Set the player who will be awarded this achievement."
            }
        ],
        "outputs": [
            {
                "name": "OnFired",
                "type": "void",
                "desc": "When the event fires, this fires."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_active_autosave",
        "desc": "An entity that is used to look for opportunities to autosave.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Initiation Hit Points",
                "key": "minimumhitpoints",
                "type": "integer",
                "default": "30",
                "desc": "Start looking for an opportunity to save if player drops below this hitpoint level."
            },
            {
                "name": "Trigger Hit Points",
                "key": "triggerhitpoints",
                "type": "integer",
                "default": "75",
                "desc": "If started looking for an opportunity, save when hitpoints reach this level."
            },
            {
                "name": "Time to trigger",
                "key": "timetotrigget",
                "type": "float",
                "default": "0",
                "desc": "If > 0, how long to try and get a save off before giving up."
            },
            {
                "name": "Dangerous time",
                "key": "dangeroustime",
                "type": "float",
                "default": "10",
                "desc": "If 0, just autosave. Otherwise, do an autosavedangerous with this time threshold."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable the entity"
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Enable the entity"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "logic_auto",
        "desc": "Fires outputs when a map spawns. If 'Remove on fire' flag is set the logic_auto is deleted after firing. It can be set to check a global state before firing. This allows you to only fire events based on what took place in a previous map.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Remove on fire": {
                        "default": true,
                        "num": 1
                    }
                }
            },
            {
                "name": "Global State to Read",
                "key": "globalstate",
                "type": "choices",
                "default": "--- None --- ()",
                "desc": "If set, this specifies a global state to check before firing. The OnMapSpawn output will only fire if the global state is set.",
                "choices": {
                    "--- None ---": "",
                    "Game is running on a console": "is_console",
                    "Game is running on a PC": "is_pc"
                }
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnMapSpawn",
                "type": "void",
                "desc": "Fired when the map is loaded for any reason."
            },
            {
                "name": "OnNewGame",
                "type": "void",
                "desc": "Fired when the map is loaded to start a new game."
            },
            {
                "name": "OnLoadGame",
                "type": "void",
                "desc": "Fired when the map is loaded from a saved game."
            },
            {
                "name": "OnMapTransition",
                "type": "void",
                "desc": "Fired when the map is loaded due to a level transition."
            },
            {
                "name": "OnBackgroundMap",
                "type": "void",
                "desc": "Fired when the map is loaded as a background to the main menu."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_autosave",
        "desc": "An entity that is used to force an autosave.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Force New Level Unit",
                "key": "newlevelunit",
                "type": "boolean",
                "default": "No",
                "desc": "If set, the save will discard any savedata from previous levels, for the purpose of keeping savegame filesizes down. Can only be safely used if there is no way for the player to return to previous levels."
            },
            {
                "name": "Minimum Hit Points",
                "key": "minimumhitpoints",
                "type": "integer",
                "default": "0",
                "desc": "Don't save dangerous when player has less than this many hitpoints."
            },
            {
                "name": "Minimum Hit Points to Commit",
                "key": "minhitpointstocommit",
                "type": "integer",
                "default": "0",
                "desc": "Minimum hitpoints required to commit to save. The save will be made if you have at least Minimum Hit Points, but when the autosave timer expires, the autosave is only kept if you have at least Min Hitpoints to Commit."
            }
        ],
        "inputs": [
            {
                "name": "Save",
                "type": "void",
                "desc": "Force an autosave."
            },
            {
                "name": "SaveDangerous",
                "type": "float",
                "desc": "Force an autosave as autosavedangerous.sav. If the player is alive after the passed number of seconds it replaces the standard auto save."
            },
            {
                "name": "SetMinHitpointsThreshold",
                "type": "integer",
                "desc": "Set MinimumHitPoints to this."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "logic_branch",
        "desc": "Tests a boolean value and fires an output based on whether the value is true or false. Use this entity to branch between two potential sets of events.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Initial value",
                "key": "initialvalue",
                "type": "choices",
                "default": "0 (False) (0)",
                "desc": "Initial value for the boolean value (0 or 1).",
                "choices": {
                    "0 (False)": "0",
                    "1 (True)": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "SetValue",
                "type": "boolean",
                "desc": "Set the boolean value without performing the comparison. Use this to hold a value for a future test."
            },
            {
                "name": "SetValueTest",
                "type": "boolean",
                "desc": "Set the boolean value and test it, firing OnTrue or OnFalse based on the new value."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the boolean value between true and false."
            },
            {
                "name": "ToggleTest",
                "type": "void",
                "desc": "Toggle the boolean value and tests it, firing OnTrue or OnFalse based on the new value."
            },
            {
                "name": "Test",
                "type": "void",
                "desc": "Test the input value and fire OnTrue or OnFalse based on the value."
            }
        ],
        "outputs": [
            {
                "name": "OnTrue",
                "type": "boolean",
                "desc": "Fired when the input value is true (nonzero)."
            },
            {
                "name": "OnFalse",
                "type": "boolean",
                "desc": "Fired when the input value is false (zero)."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_branch_listener",
        "desc": "Contains a list of logic_branch entities and fires outputs when the state of any of the logic_branches changes.\n\nThis entity is used to fire an event when a set of conditions are all satisfied.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Logic Branch 01",
                "key": "branch01",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            },
            {
                "name": "Logic Branch 02",
                "key": "branch02",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            },
            {
                "name": "Logic Branch 03",
                "key": "branch03",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            },
            {
                "name": "Logic Branch 04",
                "key": "branch04",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            },
            {
                "name": "Logic Branch 05",
                "key": "branch05",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            },
            {
                "name": "Logic Branch 06",
                "key": "branch06",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            },
            {
                "name": "Logic Branch 07",
                "key": "branch07",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            },
            {
                "name": "Logic Branch 08",
                "key": "branch08",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            },
            {
                "name": "Logic Branch 09",
                "key": "branch09",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            },
            {
                "name": "Logic Branch 10",
                "key": "branch10",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            },
            {
                "name": "Logic Branch 11",
                "key": "branch11",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            },
            {
                "name": "Logic Branch 12",
                "key": "branch12",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            },
            {
                "name": "Logic Branch 13",
                "key": "branch13",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            },
            {
                "name": "Logic Branch 14",
                "key": "branch14",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            },
            {
                "name": "Logic Branch 15",
                "key": "branch15",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            },
            {
                "name": "Logic Branch 16",
                "key": "branch16",
                "type": "target_destination",
                "default": "",
                "desc": "The name of one or more logic_branches (wildcards allowed)."
            }
        ],
        "inputs": [
            {
                "name": "Test",
                "type": "void",
                "desc": "Tests the state of all the logic_branches in the list and fires the appropriate output."
            },
            {
                "name": "UniqueStateOn",
                "type": "void",
                "desc": "Set the state of a logic_branch unique to this input entity to 1. This will generate a branch added to the listener."
            },
            {
                "name": "UniqueStateOff",
                "type": "void",
                "desc": "Set the state of a logic_branch unique to this input entity to 0. This will generate a branch added to the listener."
            },
            {
                "name": "UniqueStateSet",
                "type": "boolean",
                "desc": "Set the state of a logic_branch unique to this input entity to the provided value. This will generate a branch added to the listener."
            },
            {
                "name": "UniqueStateToggle",
                "type": "void",
                "desc": "Toggle the state of a logic_branch unique to this input entity. This will generate a branch added to the listener."
            }
        ],
        "outputs": [
            {
                "name": "OnAllTrue",
                "type": "void",
                "desc": "Fired when all the logic_branches in the list become true."
            },
            {
                "name": "OnAllFalse",
                "type": "void",
                "desc": "Fired when all the logic_branches in the list become false."
            },
            {
                "name": "OnMixed",
                "type": "void",
                "desc": "Fired when one of the logic branches in the list changes, but some are true and some are false."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_case",
        "desc": "Compares an input to up to 16 preset values. If the input value is the same as any of the preset values, an output corresponding to that value is fired.\n\nFor example: if Case01 is set to 2 and Case02 is set to 5, and the input value is 5, the OnCase02 output will be fired.\n\nThis entity can also be used to select from a number of random targets via the PickRandom input. One of the OnCase outputs that is connected to another entity will be picked at random and fired.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Multiple case hits allowed",
                "key": "multiplecasesallowed",
                "type": "boolean",
                "default": "No",
                "desc": "If an input value matches a given case, are we allowed to test the rest of the cases or should we stop there? Don't worry about this if you're only using this entity for PickRandom."
            },
            {
                "name": "Case 01",
                "key": "case01",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            },
            {
                "name": "Case 02",
                "key": "case02",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            },
            {
                "name": "Case 03",
                "key": "case03",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            },
            {
                "name": "Case 04",
                "key": "case04",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            },
            {
                "name": "Case 05",
                "key": "case05",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            },
            {
                "name": "Case 06",
                "key": "case06",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            },
            {
                "name": "Case 07",
                "key": "case07",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            },
            {
                "name": "Case 08",
                "key": "case08",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            },
            {
                "name": "Case 09",
                "key": "case09",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            },
            {
                "name": "Case 10",
                "key": "case10",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            },
            {
                "name": "Case 11",
                "key": "case11",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            },
            {
                "name": "Case 12",
                "key": "case12",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            },
            {
                "name": "Case 13",
                "key": "case13",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            },
            {
                "name": "Case 14",
                "key": "case14",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            },
            {
                "name": "Case 15",
                "key": "case15",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            },
            {
                "name": "Case 16",
                "key": "case16",
                "type": "string",
                "default": "",
                "desc": "If the input value matches this, fire the corresponding output."
            }
        ],
        "inputs": [
            {
                "name": "InValue",
                "type": "string",
                "desc": "Compares the Input value to the case values, and fires the appropriate output, if any."
            },
            {
                "name": "InValueNoTest",
                "type": "string",
                "desc": "Stores the input value to be tested later."
            },
            {
                "name": "Test",
                "type": "void",
                "desc": "Compares the stored value to the case values, and fires the appropriate output, if any."
            },
            {
                "name": "PickRandom",
                "type": "void",
                "desc": "Fires a random OnCase output with at least one connection."
            },
            {
                "name": "PickRandomShuffle",
                "type": "void",
                "desc": "Fires a random OnCase output with at least one connection, with no repeats until all cases have been picked, at which point the shuffle starts over."
            }
        ],
        "outputs": [
            {
                "name": "OnCase01",
                "type": "void",
                "desc": "Fired when the input value equals the Case01 value."
            },
            {
                "name": "OnCase02",
                "type": "void",
                "desc": "Fired when the input value equals the Case02 value."
            },
            {
                "name": "OnCase03",
                "type": "void",
                "desc": "Fired when the input value equals the Case03 value."
            },
            {
                "name": "OnCase04",
                "type": "void",
                "desc": "Fired when the input value equals the Case04 value."
            },
            {
                "name": "OnCase05",
                "type": "void",
                "desc": "Fired when the input value equals the Case05 value."
            },
            {
                "name": "OnCase06",
                "type": "void",
                "desc": "Fired when the input value equals the Case06 value."
            },
            {
                "name": "OnCase07",
                "type": "void",
                "desc": "Fired when the input value equals the Case07 value."
            },
            {
                "name": "OnCase08",
                "type": "void",
                "desc": "Fired when the input value equals the Case08 value."
            },
            {
                "name": "OnCase09",
                "type": "void",
                "desc": "Fired when the input value equals the Case09 value."
            },
            {
                "name": "OnCase10",
                "type": "void",
                "desc": "Fired when the input value equals the Case10 value."
            },
            {
                "name": "OnCase11",
                "type": "void",
                "desc": "Fired when the input value equals the Case11 value."
            },
            {
                "name": "OnCase12",
                "type": "void",
                "desc": "Fired when the input value equals the Case12 value."
            },
            {
                "name": "OnCase13",
                "type": "void",
                "desc": "Fired when the input value equals the Case13 value."
            },
            {
                "name": "OnCase14",
                "type": "void",
                "desc": "Fired when the input value equals the Case14 value."
            },
            {
                "name": "OnCase15",
                "type": "void",
                "desc": "Fired when the input value equals the Case15 value."
            },
            {
                "name": "OnCase16",
                "type": "void",
                "desc": "Fired when the input value equals the Case16 value."
            },
            {
                "name": "OnDefault",
                "type": "string",
                "desc": "Fired when the input value does not equal any of the Case values. Passes the input value."
            },
            {
                "name": "OnUsed",
                "type": "string",
                "desc": "Fired when an input value is received, regardless of whether it matches a case. Passes the input value."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_choreographed_scene",
        "desc": "Manages a choreographed scene of one or more actors.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Scene file",
                "key": "scenefile",
                "type": "scene",
                "default": "",
                "desc": "The scene that will play when this entity is triggered."
            },
            {
                "name": "Target 1",
                "key": "target1",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Target 2",
                "key": "target2",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Target 3",
                "key": "target3",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Target 4",
                "key": "target4",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Target 5",
                "key": "target5",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Target 6",
                "key": "target6",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Target 7",
                "key": "target7",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Target 8",
                "key": "target8",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "If an Actor is talking...",
                "key": "busyactor",
                "type": "choices",
                "default": "Wait for actor to finish (1)",
                "desc": "What to do if an actor this scene needs is already talking when this scene is told to start.",
                "choices": {
                    "Start immediately": "0",
                    "Wait for actor to finish": "1",
                    "Interrupt at next interrupt event": "2",
                    "Cancel at next interrupt event": "3"
                }
            },
            {
                "name": "On Player Death",
                "key": "onplayerdeath",
                "type": "choices",
                "default": "Do Nothing (0)",
                "desc": "What should this entity do if the player dies",
                "choices": {
                    "Do Nothing": "0",
                    "Cancel Script and return to AI": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "Start",
                "type": "void",
                "desc": "Starts playback of the scene file"
            },
            {
                "name": "Pause",
                "type": "void",
                "desc": "Pauses playback of the scene file"
            },
            {
                "name": "Resume",
                "type": "void",
                "desc": "Resumes playback of the scene if it has been paused"
            },
            {
                "name": "Cancel",
                "type": "void",
                "desc": "Cancels playback of the scene"
            },
            {
                "name": "CancelAtNextInterrupt",
                "type": "void",
                "desc": "Cancels playback of the scene at the next interrupt event in the scene."
            },
            {
                "name": "PitchShift",
                "type": "float",
                "desc": "Multiplies the the pitch"
            },
            {
                "name": "InterjectResponse",
                "type": "string",
                "desc": "Finds an actor who can respond to the specified concept string while the scene continues playing"
            },
            {
                "name": "StopWaitingForActor",
                "type": "void",
                "desc": "Stop waiting on an actor to stop talking."
            },
            {
                "name": "Trigger",
                "type": "integer",
                "desc": "Fires the OnTrigger output of the specified number."
            },
            {
                "name": "SetTarget1",
                "type": "target_destination",
                "desc": "Sets Target 1 to the specified entity."
            },
            {
                "name": "SetTarget2",
                "type": "target_destination",
                "desc": "Sets Target 2 to the specified entity."
            },
            {
                "name": "SetTarget3",
                "type": "target_destination",
                "desc": "Sets Target 3 to the specified entity."
            },
            {
                "name": "SetTarget4",
                "type": "target_destination",
                "desc": "Sets Target 4 to the specified entity."
            }
        ],
        "outputs": [
            {
                "name": "OnStart",
                "type": "void",
                "desc": "The scene has started"
            },
            {
                "name": "OnCompletion",
                "type": "void",
                "desc": "The scene has completed"
            },
            {
                "name": "OnCanceled",
                "type": "void",
                "desc": "The scene has been canceled"
            },
            {
                "name": "OnTrigger1",
                "type": "void",
                "desc": "Scene trigger 1"
            },
            {
                "name": "OnTrigger2",
                "type": "void",
                "desc": "Scene trigger 2"
            },
            {
                "name": "OnTrigger3",
                "type": "void",
                "desc": "Scene trigger 3"
            },
            {
                "name": "OnTrigger4",
                "type": "void",
                "desc": "Scene trigger 4"
            },
            {
                "name": "OnTrigger5",
                "type": "void",
                "desc": "Scene trigger 5"
            },
            {
                "name": "OnTrigger6",
                "type": "void",
                "desc": "Scene trigger 6"
            },
            {
                "name": "OnTrigger7",
                "type": "void",
                "desc": "Scene trigger 7"
            },
            {
                "name": "OnTrigger8",
                "type": "void",
                "desc": "Scene trigger 8"
            },
            {
                "name": "OnTrigger9",
                "type": "void",
                "desc": "Scene trigger 9"
            },
            {
                "name": "OnTrigger10",
                "type": "void",
                "desc": "Scene trigger 10"
            },
            {
                "name": "OnTrigger11",
                "type": "void",
                "desc": "Scene trigger 11"
            },
            {
                "name": "OnTrigger12",
                "type": "void",
                "desc": "Scene trigger 12"
            },
            {
                "name": "OnTrigger13",
                "type": "void",
                "desc": "Scene trigger 13"
            },
            {
                "name": "OnTrigger14",
                "type": "void",
                "desc": "Scene trigger 14"
            },
            {
                "name": "OnTrigger15",
                "type": "void",
                "desc": "Scene trigger 15"
            },
            {
                "name": "OnTrigger16",
                "type": "void",
                "desc": "Scene trigger 16"
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_collision_pair",
        "desc": "An entity that can be used to enables/disable vphysics collisions between two target entities.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Attachment 1",
                "key": "attach1",
                "type": "target_destination",
                "default": "",
                "desc": "The first entity."
            },
            {
                "name": "Attachment 2",
                "key": "attach2",
                "type": "target_destination",
                "default": "",
                "desc": "The second entity."
            },
            {
                "name": "Start with collisions disabled",
                "key": "startdisabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "EnableCollisions",
                "type": "void",
                "desc": "Enable collisions between the first and second entity."
            },
            {
                "name": "DisableCollisions",
                "type": "void",
                "desc": "Disable collisions between the first and second entity."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "logic_compare",
        "desc": "Compares an input value to another value. If the input value is less than the compare value, the OnLessThan output is fired with the input value. If the input value is equal to the compare value, the OnEqualTo output is fired with the input value. If the input value is greater than the compare value, the OnGreaterThan output is fired with the input value.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Initial value",
                "key": "initialvalue",
                "type": "string",
                "default": "",
                "desc": "Initial value for the input value."
            },
            {
                "name": "Compare value",
                "key": "comparevalue",
                "type": "string",
                "default": "",
                "desc": "The value to compare against."
            },
            {
                "name": "Use string length",
                "key": "strlenallowed",
                "type": "boolean",
                "default": "No",
                "desc": "Use the length of the string in the compare value rather than its actual value."
            }
        ],
        "inputs": [
            {
                "name": "Compare",
                "type": "void",
                "desc": "Force a compare of the input value with the compare value."
            },
            {
                "name": "SetValue",
                "type": "string",
                "desc": "Set the value that will be compared against the compare value."
            },
            {
                "name": "SetValueCompare",
                "type": "string",
                "desc": "Set the value that will be compared against the compare value and performs the comparison."
            },
            {
                "name": "SetCompareValue",
                "type": "string",
                "desc": "Set the compare value."
            },
            {
                "name": "SetCompareValueCompare",
                "type": "string",
                "desc": "Sets the compare value and performs the comparison."
            }
        ],
        "outputs": [
            {
                "name": "OnLessThan",
                "type": "string",
                "desc": "Fired when the input value is less than the compare value. Sends the input value as data."
            },
            {
                "name": "OnEqualTo",
                "type": "string",
                "desc": "Fired when the input value is equal to the compare value. Sends the input value as data."
            },
            {
                "name": "OnNotEqualTo",
                "type": "string",
                "desc": "Fired when the input value is different from the compare value. Sends the input value as data."
            },
            {
                "name": "OnGreaterThan",
                "type": "string",
                "desc": "Fired when the input value is greater than the compare value. Sends the input value as data."
            },
            {
                "name": "OnGreaterThanOrEqualTo",
                "type": "string",
                "desc": "Fired when the input value is greater than or equal to the compare value. Sends the input value as data."
            },
            {
                "name": "OnLessThanOrEqualTo",
                "type": "string",
                "desc": "Fired when the input value is greater than or equal to the compare value. Sends the input value as data."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_console",
        "desc": "Sends messages to the console. Not to be confused with point_clientcommand or point_servercommand.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Developer Level",
                "key": "setdevlvl",
                "type": "integer",
                "default": "1",
                "desc": "What level developer messages should appear at."
            },
            {
                "name": "Message Color",
                "key": "setmsgcolor",
                "type": "color255",
                "default": "210 250 255 255",
                "desc": "The color of standard messages."
            },
            {
                "name": "Warning Color",
                "key": "setwarningcolor",
                "type": "color255",
                "default": "255 210 210 255",
                "desc": "The color of warning messages."
            },
            {
                "name": "Don't automatically append \n?",
                "key": "setnewlinenotauto",
                "type": "boolean",
                "default": "No",
                "desc": "Prevents this logic_console from automatically appending a new line each time it prints."
            }
        ],
        "inputs": [
            {
                "name": "SendMsg",
                "type": "string",
                "desc": "Sends a message to the console."
            },
            {
                "name": "SendWarning",
                "type": "string",
                "desc": "Sends a message to the console in red text."
            },
            {
                "name": "SendDevMsg",
                "type": "string",
                "desc": "Sends a message to the console that can only be viewed in developer mode."
            },
            {
                "name": "SendDevWarning",
                "type": "string",
                "desc": "Sends a red-colored message to the console that can only be viewed in developer mode."
            },
            {
                "name": "SetDevLvl",
                "type": "integer",
                "desc": "Sets the level developer messages should appear at."
            },
            {
                "name": "SetMsgColor",
                "type": "color255",
                "desc": "Sets the color of standard messages."
            },
            {
                "name": "SetWarningColor",
                "type": "color255",
                "desc": "Sets the color of warning messages."
            },
            {
                "name": "SetNewLineNotAuto",
                "type": "boolean",
                "desc": "Enables or disables this logic_console's ability to append \n to each message."
            },
            {
                "name": "NewLine",
                "type": "void",
                "desc": "Manually sends \n."
            },
            {
                "name": "DevNewLine",
                "type": "void",
                "desc": "Manually sends \n in the specified developer level."
            },
            {
                "name": "ClearConsole",
                "type": "void",
                "desc": "Clears the console of all output."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "logic_context_accessor",
        "desc": "A logic entity that could read an entity's response contexts. Use the target and context name keyvalues if you want to store a specific target and/or context. Use the 'Test' input to look for the context on the target. The 'OutValue' output will fire with the context's value if it is found.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Target Entity",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The entity with the context to measure."
            },
            {
                "name": "Context Name",
                "key": "context",
                "type": "string",
                "default": "",
                "desc": "The name of the context to measure."
            }
        ],
        "inputs": [
            {
                "name": "Test",
                "type": "void",
                "desc": "Gets the stored context's value from stored target."
            },
            {
                "name": "TestContext",
                "type": "string",
                "desc": "Tests the specified context against the target instead of using the stored context. Does not change the stored context."
            },
            {
                "name": "TestTarget",
                "type": "target_destination",
                "desc": "Tests the specified target against the context instead of using the stored target. Does not change the stored target."
            },
            {
                "name": "SetContext",
                "type": "string",
                "desc": "Sets the context to measure."
            },
            {
                "name": "SetValue",
                "type": "string",
                "desc": "Sets the stored target's stored context value to the specified string."
            },
            {
                "name": "SetTarget",
                "type": "target_destination",
                "desc": "Sets the target entity."
            }
        ],
        "outputs": [
            {
                "name": "OutValue",
                "type": "string",
                "desc": "Fires when a context is found. Passes its value."
            },
            {
                "name": "OnFailed",
                "type": "void",
                "desc": "Fires when this entity fails to find the specified context."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_convar",
        "desc": "A powerful entity that can read the specified ConVar's value. It functions similarly to a logic_branch, except you could also output the value directly. Due to theoretical abuse, players have the option to disable logic_ConVar usage on a map. Use the 'OnDenied' output to prevent any issues from players who have disabled logic_ConVar.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "ConVar",
                "key": "setconvar",
                "type": "string",
                "default": "",
                "desc": "The ConVar to read. Can be serverside or clientside(?)"
            },
            {
                "name": "Compare value",
                "key": "settestvalue",
                "type": "string",
                "default": "",
                "desc": "The value to compare with the ConVar's value during comparisons. You could use <, !=, etc. at the beginning similar to a Response System criterion."
            }
        ],
        "inputs": [
            {
                "name": "SetConVar",
                "type": "string",
                "desc": "Sets the ConVar whose variable will be retrieved."
            },
            {
                "name": "SetTestValue",
                "type": "string",
                "desc": "Sets the value that will be compared with the ConVar variable during comparisons."
            },
            {
                "name": "GetValue",
                "type": "void",
                "desc": "Retrieves the ConVar's value, firing OutValue with its value."
            },
            {
                "name": "Test",
                "type": "void",
                "desc": "Compares the ConVar's value with the compare value."
            }
        ],
        "outputs": [
            {
                "name": "OnTrue",
                "type": "void",
                "desc": "Fired when a comparison is true."
            },
            {
                "name": "OnFalse",
                "type": "void",
                "desc": "Fired when a comparison is false."
            },
            {
                "name": "OutValue",
                "type": "string",
                "desc": "Fired with the GetValue input. Passes the ConVar's current value."
            },
            {
                "name": "OnDenied",
                "type": "void",
                "desc": "Fires when the ConVar is requested and logic_convar is not allowed by the server."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_coop_manager",
        "desc": "Manages two sets of values and can fire outputs based on the state of those values. Useful in coop where you can have players independently setting states on buttons, switches, etc.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Default State A",
                "key": "defaultplayerstatea",
                "type": "choices",
                "default": "False (0)",
                "desc": "The default state of A",
                "choices": {
                    "False": "0",
                    "True": "1"
                }
            },
            {
                "name": "Default State B",
                "key": "defaultplayerstateb",
                "type": "choices",
                "default": "False (0)",
                "desc": "The default state of B",
                "choices": {
                    "False": "0",
                    "True": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "SetStateATrue",
                "type": "void",
                "desc": "Set A to TRUE"
            },
            {
                "name": "SetStateBTrue",
                "type": "void",
                "desc": "Set B to TRUE"
            },
            {
                "name": "SetStateAFalse",
                "type": "void",
                "desc": "Set A to FALSE"
            },
            {
                "name": "SetStateBFalse",
                "type": "void",
                "desc": "Set B to FALSE"
            },
            {
                "name": "ToggleStateA",
                "type": "void",
                "desc": "Toggle A"
            },
            {
                "name": "ToggleStateB",
                "type": "void",
                "desc": "Toggle B"
            }
        ],
        "outputs": [
            {
                "name": "OnChangeToAllTrue",
                "type": "void",
                "desc": "Fires when ALL of the values change to TRUE for the first time."
            },
            {
                "name": "OnChangeToAnyTrue",
                "type": "void",
                "desc": "Fires when ANY of the values change to TRUE for the first time."
            },
            {
                "name": "OnChangeToAllFalse",
                "type": "void",
                "desc": "Fires when ALL of the values change to FALSE for the first time."
            },
            {
                "name": "OnChangeToAnyFalse",
                "type": "void",
                "desc": "Fires when ANY of the values change to FALSE for the first time."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_datadesc_accessor",
        "desc": "A logic entity that could read or write any field in an entity's data description, keyvalue or not, based on its internal name. It otherwise functions identically to logic_keyfield.\n\nYou'd better know what you're doing.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Target Entity",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The entity whose data description will be measured."
            },
            {
                "name": "Element Name",
                "key": "keyname",
                "type": "string",
                "default": "",
                "desc": "The internal name (e.g. m_iName) of the field to measure. Use the ''ent_info_datatable'' command followed by an entity's class name to see all of their fields."
            }
        ],
        "inputs": [
            {
                "name": "Test",
                "type": "void",
                "desc": "Gets the stored field's value from stored target."
            },
            {
                "name": "TestKey",
                "type": "string",
                "desc": "Tests the specified field against the target instead of using the stored field. Does not change the stored field."
            },
            {
                "name": "TestTarget",
                "type": "target_destination",
                "desc": "Tests the specified target against the field instead of using the stored target. Does not change the stored target."
            },
            {
                "name": "SetKey",
                "type": "string",
                "desc": "Sets the field to measure."
            },
            {
                "name": "SetValue",
                "type": "string",
                "desc": "Sets the stored target's stored field to the specified string."
            },
            {
                "name": "SetTarget",
                "type": "target_destination",
                "desc": "Sets the target entity."
            }
        ],
        "outputs": [
            {
                "name": "OutValue",
                "type": "string",
                "desc": "Fires when a field is found. Passes its value."
            },
            {
                "name": "OnFailed",
                "type": "void",
                "desc": "Fires when this entity fails to find the specified field."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_entity_position",
        "desc": "Outputs an entity's position. Prediction operations can be performed as well.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Target",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Who's position should be measured? Use the SetTarget input to change mid-game."
            },
            {
                "name": "Position Type",
                "key": "positiontype",
                "type": "choices",
                "default": "Origin (default) (0)",
                "desc": "What position should be measured.",
                "choices": {
                    "Origin (default)": "0",
                    "Local Origin": "1",
                    "Worldspace Center": "2",
                    "Eyes": "3",
                    "Ears": "4",
                    "Attachment (use parameter keyvalue)": "5"
                }
            },
            {
                "name": "Position Type Parameter",
                "key": "positionparameter",
                "type": "string",
                "default": "",
                "desc": "If using an attachment's position, enter the name of the attachment here."
            }
        ],
        "inputs": [
            {
                "name": "GetPosition",
                "type": "void",
                "desc": "Gets the target's position."
            },
            {
                "name": "SetPosition",
                "type": "vector",
                "desc": "Sets the target's position. Using the default 'Origin' will set absolute origin while using 'Local Origin' will set local origin."
            },
            {
                "name": "PredictPosition",
                "type": "float",
                "desc": "Predicts what position the target will be at in the specified number of seconds."
            }
        ],
        "outputs": [
            {
                "name": "OutPosition",
                "type": "vector",
                "desc": "Outputs the position."
            },
            {
                "name": "OutAngles",
                "type": "vector",
                "desc": "Outputs the angles."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_eventlistener",
        "desc": "An entity that can listen to events fired from code and fire an output when it happens.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Event Name",
                "key": "eventname",
                "type": "string",
                "default": "",
                "desc": "The name of the event that you want to listen for."
            },
            {
                "name": "Start Enabled",
                "key": "isenabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Fetch Event Data",
                "key": "fetcheventdata",
                "type": "boolean",
                "default": "No",
                "desc": "If set, will write the data from the event into the table 'event_data' on this entity."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable the logic_eventlistener."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable the logic_eventlistener."
            }
        ],
        "outputs": [
            {
                "name": "OnEventFired",
                "type": "void",
                "desc": "Fired when the event has been detected."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_eventlistener_itemequip",
        "desc": "An entity that can listen to the item_equip event fired from code and fire and output when it happens and the weapon class or type defined, match.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Weapon Type",
                "key": "weapontype",
                "type": "choices",
                "default": "Don't care (-1)",
                "desc": "",
                "choices": {
                    "Don't care": "-1",
                    "Knife": "0",
                    "Pistol": "1",
                    "Submachinegun": "2",
                    "Rifle": "3",
                    "Shotgun": "4",
                    "Sniper Rifle": "5",
                    "Machinegun": "6",
                    "C4": "7",
                    "Grenade": "8"
                }
            },
            {
                "name": "Weapon Classname",
                "key": "weaponclassname",
                "type": "string",
                "default": "",
                "desc": "The exact weapon class name you want to check for.  i.e. weapon_deagle, weapon_awp, weapon_knife, etc."
            },
            {
                "name": "Start Enabled",
                "key": "isenabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable the logic_eventlistener_itemequip."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable the logic_eventlistener_itemequip."
            }
        ],
        "outputs": [
            {
                "name": "OnEventFired",
                "type": "void",
                "desc": "Fired when the event has been detected."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_format",
        "desc": "Formats a line of text akin to C# String.Format.\nAs curly brackets cannot be used in the help window, please see Mapbase documentation for clear instructions.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Input Value",
                "key": "setinputvalue",
                "type": "string",
                "default": "",
                "desc": "The input value. Should contain {0}, {1}, etc, which will be replaced by the parameters and then output as OutFormattedValue."
            },
            {
                "name": "Parameter 0",
                "key": "setparameter0",
                "type": "string",
                "default": "",
                "desc": "Will replace all instances of {0} in the input value."
            },
            {
                "name": "Parameter 1",
                "key": "setparameter1",
                "type": "string",
                "default": "",
                "desc": "Will replace all instances of {1} in the input value."
            },
            {
                "name": "Parameter 2",
                "key": "setparameter2",
                "type": "string",
                "default": "",
                "desc": "Will replace all instances of {2} in the input value."
            },
            {
                "name": "Parameter 3",
                "key": "setparameter3",
                "type": "string",
                "default": "",
                "desc": "Will replace all instances of {3} in the input value."
            },
            {
                "name": "Parameter 4",
                "key": "setparameter4",
                "type": "string",
                "default": "",
                "desc": "Will replace all instances of {4} in the input value."
            },
            {
                "name": "Parameter 5",
                "key": "setparameter5",
                "type": "string",
                "default": "",
                "desc": "Will replace all instances of {5} in the input value."
            },
            {
                "name": "Parameter 6",
                "key": "setparameter6",
                "type": "string",
                "default": "",
                "desc": "Will replace all instances of {6} in the input value."
            },
            {
                "name": "Parameter 7",
                "key": "setparameter7",
                "type": "string",
                "default": "",
                "desc": "Will replace all instances of {7} in the input value."
            },
            {
                "name": "Backup Parameter",
                "key": "setbackupparameter",
                "type": "string",
                "default": "",
                "desc": "If an invalid parameter is used (e.g. null parameter or asks for a parameter beyond {7}), then this will be used instead. Otherwise just uses '<null>'."
            }
        ],
        "inputs": [
            {
                "name": "GetFormattedValue",
                "type": "void",
                "desc": "Fires OutFormattedValue, which passes the formatted input value."
            },
            {
                "name": "SetInputValue",
                "type": "string",
                "desc": "Sets the input value. Should contain {0}, {1}, etc. enclosed by curly brackets, which will be replaced by the parameters and then output as OutFormattedValue."
            },
            {
                "name": "SetParameter0",
                "type": "string",
                "desc": "Sets the text that will replace all instances of {0}."
            },
            {
                "name": "SetParameter1",
                "type": "string",
                "desc": "Sets the text that will replace all instances of {1}."
            },
            {
                "name": "SetParameter2",
                "type": "string",
                "desc": "Sets the text that will replace all instances of {2}."
            },
            {
                "name": "SetParameter3",
                "type": "string",
                "desc": "Sets the text that will replace all instances of {3}."
            },
            {
                "name": "SetParameter4",
                "type": "string",
                "desc": "Sets the text that will replace all instances of {4}."
            },
            {
                "name": "SetParameter5",
                "type": "string",
                "desc": "Sets the text that will replace all instances of {5}."
            },
            {
                "name": "SetParameter6",
                "type": "string",
                "desc": "Sets the text that will replace all instances of {6}."
            },
            {
                "name": "SetParameter7",
                "type": "string",
                "desc": "Sets the text that will replace all instances of {7}."
            },
            {
                "name": "SetBackupParameter",
                "type": "string",
                "desc": "Sets the text that will replace all invalid parameters."
            }
        ],
        "outputs": [
            {
                "name": "OutFormattedValue",
                "type": "string",
                "desc": "Fired when the formatted value is requested. Outputs the formatted value."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_gate",
        "desc": "A general logic gate with two inputs. Supports AND, OR, NOT, NAND, NOR, XOR, and XNOR operations, which can also be changed through inputs.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Spawn A enabled": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Spawn B enabled": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Output on every input (even if result doesn't change)": {
                        "default": false,
                        "num": 4
                    }
                }
            },
            {
                "name": "Compare mode",
                "key": "mode",
                "type": "choices",
                "default": "OR (Either) (1)",
                "desc": "The current compare mode. This can be changed through the SetMode input.",
                "choices": {
                    "AND (Both)": "0",
                    "OR (Either)": "1",
                    "NOT (Negation)": "2",
                    "NAND (Neither And)": "3",
                    "NOR (Neither Or)": "4",
                    "XOR (Odd)": "5",
                    "XNOR (Equals)": "6"
                }
            }
        ],
        "inputs": [
            {
                "name": "GetValue",
                "type": "void",
                "desc": "When triggered, the current state will be outputted as OutValue."
            },
            {
                "name": "SetStateA",
                "type": "integer",
                "desc": "Sets the A state."
            },
            {
                "name": "SetStateB",
                "type": "integer",
                "desc": "Sets the B state."
            },
            {
                "name": "SetMode",
                "type": "integer",
                "desc": "Sets the mode. 0=AND,1=OR,2=NOT,3=NAND,4=NOR,5=XOR,6=XNOR"
            }
        ],
        "outputs": [
            {
                "name": "OnResultTrue",
                "type": "void",
                "desc": "Triggered when the state reaches true."
            },
            {
                "name": "OnResultFalse",
                "type": "void",
                "desc": "Triggered when the state reaches false."
            },
            {
                "name": "OutValue",
                "type": "void",
                "desc": "When this entity is triggered by GetValue, this output will be called with the current state as the parameter"
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_keyfield",
        "desc": "A logic entity that could read an entity's keyfields. Use the target and key name options if you want to store a specific target and/or keyvalue. Use the 'Test' input to look for the key within the target's datadesc. The 'OutValue' output will fire with the keyfield's value if it is found.\n\nPlease note that some keyvalues do not work with this entity. (most do though, so don't worry about it)",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Target Entity",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The entity with the key to measure."
            },
            {
                "name": "Key Name",
                "key": "keyname",
                "type": "string",
                "default": "",
                "desc": "The name of the key to measure."
            }
        ],
        "inputs": [
            {
                "name": "Test",
                "type": "void",
                "desc": "Gets the stored key's value from stored target."
            },
            {
                "name": "TestKey",
                "type": "string",
                "desc": "Tests the specified key against the target instead of using the stored key. Does not change the stored key."
            },
            {
                "name": "TestTarget",
                "type": "target_destination",
                "desc": "Tests the specified target against the key instead of using the stored target. Does not change the stored target."
            },
            {
                "name": "SetKey",
                "type": "string",
                "desc": "Sets the key to measure."
            },
            {
                "name": "SetValue",
                "type": "string",
                "desc": "Sets the stored target's stored key value to the specified string."
            },
            {
                "name": "SetTarget",
                "type": "target_destination",
                "desc": "Sets the target entity."
            }
        ],
        "outputs": [
            {
                "name": "OutValue",
                "type": "string",
                "desc": "Fires when a keyfield is found. Passes its value."
            },
            {
                "name": "OnFailed",
                "type": "void",
                "desc": "Fires when this entity fails to find the specified keyfield."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_lineto",
        "desc": "An entity that calculates and outputs a vector from one entity to another.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Start entity",
                "key": "source",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity the line should start from."
            },
            {
                "name": "End entity",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity that line should end at."
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "Line",
                "type": "vector",
                "desc": "Fired when the vector, from the start entity to the end entity, changes. Passes along the vector as a parameter."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_measure_movement",
        "desc": "An entity that can measure the movement of an entity relative to another entity and apply that movement to a third entity.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Entity to Measure",
                "key": "measuretarget",
                "type": "target_destination",
                "default": "",
                "desc": "Entity whose movement you want to measure."
            },
            {
                "name": "Measure Reference",
                "key": "measurereference",
                "type": "target_destination",
                "default": "",
                "desc": "The movement of Entity to Measure will be measured relative to this entity."
            },
            {
                "name": "Entity to Move",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "This entity will be moved to mimic the motions of Entity to Measure."
            },
            {
                "name": "Movement Reference",
                "key": "targetreference",
                "type": "target_destination",
                "default": "",
                "desc": "The Entity to Move will move relative to this entity."
            },
            {
                "name": "Movement scale",
                "key": "targetscale",
                "type": "float",
                "default": "1",
                "desc": "A scale to divide the measured movements by, before applying those movements to the Entity to Move. 1 = target entity moves as much as the measured entity, 2 = target entity moves half as far as the measured entity, and 0.5 = target entity moves twice as far as the measured entity."
            },
            {
                "name": "Fire position outputs",
                "key": "shouldoutputposition",
                "type": "boolean",
                "default": "No",
                "desc": "Allows OutPosition and OutAngles to be fired with the resulting position while this entity is active. Does not apply to the GetPosition input."
            },
            {
                "name": "Measurement Type",
                "key": "measuretype",
                "type": "choices",
                "default": "Position (0)",
                "desc": "",
                "choices": {
                    "Position": "0",
                    "Eye position": "1",
                    "Attachment point": "2"
                }
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Ignore X": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Ignore Y": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Ignore Z": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Use 'Ignore' flags for origin instead of angles": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Use new teleportation rules (smoother movement)": {
                        "default": true,
                        "num": 16
                    },
                    "[32] Don't change target's angles": {
                        "default": false,
                        "num": 32
                    }
                }
            },
            {
                "name": "Measurement Attachment",
                "key": "measureattachment",
                "type": "string",
                "default": "",
                "desc": "Only useful for the ''Attachment point'' measurement type. This attachment should be on the Entity to Measure and measurements will correspond to its position and angles."
            }
        ],
        "inputs": [
            {
                "name": "SetMeasureTarget",
                "type": "string",
                "desc": "Set the Entity to Measure, whose movement should be measured."
            },
            {
                "name": "SetMeasureReference",
                "type": "string",
                "desc": "Set the Measure Reference entity."
            },
            {
                "name": "Target",
                "type": "string",
                "desc": "Set the Entity to Move, which will be moved to mimic the measured entity."
            },
            {
                "name": "SetTargetReference",
                "type": "string",
                "desc": "Set the Movement Reference entity."
            },
            {
                "name": "SetTargetScale",
                "type": "float",
                "desc": "Set the scale to divide the measured movements by."
            },
            {
                "name": "SetMeasureType",
                "type": "integer",
                "desc": "Sets the measurement type."
            },
            {
                "name": "SetMeasureAttachment",
                "type": "string",
                "desc": "Sets the measurement attachment."
            },
            {
                "name": "ShouldOutputPosition",
                "type": "boolean",
                "desc": "Sets whether we are allowed to fire position outputs while this entity is active."
            },
            {
                "name": "GetPosition",
                "type": "void",
                "desc": "Initiates a single measurement with the current settings, only firing OutPosition and OutAngles without moving anything. (it doesn't need a target to be available)\nThis input ignores the 'Fire position outputs' keyvalue and instead repurposes it to modify who the outputs' activator should be.\nIf 'Fire position outputs' is enabled, the target will be used as the activator if it is available.\nIf 'Fire position outputs' is disabled, the activator that fired GetPosition will be used instead."
            },
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable the logic_measure_movement."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable the logic_measure_movement."
            }
        ],
        "outputs": [
            {
                "name": "OutPosition",
                "type": "vector",
                "desc": "Outputs the resulting position when allowed."
            },
            {
                "name": "OutAngles",
                "type": "vector",
                "desc": "Outputs the resulting angles when allowed."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_modelinfo",
        "desc": "Gets and outputs some model information from an entity.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Target",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The entity whose model will be evaluated."
            },
            {
                "name": "Pose Parameter Name",
                "key": "poseparametername",
                "type": "string",
                "default": "",
                "desc": "(Optional) The pose parameter to use for pose parameter-related I/O."
            }
        ],
        "inputs": [
            {
                "name": "SetTarget",
                "type": "target_destination",
                "desc": "Sets this entity's target."
            },
            {
                "name": "GetNumSkins",
                "type": "void",
                "desc": "Gets the number of skins on the target entity."
            },
            {
                "name": "LookupSequence",
                "type": "string",
                "desc": "Looks up the specified sequence on the target entity."
            },
            {
                "name": "LookupActivity",
                "type": "string",
                "desc": "Looks up the specified activity on the target entity. Uses the sequence outputs and outputs the first sequence with the given activity."
            },
            {
                "name": "SetPoseParameterName",
                "type": "string",
                "desc": "Sets the pose parameter to target."
            },
            {
                "name": "SetPoseParameterValue",
                "type": "float",
                "desc": "Sets the target pose parameter's current value."
            },
            {
                "name": "GetPoseParameter",
                "type": "void",
                "desc": "Gets the current value of the target pose parameter and fires OutPoseParameterValue with it."
            }
        ],
        "outputs": [
            {
                "name": "OutNumSkins",
                "type": "integer",
                "desc": "Outputs number of skins."
            },
            {
                "name": "OnHasSequence",
                "type": "integer",
                "desc": "Fires when the target has the sequence requested. Outputs the sequence's index."
            },
            {
                "name": "OnLacksSequence",
                "type": "void",
                "desc": "Fires when the target does not have the sequence requested."
            },
            {
                "name": "OutPoseParameterValue",
                "type": "float",
                "desc": "Fires when the pose parameter value is requested, outputting its current value."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_multicompare",
        "desc": "Compares a set of inputs to each other. If they are all the same, fires an OnEqual output. If any are different, fires the OnNotEqual output. It is not possible to clear the memory, so this only works once.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Integer Value (optional)",
                "key": "integervalue",
                "type": "integer",
                "default": "",
                "desc": "The value all inputs are compared to if ''Should use Reference Value'' is enabled."
            },
            {
                "name": "Should use Integer Value",
                "key": "shouldcomparetovalue",
                "type": "boolean",
                "default": "No",
                "desc": "If enabled, all inputs are compared to the reference value. If not enabled, they are instead compared to the last input added."
            },
            {
                "name": "Use string length",
                "key": "strlenallowed",
                "type": "boolean",
                "default": "No",
                "desc": "Use the length of the string in the compare value rather than its actual value."
            }
        ],
        "inputs": [
            {
                "name": "InputValue",
                "type": "integer",
                "desc": "Adds a value to our set of inputs and fires CompareValues automatically, comparing existing inputs to this one if set to do so."
            },
            {
                "name": "CompareValues",
                "type": "void",
                "desc": "Compares the values and fires appropriate outputs."
            }
        ],
        "outputs": [
            {
                "name": "OnEqual",
                "type": "void",
                "desc": "Fires if all of the values are equal."
            },
            {
                "name": "OnNotEqual",
                "type": "void",
                "desc": "Fires if any of the values are not equal."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_navigation",
        "desc": "An entity that is used to set navigation properties on other entities. Useful to make NPCs ignore physics props in their way that they can easily push.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Navigation Entity",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity to set navigation properties on."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start On": {
                        "default": true,
                        "num": 1
                    }
                }
            },
            {
                "name": "Nav Property",
                "key": "navprop",
                "type": "string",
                "default": "Ignore",
                "desc": "The only valid property is to ignore this entity, so NPCs will bump into it."
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turn on. The Navigation Entity will have its navigation properties set."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Turn off. The Navigation Entity will have its navigation properties returned to the default settings."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle on/off."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "logic_playerproxy",
        "desc": "An entity that is used to relay inputs/outputs to the player and back to the world.",
        "bases": [
            "BaseEntityPoint",
            "DamageFilter"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "AddPotatosToPortalgun",
                "type": "void",
                "desc": "Change portalgun bodygroup to show potatos."
            },
            {
                "name": "RemovePotatosFromPortalgun",
                "type": "void",
                "desc": "Change portalgun bodygroup to not show potatos."
            },
            {
                "name": "SetDropEnabled",
                "type": "boolean",
                "desc": "Set wether the player is allowed to drop a carried object."
            },
            {
                "name": "ForceVMGrabController",
                "type": "void",
                "desc": "Force the player to use the view model grab controller for all objects that are picked up."
            },
            {
                "name": "ForcePhysicsGrabController",
                "type": "void",
                "desc": "Force the player to use the physics grab controller for all objects that are picked up."
            },
            {
                "name": "ResetGrabControllerBehavior",
                "type": "void",
                "desc": "Resets the grab controller used by the player to its default behavior."
            },
            {
                "name": "SetMotionBlurAmount",
                "type": "float",
                "desc": "Forces the motion blur effect on the player. Set to < 0 to disable this override."
            },
            {
                "name": "GivePortalGunFull",
                "type": "void",
                "desc": "Gives the player a portal gun with both colors. (Overrides if player is already holding one)"
            },
            {
                "name": "GivePortalGunPrimary",
                "type": "void",
                "desc": "Gives the player a portal gun with primary color. (Overrides if player is already holding one)"
            },
            {
                "name": "GivePortalGunSecondary",
                "type": "void",
                "desc": "Gives the player a portal gun with only secondary color. (Overrides if player is already holding one)"
            },
            {
                "name": "GivePortalGunNone",
                "type": "void",
                "desc": "Gives the player a portal gun with no activated colors. (Overrides if player is already holding one)"
            },
            {
                "name": "GiveBoots",
                "type": "void",
                "desc": "Gives the player long fall boots."
            },
            {
                "name": "RemoveBoots",
                "type": "void",
                "desc": "Removes long fall boots from the player, if they have them."
            },
            {
                "name": "GivePaintGunFull",
                "type": "void",
                "desc": "Gives the player a fully upgraded paint gun."
            },
            {
                "name": "GivePaintGunBasic",
                "type": "void",
                "desc": "Gives the player a non-upgraded paint gun."
            },
            {
                "name": "RemovePortalGun",
                "type": "void",
                "desc": "Removes the portal gun from the player, if they have it."
            },
            {
                "name": "RemovePaintGun",
                "type": "void",
                "desc": "Removes the paint gun from the player, if they have it."
            },
            {
                "name": "SetFallDamageEnabled",
                "type": "boolean",
                "desc": "Whether or not fall damage is enabled"
            }
        ],
        "outputs": [
            {
                "name": "PlayerDied",
                "type": "void",
                "desc": "Fires when the player dies."
            },
            {
                "name": "OnStartSlowingTime",
                "type": "void",
                "desc": "Fired when a Portal player initiates slow time."
            },
            {
                "name": "OnStopSlowingTime",
                "type": "void",
                "desc": "Fired when a Portal player stops slowing time."
            },
            {
                "name": "OnDuck",
                "type": "void",
                "desc": "Fired when a player starts to duck."
            },
            {
                "name": "OnUnDuck",
                "type": "void",
                "desc": "Fired when a player releases the duck button."
            },
            {
                "name": "OnJump",
                "type": "void",
                "desc": "Fired when a player jumps."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_playmovie",
        "desc": "Plays a movie and allows for various playback options",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Movie to display",
                "key": "moviefilename",
                "type": "string",
                "default": "",
                "desc": "The movie to display from the media/ folder. The BIK file extension must be included."
            },
            {
                "name": "Allow User to Skip",
                "key": "allowskip",
                "type": "boolean",
                "default": "No",
                "desc": "Whether or not the user may skip the video with common keys"
            },
            {
                "name": "Loop Video",
                "key": "loopvideo",
                "type": "boolean",
                "default": "No",
                "desc": "If set to true, the movie will loop forever"
            },
            {
                "name": "Fade In Time",
                "key": "fadeintime",
                "type": "float",
                "default": "0",
                "desc": "Time it takes for the video to fade in"
            }
        ],
        "inputs": [
            {
                "name": "PlayMovie",
                "type": "void",
                "desc": "Play the movie."
            },
            {
                "name": "PlayLevelTransitionMovie",
                "type": "string",
                "desc": "Plays a movie with specific settings used for level transitions.  Pass the name of the movie in the parameters.  To be fired at the end of a level."
            },
            {
                "name": "FadeAllMovies",
                "type": "void",
                "desc": "Fade movies out for all players connected."
            }
        ],
        "outputs": [
            {
                "name": "OnPlaybackFinished",
                "type": "void",
                "desc": "Fired when the movie has completed playing back or was skipped by the user."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_random_outputs",
        "desc": "A message forwarder. Fires up to eight separate outputs, each with a different chance of firing.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Only trigger once": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Allow fast retrigger": {
                        "default": false,
                        "num": 2
                    }
                }
            },
            {
                "name": "OnTrigger1 Chance",
                "key": "ontriggerchance1",
                "type": "float",
                "default": "1.0",
                "desc": "Chance (from 0 to 1) of the OnTrigger1 output firing when this entity is triggered."
            },
            {
                "name": "OnTrigger2 Chance",
                "key": "ontriggerchance2",
                "type": "float",
                "default": "1.0",
                "desc": "Chance (from 0 to 1) of the OnTrigger2 output firing when this entity is triggered."
            },
            {
                "name": "OnTrigger3 Chance",
                "key": "ontriggerchance3",
                "type": "float",
                "default": "1.0",
                "desc": "Chance (from 0 to 1) of the OnTrigger3 output firing when this entity is triggered."
            },
            {
                "name": "OnTrigger4 Chance",
                "key": "ontriggerchance4",
                "type": "float",
                "default": "1.0",
                "desc": "Chance (from 0 to 1) of the OnTrigger4 output firing when this entity is triggered."
            },
            {
                "name": "OnTrigger5 Chance",
                "key": "ontriggerchance5",
                "type": "float",
                "default": "1.0",
                "desc": "Chance (from 0 to 1) of the OnTrigger5 output firing when this entity is triggered."
            },
            {
                "name": "OnTrigger6 Chance",
                "key": "ontriggerchance6",
                "type": "float",
                "default": "1.0",
                "desc": "Chance (from 0 to 1) of the OnTrigger6 output firing when this entity is triggered."
            },
            {
                "name": "OnTrigger7 Chance",
                "key": "ontriggerchance7",
                "type": "float",
                "default": "1.0",
                "desc": "Chance (from 0 to 1) of the OnTrigger7 output firing when this entity is triggered."
            },
            {
                "name": "OnTrigger8 Chance",
                "key": "ontriggerchance8",
                "type": "float",
                "default": "1.0",
                "desc": "Chance (from 0 to 1) of the OnTrigger8 output firing when this entity is triggered."
            }
        ],
        "inputs": [
            {
                "name": "Trigger",
                "type": "void",
                "desc": "Trigger this entity, causing its OnTrigger outputs to fire if it is enabled."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle this entity between enabled and disabled."
            },
            {
                "name": "EnableRefire",
                "type": "void",
                "desc": "Allow this relay to trigger again quickly, if fast retrigger is disabled."
            }
        ],
        "outputs": [
            {
                "name": "OnSpawn",
                "type": "void",
                "desc": "Fired when this entity is spawned. If this entity is set to only trigger once, it will delete itself after firing this output."
            },
            {
                "name": "OnTrigger1",
                "type": "void",
                "desc": "This output has a chance to fire when the entity is triggered."
            },
            {
                "name": "OnTrigger2",
                "type": "void",
                "desc": "This output has a chance to fire when the entity is triggered."
            },
            {
                "name": "OnTrigger3",
                "type": "void",
                "desc": "This output has a chance to fire when the entity is triggered."
            },
            {
                "name": "OnTrigger4",
                "type": "void",
                "desc": "This output has a chance to fire when the entity is triggered."
            },
            {
                "name": "OnTrigger5",
                "type": "void",
                "desc": "This output has a chance to fire when the entity is triggered."
            },
            {
                "name": "OnTrigger6",
                "type": "void",
                "desc": "This output has a chance to fire when the entity is triggered."
            },
            {
                "name": "OnTrigger7",
                "type": "void",
                "desc": "This output has a chance to fire when the entity is triggered."
            },
            {
                "name": "OnTrigger8",
                "type": "void",
                "desc": "This output has a chance to fire when the entity is triggered."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_register_activator",
        "desc": "Stores an entity and sends messages with it as the activator\nUseful for keeping track of entities with mangled names due to template spawners and instances.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle between enabled and disabled."
            },
            {
                "name": "FireRegisteredAsActivator1",
                "type": "void",
                "desc": "Trigger the OnRegisteredActivate1 output, with the activator being registered entity."
            },
            {
                "name": "FireRegisteredAsActivator2",
                "type": "void",
                "desc": "Trigger the OnRegisteredActivate2 output, with the activator being registered entity."
            },
            {
                "name": "FireRegisteredAsActivator3",
                "type": "void",
                "desc": "Trigger the OnRegisteredActivate3 output, with the activator being registered entity."
            },
            {
                "name": "FireRegisteredAsActivator4",
                "type": "void",
                "desc": "Trigger the OnRegisteredActivate4 output, with the activator being registered entity."
            },
            {
                "name": "RegisterEntity",
                "type": "target_destination",
                "desc": "Stores an entity to later be used as an activator."
            }
        ],
        "outputs": [
            {
                "name": "OnRegisteredActivate1",
                "type": "void",
                "desc": "Fired to send a message using the registered entity as the activator."
            },
            {
                "name": "OnRegisteredActivate2",
                "type": "void",
                "desc": "Fired to send a message using the registered entity as the activator."
            },
            {
                "name": "OnRegisteredActivate3",
                "type": "void",
                "desc": "Fired to send a message using the registered entity as the activator."
            },
            {
                "name": "OnRegisteredActivate4",
                "type": "void",
                "desc": "Fired to send a message using the registered entity as the activator."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_relay",
        "desc": "A message forwarder. Fires an OnTrigger output when triggered, and can be disabled to prevent forwarding outputs.\n\nUseful as an intermediary between one entity and another for turning on or off an I/O connection, or as a container for holding a set of outputs that can be triggered from multiple places.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Only trigger once": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Allow fast retrigger": {
                        "default": false,
                        "num": 2
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Trigger",
                "type": "void",
                "desc": "Trigger the relay, causing its OnTrigger output to fire if it is enabled."
            },
            {
                "name": "TriggerWithParameter",
                "type": "string",
                "desc": "Triggers the relay with a parameter, causing its OnTriggerParameter output to fire if it is enabled."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the relay between enabled and disabled."
            },
            {
                "name": "EnableRefire",
                "type": "void",
                "desc": "Allow this relay to trigger again quickly, if fast retrigger is disabled. This input allows the relay to fire again early if it is in this state.This is automatically triggered 0.01s after the last OnTrigger output."
            }
        ],
        "outputs": [
            {
                "name": "OnSpawn",
                "type": "void",
                "desc": "Fired when the relay is spawned. If the relay is set to only trigger once, it will delete itself after firing this output."
            },
            {
                "name": "OnTrigger",
                "type": "void",
                "desc": "Fired when the relay is triggered. If the relay is set to only trigger once, it will delete itself after firing this output."
            },
            {
                "name": "OnTriggerParameter",
                "type": "string",
                "desc": "Fired when the relay is triggered with a parameter. If the relay is set to only trigger once, it will delete itself after firing this output."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_relay_queue",
        "desc": "A special variant of logic_relay designed to queue trigger inputs. If the relay is still handling its I/O connections after being triggered, additional Trigger inputs will be queued and automatically fire when the relay is able to be re-fired. Activator, output ID, and parameter are all kept and saved. Inputs are added to the queue each time Trigger or TriggerWithParameter are received while the relay is disabled or still handling its current I/O connections. The first one in the queue will trigger the moment an opportunity becomes available and the next one in the queue will wait for that one.\n\nThis is useful for when you don't want something to happen multiple times at once, but don't want to discard further requests either.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Maximum Items",
                "key": "setmaxqueueitems",
                "type": "integer",
                "default": "3",
                "desc": "The maximum number of Trigger and TriggerWithParameter inputs allowed in the queue. Any others received while this value is full will be discarded. Keep in mind this does not count the I/O chain currently being handled."
            },
            {
                "name": "Don't queue when disabled",
                "key": "dontqueuewhendisabled",
                "type": "boolean",
                "default": "No",
                "desc": "Prevents the relay from queuing inputs when disabled. This means inputs will only be queued when enabled and still handling its current I/O connections."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Only trigger once": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Allow fast retrigger": {
                        "default": false,
                        "num": 2
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Trigger",
                "type": "void",
                "desc": "Triggers the relay, causing its OnTrigger output to fire if it is enabled."
            },
            {
                "name": "TriggerWithParameter",
                "type": "string",
                "desc": "Triggers the relay with a parameter, causing its OnTriggerParameter output to fire if it is enabled."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the relay between enabled and disabled."
            },
            {
                "name": "EnableRefire",
                "type": "void",
                "desc": "If fast retrigger is disabled, the relay will not be able to fire again until its most delayed output has been fired. This input allows the relay to fire again early if it is in this state.This is automatically triggered 0.01s after the last OnTrigger output."
            },
            {
                "name": "ClearQueue",
                "type": "void",
                "desc": "Clears the input queue."
            },
            {
                "name": "SetMaxQueueItems",
                "type": "integer",
                "desc": "Sets the maximum queue items."
            }
        ],
        "outputs": [
            {
                "name": "OnTrigger",
                "type": "void",
                "desc": "Fired when the relay is triggered."
            },
            {
                "name": "OnTriggerParameter",
                "type": "string",
                "desc": "Fired when the relay is triggered with a parameter."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_scene_list_manager",
        "desc": "Manages a list of logic_choreographed_scene entities. Store choreo scenes in them in order that they will be played by other inputs. Whenever a scene plays, the manager will remove all scenes before that one in the list. The name of another logic_scene_list_manager can be entered in a slot instead of an invididual scene, which will cause all scenes in that manager to be removed when a later scene in this list is played.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Scene 1",
                "key": "scene0",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            },
            {
                "name": "Scene 2",
                "key": "scene1",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            },
            {
                "name": "Scene 3",
                "key": "scene2",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            },
            {
                "name": "Scene 4",
                "key": "scene3",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            },
            {
                "name": "Scene 5",
                "key": "scene4",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            },
            {
                "name": "Scene 6",
                "key": "scene5",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            },
            {
                "name": "Scene 7",
                "key": "scene6",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            },
            {
                "name": "Scene 8",
                "key": "scene7",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            },
            {
                "name": "Scene 9",
                "key": "scene8",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            },
            {
                "name": "Scene 10",
                "key": "scene9",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            },
            {
                "name": "Scene 11",
                "key": "scene10",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            },
            {
                "name": "Scene 12",
                "key": "scene11",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            },
            {
                "name": "Scene 13",
                "key": "scene12",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            },
            {
                "name": "Scene 14",
                "key": "scene13",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            },
            {
                "name": "Scene 15",
                "key": "scene14",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            },
            {
                "name": "Scene 16",
                "key": "scene15",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a logic_choreographed_scene, or logic_scene_list_manager."
            }
        ],
        "inputs": [
            {
                "name": "Shutdown",
                "type": "void",
                "desc": "Remove the manager and all scenes referenced by it (and all scenes referenced by logic_scene_list_manager's embedded in this one)."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "logic_script",
        "desc": "An entity that acts as a container for scripts.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "EntityGroup[0]",
                "key": "group00",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "EntityGroup[1]",
                "key": "group01",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "EntityGroup[2]",
                "key": "group02",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "EntityGroup[3]",
                "key": "group03",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "EntityGroup[4]",
                "key": "group04",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "EntityGroup[5]",
                "key": "group05",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "EntityGroup[6]",
                "key": "group06",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "EntityGroup[7]",
                "key": "group07",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "EntityGroup[8]",
                "key": "group08",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "EntityGroup[9]",
                "key": "group09",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "EntityGroup[10]",
                "key": "group10",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "EntityGroup[11]",
                "key": "group11",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "EntityGroup[12]",
                "key": "group12",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "EntityGroup[13]",
                "key": "group13",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "EntityGroup[14]",
                "key": "group14",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "EntityGroup[15]",
                "key": "group15",
                "type": "target_destination",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "logic_sequence",
        "desc": "Coordinates a sequence out of up to 16 preset values. If the input value matches the sequence's current case value, an output is fired and (by default) the sequence increments to the next case.\n\nThis is intended for things like passwords in keypads, which usually demand a specific combination of numbers.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Initial Case",
                "key": "initialcase",
                "type": "integer",
                "default": "1",
                "desc": "Which case to start on, meaning inputs will initially compare with this case. Uses the case's index. (e.g. 4 for Case 04)"
            },
            {
                "name": "Start Disabled",
                "key": "startdisabled",
                "type": "boolean",
                "default": "No",
                "desc": "If this entity is disabled, it will not accept any case tests. It will still accept other inputs, like SetSequenceIndex."
            },
            {
                "name": "Case 01",
                "key": "case01",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Case 02",
                "key": "case02",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Case 03",
                "key": "case03",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Case 04",
                "key": "case04",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Case 05",
                "key": "case05",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Case 06",
                "key": "case06",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Case 07",
                "key": "case07",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Case 08",
                "key": "case08",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Case 09",
                "key": "case09",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Case 10",
                "key": "case10",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Case 11",
                "key": "case11",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Case 12",
                "key": "case12",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Case 13",
                "key": "case13",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Case 14",
                "key": "case14",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Case 15",
                "key": "case15",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Case 16",
                "key": "case16",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Suppress auto increment",
                "key": "dontincrementonpass",
                "type": "boolean",
                "default": "No",
                "desc": "Prevents automatically incrementing the sequence each time a case passes."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enables this entity."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disables this entity."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggles whether this entity is disabled."
            },
            {
                "name": "InValue",
                "type": "string",
                "desc": "Tests the input value against the current case."
            },
            {
                "name": "SetCurrentCase",
                "type": "integer",
                "desc": "Sets the sequence's current case. This will fire OutCurCase."
            },
            {
                "name": "SetCurrentCaseNoFire",
                "type": "integer",
                "desc": "Sets the sequence's current case without firing OutCurCase."
            },
            {
                "name": "IncrementSequence",
                "type": "integer",
                "desc": "Increments the current case by the specified number. (1 if blank)"
            },
            {
                "name": "ResetSequence",
                "type": "void",
                "desc": "Resets the sequence to Case 01."
            }
        ],
        "outputs": [
            {
                "name": "OutCurCase",
                "type": "integer",
                "desc": "Fires each time the sequence's current case value changes, e.g. when it's incremented by a passing case."
            },
            {
                "name": "OnCasePass",
                "type": "string",
                "desc": "Fires when a case is matched, passing the input value."
            },
            {
                "name": "OnCaseFail",
                "type": "string",
                "desc": "Fires when a case fails, passing the input value."
            },
            {
                "name": "OnSequenceComplete",
                "type": "string",
                "desc": "Fires when the last case is matched and sequence is complete."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_timer",
        "desc": "An entity that fires a timer event at regular, or random, intervals. It can also be set to oscillate between a high and low end, in which case it will fire alternating high/low outputs each time it fires.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Oscillator (alternates between OnTimerHigh and OnTimerLow outputs)": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Use Random Time",
                "key": "userandomtime",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Minimum Random Interval",
                "key": "lowerrandombound",
                "type": "string",
                "default": "",
                "desc": "If 'Use Random Time' is set, this is the minimum time between timer fires. The time will be a random number between this and the 'Maximum Random Interval'."
            },
            {
                "name": "Maximum Random Interval",
                "key": "upperrandombound",
                "type": "string",
                "default": "",
                "desc": "If 'Use Random Time' is set, this is the maximum time between timer fires. The time will be a random number between the 'Minimum Random Interval' and this."
            },
            {
                "name": "Refire Interval",
                "key": "refiretime",
                "type": "string",
                "default": "",
                "desc": "If 'Use Random Time' isn't set, this is the time between timer fires, in seconds."
            }
        ],
        "inputs": [
            {
                "name": "RefireTime",
                "type": "integer",
                "desc": "Set a new Refire Interval."
            },
            {
                "name": "ResetTimer",
                "type": "void",
                "desc": "Reset the timer. It will fire after the Refire Interval expires."
            },
            {
                "name": "FireTimer",
                "type": "void",
                "desc": "Force the timer to fire immediately."
            },
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable the timer."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable the timer."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the timer on/off."
            },
            {
                "name": "LowerRandomBound",
                "type": "float",
                "desc": "Set a new Minimum Random Interval."
            },
            {
                "name": "UpperRandomBound",
                "type": "float",
                "desc": "Set a new Maximum Random Interval."
            },
            {
                "name": "AddToTimer",
                "type": "float",
                "desc": "Add time to the timer if it is currently enabled.  Does not change the Refire Interval."
            },
            {
                "name": "SubtractFromTimer",
                "type": "float",
                "desc": "Subtract time from the timer if it is currently enabled.  Does not change the Refire Interval."
            },
            {
                "name": "UseRandomTime",
                "type": "integer",
                "desc": "0 or 1, whether random time is enabled. If random time starts enabled and gets disabled here, the refire interval is set to the Maximum Random Interval."
            }
        ],
        "outputs": [
            {
                "name": "OnTimer",
                "type": "void",
                "desc": "Fired when the timer expires."
            },
            {
                "name": "OnTimerHigh",
                "type": "void",
                "desc": "Fired every other time for an oscillating timer."
            },
            {
                "name": "OnTimerLow",
                "type": "void",
                "desc": "Fired every other time for an oscillating timer."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "logic_timescale",
        "desc": "Changes the server's timescale.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Blend Time",
                "key": "blendtime",
                "type": "float",
                "default": "0",
                "desc": "The amount of time it takes to ramp to the desired timescale when triggered."
            }
        ],
        "inputs": [
            {
                "name": "SetDesiredTimescale",
                "type": "float",
                "desc": "Sets the desired timescale and starts slowing time (will blend to desired using the specified blend time)."
            },
            {
                "name": "SetTimescaleBlendTime",
                "type": "float",
                "desc": "Set the amount of time that it takes to ramp to the desired timescale when triggered."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "material_modify_control",
        "desc": "An entity that can be used to directly control material vars. To use it, you need to add the MaterialModify or MaterialModifyAnimated proxy to the material you intend to change. Parent this entity the entity who's material you want to control. If not parented, this applies to all materials in the map with the given name.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Material to modify.",
                "key": "materialname",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Material variable to modify.",
                "key": "materialvar",
                "type": "string",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "SetMaterialVar",
                "type": "string",
                "desc": "Fire to modify a material variable. The argument is the value to set the variable to."
            },
            {
                "name": "SetMaterialVarToCurrentTime",
                "type": "void",
                "desc": "This sets the material variable to the current time on the server."
            },
            {
                "name": "StartAnimSequence",
                "type": "string",
                "desc": "Force an animated material with the MaterialModifyAnimated proxy to play a set of animation frames. Format is: <Frame Start> <Frame End> <Frame Rate> <Loop>. Setting <Frame End> to -1 uses the last frame of the texture. <Loop> should be 1 or 0."
            },
            {
                "name": "StartFloatLerp",
                "type": "string",
                "desc": "Force a material with the MaterialModify proxy to lerp a material var between two floating point values. Format is: <Start Value> <End Value> <Transition Time> <Loop>. <Loop> should be 1 or 0."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "math_bits",
        "desc": "A math_counter variant that specializes in bitwise operations.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Initial Value",
                "key": "startvalue",
                "type": "integer",
                "default": "0",
                "desc": "The bits this entity should start with."
            }
        ],
        "inputs": [
            {
                "name": "Add",
                "type": "integer",
                "desc": "Adds bit(s) to this entity's value and fires the OutValue output with the result."
            },
            {
                "name": "Subtract",
                "type": "integer",
                "desc": "Subtracts bit(s) to this entity's value and fires the OutValue output with the result."
            },
            {
                "name": "ShiftLeft",
                "type": "integer",
                "desc": "Shifts this entity's value to the left by the specified number and fires the OutValue output with the result."
            },
            {
                "name": "ShiftRight",
                "type": "integer",
                "desc": "Shifts this entity's value to the right by the specified number and fires the OutValue output with the result."
            },
            {
                "name": "SetValue",
                "type": "integer",
                "desc": "Changes this entity's value and fires the OutValue output with the result."
            },
            {
                "name": "SetValueNoFire",
                "type": "integer",
                "desc": "Changes this entity's value without firing any outputs."
            },
            {
                "name": "GetValue",
                "type": "void",
                "desc": "Causes this entity to fire its OnGetValue output with its current bits. Used for polling the current bits when you don't want constant updates from the OutValue output."
            },
            {
                "name": "ContainsBits",
                "type": "integer",
                "desc": "Tests whether this entity's current value contains at least one of the specified bit(s)."
            },
            {
                "name": "ContainsAllBits",
                "type": "integer",
                "desc": "Tests whether this entity's current value contains all of the specified bit(s)."
            }
        ],
        "outputs": [
            {
                "name": "OutValue",
                "type": "integer",
                "desc": "Fired when the value changes."
            },
            {
                "name": "OnGetValue",
                "type": "integer",
                "desc": "Fired in response to the GetValue input. Used for polling the current bits when you don't want constant updates from the OutValue output."
            },
            {
                "name": "OnTrue",
                "type": "void",
                "desc": "Fired by ContainsBits when the current value contains the specified bit."
            },
            {
                "name": "OnFalse",
                "type": "void",
                "desc": "Fired by ContainsBits when the current value does not contain the specified bit."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "math_calculator",
        "desc": "An algebra calculation entity similar to logic_gate, but instead accepting float numbers and doing arithmetic calculations.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[4] Output on every input (even if result doesn't change)": {
                        "default": false,
                        "num": 4
                    }
                }
            },
            {
                "name": "Compare mode",
                "key": "mode",
                "type": "choices",
                "default": "1",
                "desc": "The current compare mode. This can be changed through the SetMode input.",
                "choices": {
                    "Add": "16",
                    "Subtract": "17",
                    "Multiply": "18",
                    "Divide": "19",
                    "Modulo": "20",
                    "Power": "21",
                    "Min": "23",
                    "Max": "24",
                    "Square Root": "32",
                    "Absolute": "33"
                }
            }
        ],
        "inputs": [
            {
                "name": "GetValueInt",
                "type": "void",
                "desc": "When triggered, the result will be outputted to OutValue as a whole number."
            },
            {
                "name": "GetValueFloat",
                "type": "void",
                "desc": "When triggered, the result will be outputted to OutValue as a floating point number."
            },
            {
                "name": "SetValueA",
                "type": "integer",
                "desc": "Sets the A value."
            },
            {
                "name": "SetValueB",
                "type": "integer",
                "desc": "Sets the B value."
            },
            {
                "name": "SetMode",
                "type": "integer",
                "desc": "Sets the mode."
            }
        ],
        "outputs": [
            {
                "name": "OnResult",
                "type": "float",
                "desc": "Triggered when the value changes."
            },
            {
                "name": "OutValue",
                "type": "void",
                "desc": "When this entity is triggered by GetValue, this output will be called with the result as the parameter"
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "math_clamp",
        "desc": "Clamps a value between two values. Supports integers, floats, and vectors.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Max",
                "key": "setmax",
                "type": "string",
                "default": "",
                "desc": "The maximum value. Can be an integer, a float, or a vector."
            },
            {
                "name": "Min",
                "key": "setmin",
                "type": "string",
                "default": "",
                "desc": "The minimum value. Can be an integer, a float, or a vector."
            }
        ],
        "inputs": [
            {
                "name": "ClampValue",
                "type": "string",
                "desc": "Clamps the specified value. Can be an integer, a float, or a vector."
            },
            {
                "name": "SetMax",
                "type": "string",
                "desc": "Sets the max value. Can be an integer, a float, or a vector."
            },
            {
                "name": "SetMin",
                "type": "string",
                "desc": "Sets the max value. Can be an integer, a float, or a vector."
            }
        ],
        "outputs": [
            {
                "name": "OutValue",
                "type": "string",
                "desc": "Outputs the clamped value."
            },
            {
                "name": "OnBeforeMin",
                "type": "string",
                "desc": "Fires when a clamped value was before the minimum value. Outputs the clamped value."
            },
            {
                "name": "OnBeyondMax",
                "type": "string",
                "desc": "Fires when a clamped value was beyond the maximum value. Outputs the clamped value."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "math_colorblend",
        "desc": "Used to create a blend between two colors for controlling the color of another entity.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Ignore out of range input values": {
                        "default": true,
                        "num": 1
                    }
                }
            },
            {
                "name": "Minimum Valid Input Value",
                "key": "inmin",
                "type": "integer",
                "default": "0",
                "desc": "Input values below this value will be ignored."
            },
            {
                "name": "Maximum Valid Input Value",
                "key": "inmax",
                "type": "integer",
                "default": "1",
                "desc": "Input values above this value will be ignored."
            },
            {
                "name": "Output RGB color when input is min.",
                "key": "colormin",
                "type": "color255",
                "default": "0 0 0",
                "desc": "When the input value is equal to 'Minimum Valid Input Value', this is the output RGB color."
            },
            {
                "name": "Output RGB color when input is max.",
                "key": "colormax",
                "type": "color255",
                "default": "255 255 255",
                "desc": "When the input value is equal to 'Maximum Valid Input Value', this is the output RGB color."
            }
        ],
        "inputs": [
            {
                "name": "InValue",
                "type": "float",
                "desc": "Input a value and fire the output with the remapped value."
            }
        ],
        "outputs": [
            {
                "name": "OutColor",
                "type": "color255",
                "desc": "Fired when the InValue input is received, with the remapped RGB color as the parameter."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "math_counter",
        "desc": "Holds a numeric value and performs arithmetic operations upon it. If either the minimum or maximum legal value is nonzero, OutValue will be clamped to the legal range, and the OnHitMin/OnHitMax outputs will be fired at the appropriate times. If both min and max are set to zero, no clamping is performed and only the OutValue output will be fired.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Initial Value",
                "key": "startvalue",
                "type": "float",
                "default": "0",
                "desc": "Starting value for the counter."
            },
            {
                "name": "Minimum Legal Value",
                "key": "min",
                "type": "float",
                "default": "0",
                "desc": "Minimum legal value for the counter. If min=0 and max=0, no clamping is performed."
            },
            {
                "name": "Maximum Legal Value",
                "key": "max",
                "type": "float",
                "default": "0",
                "desc": "Maximum legal value for the counter. If min=0 and max=0, no clamping is performed."
            }
        ],
        "inputs": [
            {
                "name": "Add",
                "type": "float",
                "desc": "Add an amount to the counter and fire the OutValue output with the result."
            },
            {
                "name": "Divide",
                "type": "float",
                "desc": "Divide the counter by an amount and fire the OutValue output with the result."
            },
            {
                "name": "Multiply",
                "type": "float",
                "desc": "Multiply the counter by an amount and fire the OutValue output with the result."
            },
            {
                "name": "SetValue",
                "type": "float",
                "desc": "Set the counter to a new value and fire the OutValue output with the result."
            },
            {
                "name": "SetValueNoFire",
                "type": "float",
                "desc": "Set the counter to a new value without firing any outputs."
            },
            {
                "name": "Subtract",
                "type": "float",
                "desc": "Subtract an amount from the counter and fire the OutValue output with the result."
            },
            {
                "name": "SetHitMax",
                "type": "float",
                "desc": "Set the upper bound of the counter and fire the OutValue output with the current value."
            },
            {
                "name": "SetHitMin",
                "type": "float",
                "desc": "Set the lower bound of the counter and fire the OutValue output with the current value."
            },
            {
                "name": "GetValue",
                "type": "void",
                "desc": "Causes the counter fire its OnGetValue output with the current value of the counter. Used for polling the counter when you don't want constant updates from the OutValue output."
            },
            {
                "name": "SetMaxValueNoFire",
                "type": "float",
                "desc": "Set the upper bound of the counter without firing any outputs."
            },
            {
                "name": "SetMinValueNoFire",
                "type": "float",
                "desc": "Set the lower bound of the counter without firing any outputs."
            }
        ],
        "outputs": [
            {
                "name": "OutValue",
                "type": "float",
                "desc": "Fired when the counter value changes."
            },
            {
                "name": "OnHitMin",
                "type": "void",
                "desc": "Fired when the counter value meets or goes below the min value. The counter must go back above the min value before the output will fire again."
            },
            {
                "name": "OnHitMax",
                "type": "void",
                "desc": "Fired when the counter value meets or exceeds the max value. The counter must go below the max value before the output will fire again."
            },
            {
                "name": "OnGetValue",
                "type": "float",
                "desc": "Fired in response to the GetValue input. Used for polling the counter when you don't want constant updates from the OutValue output."
            },
            {
                "name": "OnChangedFromMin",
                "type": "void",
                "desc": "Fired when the counter value changes from the minimum value."
            },
            {
                "name": "OnChangedFromMax",
                "type": "void",
                "desc": "Fired when the counter value changes from the max value."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "math_generate",
        "desc": "Continuously generates numbers using various generation modes based on material proxies.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Start Disabled",
                "key": "startdisabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Generation Type",
                "key": "generatetype",
                "type": "choices",
                "default": "Linear Ramp (param 1 = rate) (1)",
                "desc": "",
                "choices": {
                    "Sine Wave (param 1 = time offset, param 2 = sine period)": "0",
                    "Linear Ramp (param 1 = rate)": "1",
                    "Uniform Noise": "2",
                    "Gaussian Noise (param 1 = mean, param 2 = half width)": "3",
                    "Exponential (param 1 = scale, param 2 = offset)": "4"
                }
            },
            {
                "name": "Initial Value",
                "key": "initialvalue",
                "type": "float",
                "default": "0",
                "desc": "Starting value for the math_generate."
            },
            {
                "name": "Minimum Legal Value",
                "key": "sethitmin",
                "type": "float",
                "default": "0",
                "desc": "Minimum legal value for generation."
            },
            {
                "name": "Maximum Legal Value",
                "key": "sethitmax",
                "type": "float",
                "default": "1",
                "desc": "Maximum legal value for generation."
            },
            {
                "name": "Parameter 1",
                "key": "setparam1",
                "type": "float",
                "default": "0",
                "desc": "Multi-purpose parameter #1 for the generation algorithms to use for their own needs."
            },
            {
                "name": "Parameter 2",
                "key": "setparam2",
                "type": "float",
                "default": "0",
                "desc": "Multi-purpose parameter #2 for the generation algorithms to use for their own needs."
            }
        ],
        "inputs": [
            {
                "name": "SetValue",
                "type": "float",
                "desc": "Sets the math_generate to a new value and fires the OutValue output with the result, performing all generation from that value."
            },
            {
                "name": "SetValueNoFire",
                "type": "float",
                "desc": "Sets the math_generate to a new value without firing any outputs."
            },
            {
                "name": "GetValue",
                "type": "void",
                "desc": "Causes the math_generate to fire its OnGetValue output with the current value. Used for polling the value when you don't want constant updates from the OutValue output."
            },
            {
                "name": "SetGenerateType",
                "type": "integer",
                "desc": "Sets the type of generation this math_generate should perform."
            },
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enables this entity."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disables this entity."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggles whether this entity is disabled."
            },
            {
                "name": "SetHitMin",
                "type": "float",
                "desc": "Set minimum legal value for generation"
            },
            {
                "name": "SetHitMax",
                "type": "float",
                "desc": "Set maximum legal value for generation"
            },
            {
                "name": "SetParam1",
                "type": "float",
                "desc": "Set the value for parameter one"
            },
            {
                "name": "SetParam2",
                "type": "float",
                "desc": "Set the value for parameter two"
            }
        ],
        "outputs": [
            {
                "name": "OutValue",
                "type": "string",
                "desc": "Fires each tick while generation is active, passing the value continuously generated by the math_generate."
            },
            {
                "name": "OnHitMin",
                "type": "void",
                "desc": "Fired when generation meets the min value. Generation must go back above the min value before the output will fire again."
            },
            {
                "name": "OnHitMax",
                "type": "void",
                "desc": "Fired when generation meets the max value. Generation must go below the max value before the output will fire again."
            },
            {
                "name": "OnGetValue",
                "type": "float",
                "desc": "Fired in response to the GetValue input. Used for polling the value when you don't want constant updates from the OutValue output."
            },
            {
                "name": "OnChangedFromMin",
                "type": "void",
                "desc": "Fired when the current generation value changes from the minimum value."
            },
            {
                "name": "OnChangedFromMax",
                "type": "void",
                "desc": "Fired when the current generation value changes from the maximum value."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "math_lightpattern",
        "desc": "A logic entity that attempts to replicate light patterns that can be used on named lights.\n\nWARNING: This is currently out of sync with default light patterns. TODO: Fix that!",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Appearance",
                "key": "style",
                "type": "choices",
                "default": "None ()",
                "desc": "Which preset pattern to use.",
                "choices": {
                    "None": "",
                    "Normal": "0",
                    "Fluorescent flicker": "10",
                    "Slow, strong pulse": "2",
                    "Slow pulse, noblack": "11",
                    "Gentle pulse": "5",
                    "Flicker A": "1",
                    "Flicker B": "6",
                    "Candle A": "3",
                    "Candle B": "7",
                    "Candle C": "8",
                    "Fast strobe": "4",
                    "Slow strobe": "9"
                }
            },
            {
                "name": "Custom Appearance",
                "key": "pattern",
                "type": "string",
                "default": "",
                "desc": "A custom pattern to use. a = fully dark, z = fully bright. This should always contain lowercase letters for light patterns. Uppercase letters or other types of characters won't work with actual light patterns. (although they shouldn't break the whole entity either)"
            },
            {
                "name": "Pattern Speed",
                "key": "patternspeed",
                "type": "float",
                "default": "0.1",
                "desc": "The speed of the pattern."
            }
        ],
        "inputs": [
            {
                "name": "SetStyle",
                "type": "integer",
                "desc": "Sets the pattern from the style presets."
            },
            {
                "name": "SetPattern",
                "type": "string",
                "desc": "Sets the pattern directly."
            },
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enables this entity."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disables this entity."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggles this entity."
            }
        ],
        "outputs": [
            {
                "name": "OutValue",
                "type": "float",
                "desc": "Outputs with a brightness equivalent to the current letter."
            },
            {
                "name": "OutLetter",
                "type": "string",
                "desc": "Outputs with the current letter itself."
            },
            {
                "name": "OnLightOn",
                "type": "void",
                "desc": "Fires when the current letter is equivalent to 'on' (greater than a)."
            },
            {
                "name": "OnLightOff",
                "type": "void",
                "desc": "Fires when the current letter is equivalent to 'off' (equal to a)."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "math_mod",
        "desc": "A lightweight entity that performs simple calculations on the fly without needing a complicated I/O chain. This is useful for values that are outputted on a per-frame basis and might not work with a math_counter chain.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Mod Value",
                "key": "startvalue",
                "type": "string",
                "default": "0",
                "desc": "The value that is applied to input values."
            },
            {
                "name": "Operator",
                "key": "setoperator",
                "type": "choices",
                "default": "Addition (43)",
                "desc": "What calculation to perform with the mod value. (input value _ mod value)",
                "choices": {
                    "Addition": "43",
                    "Subtraction": "45",
                    "Multiplication": "42",
                    "Division": "47"
                }
            }
        ],
        "inputs": [
            {
                "name": "SetMod",
                "type": "string",
                "desc": "Sets the mod value."
            },
            {
                "name": "ModInt",
                "type": "integer",
                "desc": "Applies modification to the specified integer."
            },
            {
                "name": "ModFloat",
                "type": "float",
                "desc": "Applies modification to the specified float."
            },
            {
                "name": "ModVector",
                "type": "vector",
                "desc": "Applies modification to the specified vector."
            },
            {
                "name": "SetOperator",
                "type": "string",
                "desc": "Sets the operator. Use +, -, *, or / to choose addition, subtraction, multiplication, or division respectively."
            }
        ],
        "outputs": [
            {
                "name": "OutInt",
                "type": "integer",
                "desc": "Outputs the modified integer."
            },
            {
                "name": "OutFloat",
                "type": "float",
                "desc": "Outputs the modified float."
            },
            {
                "name": "OutVector",
                "type": "vector",
                "desc": "Outputs the modified vector."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "math_remap",
        "desc": "An entity that remaps a range of input values to a given range of output values.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Ignore out of range input values": {
                        "default": true,
                        "num": 1
                    },
                    "[2] Clamp output to output range": {
                        "default": false,
                        "num": 2
                    }
                }
            },
            {
                "name": "Minimum Valid Input Value",
                "key": "in1",
                "type": "integer",
                "default": "0",
                "desc": "Input values below this value will be ignored."
            },
            {
                "name": "Maximum Valid Input Value",
                "key": "in2",
                "type": "integer",
                "default": "1",
                "desc": "Input values above this value will be ignored."
            },
            {
                "name": "Output Value When Input Is Min.",
                "key": "out1",
                "type": "integer",
                "default": "",
                "desc": "When the input value is equal to 'Minimum Valid Input Value', this is the output value."
            },
            {
                "name": "Output Value When Input Is Max.",
                "key": "out2",
                "type": "integer",
                "default": "",
                "desc": "When the input value is equal to 'Maximum Valid Input Value', this is the output value."
            }
        ],
        "inputs": [
            {
                "name": "InValue",
                "type": "float",
                "desc": "Input a value and fire the output with the remapped value."
            }
        ],
        "outputs": [
            {
                "name": "OutValue",
                "type": "float",
                "desc": "Fired when the InValue input is received, with the remapped input value as the parameter."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "math_vector",
        "desc": "A math_counter variant that specializes in vector operations.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Initial Value",
                "key": "startvalue",
                "type": "vector",
                "default": "0 0 0",
                "desc": "The vector this entity shuold start with."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Disable X": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Disable Y": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Disable Z": {
                        "default": false,
                        "num": 4
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Add",
                "type": "vector",
                "desc": "Adds a vector to this entity's current value and fires the OutValue output with the result."
            },
            {
                "name": "Divide",
                "type": "vector",
                "desc": "Divides a vector from this entity's current value and fire the OutValue output with the result."
            },
            {
                "name": "Multiply",
                "type": "vector",
                "desc": "Multiplies a vector from this entity's current value and fires the OutValue output with the result."
            },
            {
                "name": "SetValue",
                "type": "vector",
                "desc": "Sets this entity's current vector to a new value and fires the OutValue output with the result."
            },
            {
                "name": "SetValueNoFire",
                "type": "vector",
                "desc": "Sets this entity's current vector to a new value without firing any outputs."
            },
            {
                "name": "Subtract",
                "type": "vector",
                "desc": "Subtracts a vector from this entity's current value and fires the OutValue output with the result."
            },
            {
                "name": "GetValue",
                "type": "void",
                "desc": "Causes this entity to fire its OnGetValue output with its current vector. Used for polling the counter when you don't want constant updates from the OutValue output."
            },
            {
                "name": "PointAtLocation",
                "type": "vector",
                "desc": "Creates an angle pointing from the entity's current vector to the specified point and fires the OutValue output with the result."
            },
            {
                "name": "PointAtEntity",
                "type": "target_destination",
                "desc": "Creates an angle pointing from the entity's current vector to the specified entity and fires the OutValue output with the result."
            },
            {
                "name": "VectorAngles",
                "type": "void",
                "desc": "Converts this entity's vector to an angle, assuming the current vector is a direction vector. Fires the OutValue output with the result."
            },
            {
                "name": "AngleVectorForward",
                "type": "void",
                "desc": "Converts this entity's vector angles to a vector in the forward direction. Fires the OutValue output with the result."
            },
            {
                "name": "AngleVectorRight",
                "type": "void",
                "desc": "Converts this entity's vector angles to a vector in the right direction. Fires the OutValue output with the result."
            },
            {
                "name": "AngleVectorUp",
                "type": "void",
                "desc": "Converts this entity's vector angles to a vector in the up direction. Fires the OutValue output with the result."
            },
            {
                "name": "Normalize",
                "type": "void",
                "desc": "Normalizes this entity's vector and fires the OutValue output with the result."
            },
            {
                "name": "NormalizeAngles",
                "type": "void",
                "desc": "Normalizes this entity's vector as angles and fires the OutValue output with the result."
            },
            {
                "name": "SetX",
                "type": "float",
                "desc": "Sets this entity's X coordinate."
            },
            {
                "name": "SetY",
                "type": "float",
                "desc": "Sets this entity's Y coordinate."
            },
            {
                "name": "SetZ",
                "type": "float",
                "desc": "Sets this entity's Z coordinate."
            },
            {
                "name": "GetX",
                "type": "void",
                "desc": "Gets this entity's X coordinate."
            },
            {
                "name": "GetY",
                "type": "void",
                "desc": "Gets this entity's Y coordinate."
            },
            {
                "name": "GetZ",
                "type": "void",
                "desc": "Gets this entity's Z coordinate."
            },
            {
                "name": "AddX",
                "type": "float",
                "desc": "Adds to this entity's X coordinate."
            },
            {
                "name": "AddY",
                "type": "float",
                "desc": "Adds to this entity's Y coordinate."
            },
            {
                "name": "AddZ",
                "type": "float",
                "desc": "Adds to this entity's Z coordinate."
            },
            {
                "name": "SubtractX",
                "type": "float",
                "desc": "Subtracts from this entity's X coordinate."
            },
            {
                "name": "SubtractY",
                "type": "float",
                "desc": "Subtracts from this entity's Y coordinate."
            },
            {
                "name": "SubtractZ",
                "type": "float",
                "desc": "Subtracts from this entity's Z coordinate."
            }
        ],
        "outputs": [
            {
                "name": "OutValue",
                "type": "vector",
                "desc": "Fired when the value changes."
            },
            {
                "name": "OutX",
                "type": "float",
                "desc": "Fired when the value changes, passing the resulting X coordinate."
            },
            {
                "name": "OutY",
                "type": "float",
                "desc": "Fired when the value changes, passing the resulting Y coordinate."
            },
            {
                "name": "OutZ",
                "type": "float",
                "desc": "Fired when the value changes, passing the resulting Z coordinate."
            },
            {
                "name": "OnGetValue",
                "type": "vector",
                "desc": "Fired in response to the GetValue input. Used for polling this entity's current value when you don't want constant updates from the OutValue output."
            },
            {
                "name": "OnGetX",
                "type": "float",
                "desc": "Fired in response to the GetX input."
            },
            {
                "name": "OnGetY",
                "type": "float",
                "desc": "Fired in response to the GetY input."
            },
            {
                "name": "OnGetZ",
                "type": "float",
                "desc": "Fired in response to the GetZ input."
            }
        ]
    },
    {
        "type": "TRACK",
        "classname": "move_keyframed",
        "desc": "Keyframed Move Behavior",
        "bases": [
            "BaseEntityPoint",
            "KeyFrame",
            "Mover"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "TRACK",
        "classname": "move_track",
        "desc": "Track Move Behavior",
        "bases": [
            "BaseEntityPoint",
            "Mover",
            "KeyFrame"
        ],
        "keyvalues": [
            {
                "name": "Distance between the wheels",
                "key": "wheelbaselength",
                "type": "integer",
                "default": "50",
                "desc": ""
            },
            {
                "name": "Damage done to blocking entities",
                "key": "damage",
                "type": "integer",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Turn to face down path",
                "key": "norotate",
                "type": "boolean",
                "default": "No",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "paint_sphere",
        "desc": "Paint brushes inside the sphere.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Paint Type",
                "key": "paint_type",
                "type": "choices",
                "default": "Repulsion Gel (0)",
                "desc": "The type of Gel created.",
                "choices": {
                    "Repulsion Gel": "0",
                    "Reflection Gel": "1",
                    "Propulsion Gel": "2",
                    "Conversion Gel": "3",
                    "Cleansing Gel": "4",
                    "Adhesion Gel": "5"
                }
            },
            {
                "name": "Radius",
                "key": "radius",
                "type": "float",
                "default": "60.f",
                "desc": "Radius of paint sphere"
            },
            {
                "name": "Alpha Percent",
                "key": "alpha_percent",
                "type": "float",
                "default": "1.0",
                "desc": "Alpha percent to control the density of paint, the value must be between 0 to 1"
            }
        ],
        "inputs": [
            {
                "name": "Paint",
                "type": "void",
                "desc": "Apply paint with specified paint type inside the paint sphere"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "path_corner",
        "desc": "Path points for func_train or NPC entities to follow.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Wait for retrigger": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Teleport to THIS path_corner": {
                        "default": false,
                        "num": 2
                    }
                }
            },
            {
                "name": "Next stop target",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Wait here (secs)",
                "key": "wait",
                "type": "integer",
                "default": "0",
                "desc": ""
            },
            {
                "name": "New Train Speed",
                "key": "speed",
                "type": "integer",
                "default": "0",
                "desc": ""
            },
            {
                "name": "New Train rot. Speed",
                "key": "yaw_speed",
                "type": "integer",
                "default": "0",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "SetNextPathCorner",
                "type": "target_destination",
                "desc": "Sets next pathcorner"
            }
        ],
        "outputs": [
            {
                "name": "OnPass",
                "type": "void",
                "desc": "Fires when a path follower passes this point"
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "path_corner_crash",
        "desc": "Helicopter Crash Path",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Next stop target",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "path_track",
        "desc": "An entity used to build paths for other entities to follow. Each path_track is a node on the path, each holding the name of the next path_track in the path.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Disabled": {
                        "default": false,
                        "num": 1
                    },
                    "[4] Branch Reverse": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Disable train": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Teleport to THIS path track": {
                        "default": false,
                        "num": 16
                    },
                    "[32768] Alternate path": {
                        "default": false,
                        "num": 32768
                    }
                }
            },
            {
                "name": "Next Stop Target",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The next path_track in the path."
            },
            {
                "name": "Branch Path",
                "key": "altpath",
                "type": "target_destination",
                "default": "",
                "desc": "An alternative path_track to be the next node in the path. Useful for making branching paths. Use the ToggleAlternatePath / EnableAlternatePath inputs to make the alternative path active."
            },
            {
                "name": "New Train Speed",
                "key": "speed",
                "type": "float",
                "default": "0",
                "desc": "When the train reaches this path_track, it will set its speed to this speed. This speed must be a positive value that is less than the train's max speed. A value of 0 will cause no change in the train's speed."
            },
            {
                "name": "Path radius",
                "key": "radius",
                "type": "float",
                "default": "0",
                "desc": "Used by NPCs who follow track paths (attack chopper/gunship). This tells them the maximum distance they're allowed to be from the path at this node."
            },
            {
                "name": "Orientation Type",
                "key": "orientationtype",
                "type": "choices",
                "default": "Face direction of motion (1)",
                "desc": "The way that the path follower faces as it moves through this path track.",
                "choices": {
                    "No change": "0",
                    "Face direction of motion": "1",
                    "Face this path_track's angles": "2"
                }
            }
        ],
        "inputs": [
            {
                "name": "ToggleAlternatePath",
                "type": "void",
                "desc": "Cause the track to toggle to/from its alternate path."
            },
            {
                "name": "EnableAlternatePath",
                "type": "void",
                "desc": "Enable the alternate path of the track."
            },
            {
                "name": "DisableAlternatePath",
                "type": "void",
                "desc": "Disable the alternate path of the track."
            },
            {
                "name": "TogglePath",
                "type": "void",
                "desc": "Cause the track to toggle on/off/"
            },
            {
                "name": "EnablePath",
                "type": "void",
                "desc": "Enable the track."
            },
            {
                "name": "DisablePath",
                "type": "void",
                "desc": "Disable the track."
            }
        ],
        "outputs": [
            {
                "name": "OnPass",
                "type": "void",
                "desc": "Fired when any entity following this path passes this path_track node."
            },
            {
                "name": "OnTeleport",
                "type": "void",
                "desc": "Fired when any entity following this path teleports directly to this path_track node."
            }
        ]
    },
    {
        "type": "TRACK",
        "classname": "path_vphysics",
        "desc": "An entity that spawns invisible tractor beams in the path specified",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {}
            },
            {
                "name": "Next Target",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The next path_vphysics in the path."
            },
            {
                "name": "Speed",
                "key": "speed",
                "type": "float",
                "default": "100",
                "desc": "Speed at which to move the objects."
            },
            {
                "name": "Radius",
                "key": "radius",
                "type": "float",
                "default": "32",
                "desc": "Radius of the triggers."
            },
            {
                "name": "Damping",
                "key": "damping",
                "type": "float",
                "default": "5",
                "desc": "How much to dampen the movement."
            },
            {
                "name": "Filter",
                "key": "filtername",
                "type": "filterclass",
                "default": "",
                "desc": "Filter to apply to the spawned triggers."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enables the trigger."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disables the trigger."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggles the trigger."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "phys_constraintsystem",
        "desc": "An entity used to manage a group of interacting constraints and keep them stable. All constraints on a set of entities should be placed in the same system, or they will fight each other during simulation.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Additional System Iterations",
                "key": "additionaliterations",
                "type": "integer",
                "default": "0",
                "desc": "Adding iterations makes the interactions among constraints in a system tighter. It will not compensate for errors due to collision, but will help in cases where objects of disparate mass are constrained to each other."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "phys_convert",
        "desc": "Turns an arbitrary entity into a physically simulated entity. i.e. brush entities will behave like func_physbox, model entities behave like prop_physics.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Convert Asleep": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Convert As Debris": {
                        "default": false,
                        "num": 2
                    }
                }
            },
            {
                "name": "Entity to convert",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity or entities that will be converted to a physics object when the ConvertTarget input is fired. Maximum of 512 entities."
            },
            {
                "name": "Model Swap Entity",
                "key": "swapmodel",
                "type": "target_destination",
                "default": "",
                "desc": "If specified, the entity will be switched to use this entity's model instead of its own. Only one entity will be converted."
            },
            {
                "name": "Mass Override",
                "key": "massoverride",
                "type": "float",
                "default": "0",
                "desc": "Sets the mass when the object(s) are converted (0 means auto-calculate)"
            }
        ],
        "inputs": [
            {
                "name": "ConvertTarget",
                "type": "void",
                "desc": "Converts this entity's target to a physically simulated object."
            }
        ],
        "outputs": [
            {
                "name": "OnConvert",
                "type": "void",
                "desc": "Fires after the conversion has taken place."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "phys_keepupright",
        "desc": "A controller that tries to keep an entity facing a particular direction.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start inactive": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Target Entity",
                "key": "attach1",
                "type": "target_destination",
                "default": "",
                "desc": "The entity to align to the desired angles."
            },
            {
                "name": "Angular Limit",
                "key": "angularlimit",
                "type": "float",
                "default": "15",
                "desc": "The maximum angular velocity that this controller can compensate for, in degrees per second."
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Enable the controller."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Disable the controller."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "phys_motor",
        "desc": "An entity that tries to spin a target entity at a particular speed.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Rotation Speed",
                "key": "speed",
                "type": "float",
                "default": "0",
                "desc": "Angular speed (units are degress/second)"
            },
            {
                "name": "Spin up time",
                "key": "spinup",
                "type": "float",
                "default": "1",
                "desc": "spin up time in seconds (also affects the rate at which speed changes happen)"
            },
            {
                "name": "System Interia Scale",
                "key": "inertiafactor",
                "type": "float",
                "default": "1.0",
                "desc": "Make this larger if the object being driven is constrained to a set of heavier objects."
            },
            {
                "name": "Rotation Axis",
                "key": "axis",
                "type": "vecline",
                "default": "",
                "desc": ""
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start On": {
                        "default": true,
                        "num": 1
                    },
                    "[2] No world collision": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Hinge Object": {
                        "default": true,
                        "num": 4
                    }
                }
            },
            {
                "name": "Attached Object",
                "key": "attach1",
                "type": "target_destination",
                "default": "",
                "desc": "Object to apply the force to"
            }
        ],
        "inputs": [
            {
                "name": "SetSpeed",
                "type": "float",
                "desc": "Sets target speed"
            },
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turns motor on"
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Turns motor off"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "phys_ragdollmagnet",
        "desc": "An entity that acts like a magnet for ragdolls. Useful for crafting exaggerated ragdoll behavior (i.e. guys falling over rails on death). If the Bar Magnet spawnflag is set, the magnet works like it was a cylindrical magnet i.e. it attracts ragdolls to the nearest point on a line.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Bar Magnet Axis",
                "key": "axis",
                "type": "vecline",
                "default": "",
                "desc": "If the Bar Magnet spawnflag is set, ragdolls will be attracted to any point on this line."
            },
            {
                "name": "Effective Radius",
                "key": "radius",
                "type": "float",
                "default": "512",
                "desc": "Radius in which ragdolls are affected around this entity's origin."
            },
            {
                "name": "Force",
                "key": "force",
                "type": "float",
                "default": "5000",
                "desc": "Magnetic force to apply to ragdolls within the radius. Expressed as kilograms per unit per second. So a force of 1000 will add 10 units/second to a 100kg man. It will add 100 units per second to a 10kg headcrab."
            },
            {
                "name": "Entity to affect",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "If specified, the phys_ragdollmagnet will only affect the target entity."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[2] Bar Magnet (use axis helper)": {
                        "default": false,
                        "num": 2
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "phys_spring",
        "desc": "A physically simulated spring. 'Length' is what's known as the 'natural spring length'. This is how long the spring would be if it was at rest (nothing hanging on it or attached). When you attach something to the spring, it will stretch longer than its 'natural length'. The amount of stretch is determined by the 'Sprint Constant'. The larger the spring constant the less stretch the spring.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Force only on stretch": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Entity 1",
                "key": "attach1",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Entity 2",
                "key": "attach2",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Spring Axis",
                "key": "springaxis",
                "type": "vecline",
                "default": "",
                "desc": "Use the helper. Drag it out to match the virtual spring."
            },
            {
                "name": "Spring Length",
                "key": "length",
                "type": "string",
                "default": "0",
                "desc": "How long the spring would be if it was at rest (nothing hanging on it or attached). 0 means the length of the brush."
            },
            {
                "name": "Spring Constant",
                "key": "constant",
                "type": "string",
                "default": "50",
                "desc": "Stiffness of the spring.  The larger the number the less the spring will stretch."
            },
            {
                "name": "Damping Constant",
                "key": "damping",
                "type": "string",
                "default": "2.0",
                "desc": "How much energy the spring loses.  The larger the number, the less bouncy the spring."
            },
            {
                "name": "Relative Damping Constant",
                "key": "relativedamping",
                "type": "string",
                "default": "0.1",
                "desc": "The amount of energy the spring loses proportional to the relative velocity of the two objects the spring is attached to."
            },
            {
                "name": "Break on Length",
                "key": "breaklength",
                "type": "string",
                "default": "0",
                "desc": "If the spring's length ever exceeds this length, the spring breaks."
            }
        ],
        "inputs": [
            {
                "name": "SetSpringConstant",
                "type": "float",
                "desc": "Set the Spring Constant."
            },
            {
                "name": "SetSpringLength",
                "type": "float",
                "desc": "Set the Spring Length."
            },
            {
                "name": "SetSpringDamping",
                "type": "float",
                "desc": "Set the Spring Damping."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "player_loadsaved",
        "desc": "Load Auto-Saved game",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Fade Duration (seconds)",
                "key": "duration",
                "type": "string",
                "default": "2",
                "desc": ""
            },
            {
                "name": "Hold Fade (seconds)",
                "key": "holdtime",
                "type": "string",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Fade Alpha",
                "key": "renderamt",
                "type": "integer",
                "default": "255",
                "desc": ""
            },
            {
                "name": "Fade Color (R G B)",
                "key": "rendercolor",
                "type": "color255",
                "default": "0 0 0",
                "desc": ""
            },
            {
                "name": "Reload delay",
                "key": "loadtime",
                "type": "string",
                "default": "0",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "Reload",
                "type": "void",
                "desc": "Ends this game and reloads"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "player_speedmod",
        "desc": "Speeds up or slows down player velocity over time (slow mo/fast forward)",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Suppress weapons": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Suppress HUD": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Suppress jump": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Suppress duck": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Suppress use": {
                        "default": false,
                        "num": 16
                    },
                    "[32] Suppress sprint": {
                        "default": false,
                        "num": 32
                    },
                    "[64] Suppress attack": {
                        "default": false,
                        "num": 64
                    },
                    "[128] Suppress zoom": {
                        "default": false,
                        "num": 128
                    },
                    "[256] Don't suppress flashlight": {
                        "default": false,
                        "num": 256
                    }
                }
            },
            {
                "name": "Additional Buttons",
                "key": "additionalbuttons",
                "type": "integer",
                "default": "0",
                "desc": "Additional buttons to suppress, other than those listed in the spawnflags. Advanced users only."
            }
        ],
        "inputs": [
            {
                "name": "ModifySpeed",
                "type": "float",
                "desc": "Modifies player speed by X amount."
            },
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enables the spawnflag abilities without actually modifying the player's speed."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disables the spawnflag abilities without actually modifying the player's speed."
            },
            {
                "name": "SetAdditionalButtons",
                "type": "integer",
                "desc": "Sets the additional suppressed buttons."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "player_weaponstrip",
        "desc": "Removes weapons from the player.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "Strip",
                "type": "void",
                "desc": "Removes all weapons."
            },
            {
                "name": "StripWeaponsAndSuit",
                "type": "void",
                "desc": "Strip player's weapons and suit"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "point_anglesensor",
        "desc": "An entity that detects if another entity points in a given direction for a period of time.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Target Entity Name",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity whose angles will be sensed."
            },
            {
                "name": "Look At Entity",
                "key": "lookatname",
                "type": "target_destination",
                "default": "",
                "desc": "The entity we want to check to see if the Target Entity is looking at."
            },
            {
                "name": "Duration",
                "key": "duration",
                "type": "float",
                "default": "",
                "desc": "The amount of time the Target Entity must look at the 'Look at Entity' to trigger this entity, in seconds."
            },
            {
                "name": "Tolerance",
                "key": "tolerance",
                "type": "integer",
                "default": "",
                "desc": "The tolerance, in degrees, in the checking to determine when the Target Entity is looking at the Look At Entity."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Use target entity's angles (NOT position)": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the sensor between enabled and disabled."
            },
            {
                "name": "Test",
                "type": "void",
                "desc": "Check to see if the Target Entity is facing the Look At Entity within the specified tolerance, firing either the OnFacingLookat or OnNotFacingLookat output based on the result."
            },
            {
                "name": "SetTargetEntity",
                "type": "string",
                "desc": "Set the target entity"
            }
        ],
        "outputs": [
            {
                "name": "TargetDir",
                "type": "vector",
                "desc": "Fired when the forward direction of the Target Entity changes. Passes the new forward direction as a parameter."
            },
            {
                "name": "OnFacingLookat",
                "type": "void",
                "desc": "Fired when the Target Entity points at the Look At Entity for more than the specified Duration, or in response to a Test input."
            },
            {
                "name": "OnNotFacingLookat",
                "type": "void",
                "desc": "Fires in response to a Test input when the Target Entity is not pointing at the Look At Entity."
            },
            {
                "name": "FacingPercentage",
                "type": "float",
                "desc": "Normalized value (0..1) where 1 is facing directly at target and 0 is at or beyond the angle of tolerance."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_angularvelocitysensor",
        "desc": "An entity that detects if another entity's angular velocity meets or exceeds a threshold value.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Target Entity Name",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity whose angular velocity will be sensed."
            },
            {
                "name": "Threshold Velocity",
                "key": "threshold",
                "type": "float",
                "default": "0",
                "desc": "The threshold angular velocity to compare against, in degrees per second."
            },
            {
                "name": "Fire Interval",
                "key": "fireinterval",
                "type": "float",
                "default": "0.2",
                "desc": "Angular velocity must cross the threshold for at least this long to fire."
            },
            {
                "name": "Axis",
                "key": "axis",
                "type": "vecline",
                "default": "",
                "desc": ""
            },
            {
                "name": "Use Axis Helper",
                "key": "usehelper",
                "type": "boolean",
                "default": "No",
                "desc": "Use axis helper to determine rotation values (clockwise/counter-clockwise)."
            }
        ],
        "inputs": [
            {
                "name": "Test",
                "type": "void",
                "desc": "Checks to see if the Target Entity's angular velocity meets or exceeds the Threshold Velocity, firing either the OnGreaterThanOrEqualTo or OnLessThan output based on the result."
            },
            {
                "name": "TestWithInterval",
                "type": "void",
                "desc": "Checks to see if the Target Entity's angular velocity meets or exceeds the Threshold Velocity. Once the Fire Interval expires, fires the appropriate test result output if the result is stable throughout the Fire Interval."
            }
        ],
        "outputs": [
            {
                "name": "AngularVelocity",
                "type": "float",
                "desc": "Fired when the Target's Angular Velocity changes, passing the new magnitude of the angular velocity."
            },
            {
                "name": "OnGreaterThan",
                "type": "void",
                "desc": "Fired when the Target Entity goes from slower than the threshold angular velocity to faster than the threshold angular velocity."
            },
            {
                "name": "OnGreaterThanOrEqualTo",
                "type": "void",
                "desc": "Fired when the Target Entity goes from slower than the threshold angular velocity to faster than the threshold angular velocity."
            },
            {
                "name": "OnLessThan",
                "type": "void",
                "desc": "Fired when the Target Entity goes from faster than the threshold angular velocity to slower than the threshold angular velocity."
            },
            {
                "name": "OnLessThanOrEqualTo",
                "type": "void",
                "desc": "Fired when the Target Entity goes from faster than the threshold angular velocity to slower than the threshold angular velocity."
            },
            {
                "name": "OnEqualTo",
                "type": "void",
                "desc": "Fired when the Target Entity reaches the threshold angular velocity from a different velocity."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_bonusmaps_accessor",
        "desc": "An entity that relays bonus maps changes.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "File Name",
                "key": "filename",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Map Name",
                "key": "mapname",
                "type": "string",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "Unlock",
                "type": "void",
                "desc": "Unlocks the filename/map combination."
            },
            {
                "name": "Complete",
                "type": "void",
                "desc": "Completes the filename/map combination."
            },
            {
                "name": "Save",
                "type": "void",
                "desc": "Saves bonus map data."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "point_camera",
        "desc": "Camera",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start Off": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "FOV",
                "key": "fov",
                "type": "float",
                "default": "90",
                "desc": "Field of view in degrees"
            },
            {
                "name": "Screen Aspect Ratio",
                "key": "usescreenaspectratio",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Fog Enable",
                "key": "fogenable",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Fog Color",
                "key": "fogcolor",
                "type": "color255",
                "default": "0 0 0",
                "desc": ""
            },
            {
                "name": "Fog Start",
                "key": "fogstart",
                "type": "float",
                "default": "2048",
                "desc": "The near fog plane."
            },
            {
                "name": "Fog End",
                "key": "fogend",
                "type": "float",
                "default": "4096",
                "desc": "The far fog/clipping plane."
            },
            {
                "name": "Fog Max Density [0..1]",
                "key": "fogmaxdensity",
                "type": "float",
                "default": "1",
                "desc": "The maximum fog density. 0=no fog, 1=full fog."
            }
        ],
        "inputs": [
            {
                "name": "ChangeFOV",
                "type": "string",
                "desc": "Changes camera's FOV over time"
            },
            {
                "name": "SetOnAndTurnOthersOff",
                "type": "void",
                "desc": "Turn the camera on, and turn all other cameras off."
            },
            {
                "name": "SetOn",
                "type": "void",
                "desc": "Turn the camera on."
            },
            {
                "name": "SetOff",
                "type": "void",
                "desc": "Turn the camera off."
            },
            {
                "name": "Activate",
                "type": "void",
                "desc": "Turn the camera on, activate it and deactivate all other cameras."
            },
            {
                "name": "Deactivate",
                "type": "void",
                "desc": "Turn the camera off, deactivate it."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "point_changelevel",
        "desc": "Level Change Entity",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "ChangeLevel",
                "type": "string",
                "desc": "Changes the level to the map name supplied as a parameter."
            },
            {
                "name": "ChangeLevelPostFade",
                "type": "string",
                "desc": "Immediately set screen to black rather than fade out, then change the level to the map name supplied."
            }
        ],
        "outputs": [
            {
                "name": "OnChangeLevel",
                "type": "void",
                "desc": "Fired when the level is about to change."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_clientcommand",
        "desc": "An entity that issues commands to the client console, as if it was typed in by the player (if activator is a player, or the local player in single player).",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "Command",
                "type": "string",
                "desc": "Command to execute."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "point_devshot_camera",
        "desc": "An entity used by the -makedevshots system, which automatically takes screenshots at the position of every devshot camera in the level.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Camera Name",
                "key": "cameraname",
                "type": "string",
                "default": "",
                "desc": "Used as the name of the directory to store screenshots from this camera. Must be unique within the level."
            },
            {
                "name": "Camera FOV",
                "key": "fov",
                "type": "integer",
                "default": "90",
                "desc": "FOV of this camera."
            },
            {
                "name": "<Far Plane>",
                "key": "_frustum_far",
                "type": "integer",
                "default": "1024",
                "desc": "Ignore, needed to display the view frustum preview."
            }
        ],
        "inputs": [
            {
                "name": "TakeScreenshot",
                "type": "void",
                "desc": "Takes a single screenshot from this camera only"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "point_enable_motion_fixup",
        "desc": "An entity used to move a motion-disabled prop when it enables motion. Parent this entity to the prop, and when the prop has its motion enabled, it will immediately teleport to the origin of this entity.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "point_entity_finder",
        "desc": "An entity that will find an entity and pass it along as the !caller with the OutEntity output. Requires using !caller as the parameter on the input.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Filter Name",
                "key": "filtername",
                "type": "filterclass",
                "default": "",
                "desc": "Filter to use to narrow set of findable entities. See filter_activator_name for more explanation."
            },
            {
                "name": "Reference Entity",
                "key": "referencename",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity to use when evaluating criteria. For example, when using 'Nearest', this is the entity that distance will be measured from. If left blank will use the point_entity_finder."
            },
            {
                "name": "Search Method",
                "key": "method",
                "type": "choices",
                "default": "Nearest (0)",
                "desc": "",
                "choices": {
                    "Nearest": "0",
                    "Farthest": "1",
                    "Random": "2"
                }
            }
        ],
        "inputs": [
            {
                "name": "FindEntity",
                "type": "void",
                "desc": "Find an entity that meets the specified criteria.  Will fire OutEntity if found and pass the entity as !Caller."
            }
        ],
        "outputs": [
            {
                "name": "OnFoundEntity",
                "type": "void",
                "desc": "Fired when FindEntity is input and an entity was found. Passes the found entity as !Caller."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_futbol_shooter",
        "desc": "Fires prop_exploding_futbols at a target entity. Used in Wheatley's boss fight.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Launch speed",
                "key": "launchspeed",
                "type": "float",
                "default": "100",
                "desc": "Speed to launch the futbol."
            }
        ],
        "inputs": [
            {
                "name": "SetTarget",
                "type": "target_destination",
                "desc": "Set new launch target."
            },
            {
                "name": "ShootFutbol",
                "type": "void",
                "desc": "Shoot a futbol at the target."
            }
        ],
        "outputs": [
            {
                "name": "OnShootSuccess",
                "type": "void",
                "desc": "Called when a futbol is successfully fired."
            },
            {
                "name": "OnShootFail",
                "type": "void",
                "desc": "Called when a futbol fails to fire."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_gamestats_counter",
        "desc": "Generic game statistics counter.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Name of statistic counter",
                "key": "name",
                "type": "string",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "SetName",
                "type": "string",
                "desc": "Changes name of statistic counter"
            },
            {
                "name": "Increment",
                "type": "float",
                "desc": "Increments named statistic counter by specified value"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "point_hurt",
        "desc": "An entity that does damage to all entities in a radius around itself, with a specified delay. If 'Target Entity' is specified, the damage is only done to that entity.",
        "bases": [
            "BaseEntityPoint",
            "DamageType"
        ],
        "keyvalues": [
            {
                "name": "Target Entity",
                "key": "damagetarget",
                "type": "target_destination",
                "default": "",
                "desc": "If specified, only this entity will take damage. Otherwise, all entities within the Radius will take damage."
            },
            {
                "name": "Radius",
                "key": "damageradius",
                "type": "float",
                "default": "256",
                "desc": "All entities within this radius of this entity will take damage. If a 'Target Entity' is specified, only that entity will take damage."
            },
            {
                "name": "Damage",
                "key": "damage",
                "type": "integer",
                "default": "5",
                "desc": "Damage done to all affected entities each time this entity fires."
            },
            {
                "name": "Delay",
                "key": "damagedelay",
                "type": "float",
                "default": "1",
                "desc": "Delay between refires, in seconds."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start Active": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Hurt",
                "type": "void",
                "desc": "Force a single fire, damaging either the Target Entity or all entities within the radius."
            },
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Enable this entity. It will start damaging entities everytime it fires, and refire based upon the specified Delay."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Disable this entity. It will stop damaging entities."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle this entity between On/Off state."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "point_laser_target",
        "desc": "Invisible Discouragement Beam detector, for logic use. The entity will fire outputs when struck and unstruck.",
        "bases": [
            "BaseEntityPoint",
            "SRCIndicator"
        ],
        "keyvalues": [
            {
                "name": "Terminal Point",
                "key": "terminalpoint",
                "type": "boolean",
                "default": "No",
                "desc": "Whether to behave like a laser catcher or a relay. When on, lasers will auto-aim towards this, and lasers that hit it will not show end sparks or be able to activate later laser targets. When off, these behaviors do not occur, and it has a taller hitbox to match a laser relay."
            },
            {
                "name": "Laser Filter Color (R G B A)",
                "key": "filtercolor",
                "type": "color255",
                "default": "255 255 255 255",
                "desc": "Filter lasers by this colour."
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnPowered",
                "type": "void",
                "desc": "Fired when a laser hits the target."
            },
            {
                "name": "OnUnpowered",
                "type": "void",
                "desc": "Fired when a laser has stopped hitting the target."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_message",
        "desc": "An entity that displays a text message in the world, at its origin.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start Disabled": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Entity Message",
                "key": "message",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Show message radius",
                "key": "radius",
                "type": "integer",
                "default": "128",
                "desc": "Distance the player must be within to see this message."
            },
            {
                "name": "Developer Only?",
                "key": "developeronly",
                "type": "boolean",
                "default": "No",
                "desc": "If set, this message will only be visible when developer mode is on."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Start displaying the message text, if the player is within the message radius."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Stop displaying the message text."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "point_paint_sensor",
        "desc": "An entity that detects when surfaces are painted.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Search Radius",
                "key": "radius",
                "type": "float",
                "default": "64",
                "desc": "Radius to search inside, -1 to disable."
            },
            {
                "name": "Target Brush Faces",
                "key": "sides",
                "type": "sidelist",
                "default": "",
                "desc": "Faces on which to watch for paint."
            },
            {
                "name": "Target Entity",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Entity for which to watch for paint."
            },
            {
                "name": "Filter Name",
                "key": "filtername",
                "type": "filterclass",
                "default": "",
                "desc": "Filter to use to narrow set of findable entities. See filter_activator_name for more explanation."
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnPainted",
                "type": "integer",
                "desc": "Gets called when paint is detected. Parameter is set to the paint type index."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_playermoveconstraint",
        "desc": "An entity that constrains players to a radius around itself, slowing them down the closer they get to the edge of the radius.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Radius",
                "key": "radius",
                "type": "float",
                "default": "256",
                "desc": "Radius to constrain players to."
            },
            {
                "name": "Constraint Width",
                "key": "width",
                "type": "float",
                "default": "75.0",
                "desc": "Width of the constraint edge. This is the distance in which to start slowing players down as they approach the edge of the radius."
            },
            {
                "name": "Speed Factor",
                "key": "speedfactor",
                "type": "float",
                "default": "0.15",
                "desc": "Factor applied to the player's max speed as they approach the radius edge."
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Start constraining any players within the radius."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Stop constraining any players previously constrained."
            }
        ],
        "outputs": [
            {
                "name": "OnConstraintBroken",
                "type": "void",
                "desc": "Fired when a player breaks through the constraint."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_posecontroller",
        "desc": "An entity that controls a pose parameter of a prop and cycles the pose clientside.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Target",
                "key": "propname",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the prop to control. Can be any animating entity."
            },
            {
                "name": "Pose Parameter Name",
                "key": "poseparametername",
                "type": "string",
                "default": "",
                "desc": "Name of the pose parameter to control. Setting this to an invalid value will crash the game!"
            },
            {
                "name": "Pose Parameter Value",
                "key": "posevalue",
                "type": "float",
                "default": "0",
                "desc": "Normalized value for the pose parameter from 0.0 and 1.0 (maps to min and max range)."
            },
            {
                "name": "Interpolation Time",
                "key": "interpolationtime",
                "type": "float",
                "default": "0",
                "desc": "Number of seconds (0.0 to 10.0) for client to match absolue pose values."
            },
            {
                "name": "Interpolation Wrap",
                "key": "interpolationwrap",
                "type": "boolean",
                "default": "No",
                "desc": "Should wrap from 0.0 to 1.0 when interpolating."
            },
            {
                "name": "Cycle Frequency",
                "key": "cyclefrequency",
                "type": "float",
                "default": "0",
                "desc": "Base cycles per second from -10.0 to 10.0."
            },
            {
                "name": "Frequency Modulation Type",
                "key": "fmodulationtype",
                "type": "choices",
                "default": "None (0)",
                "desc": "",
                "choices": {
                    "None": "0",
                    "Sine": "1",
                    "Square": "2",
                    "Triangle": "3",
                    "Sawtooth": "4",
                    "Noise": "5"
                }
            },
            {
                "name": "Frequency Modulation Time Offset",
                "key": "fmodtimeoffset",
                "type": "float",
                "default": "0",
                "desc": "Modulation time offset from -1.0f to 1.0."
            },
            {
                "name": "Frequency Modulation Rate",
                "key": "fmodrate",
                "type": "float",
                "default": "0",
                "desc": "Modulation cycles per second from -10.0f to 10.0."
            },
            {
                "name": "Frequency Modulation Amplitude",
                "key": "fmodamplitude",
                "type": "float",
                "default": "0",
                "desc": "Modulation extents from 0.0f to 10.0."
            }
        ],
        "inputs": [
            {
                "name": "SetPoseParameterName",
                "type": "string",
                "desc": "Sets the pose parameter to control."
            },
            {
                "name": "SetPoseValue",
                "type": "float",
                "desc": "Set the pose parameter to a normalized value between 0.0 and 1.0 (maps to min and max range)."
            },
            {
                "name": "SetInterpolationTime",
                "type": "float",
                "desc": "Set the interpolation time to a number of seconds between 0.0 and 10.0."
            },
            {
                "name": "SetCycleFrequency",
                "type": "float",
                "desc": "Set the pose parameter's base cycles per second from -10.0f to 10.0."
            },
            {
                "name": "SetFModType",
                "type": "integer",
                "desc": "Set the type of frequency modulation."
            },
            {
                "name": "SetFModTimeOffset",
                "type": "float",
                "desc": "Set the modulation time offset from -1.0f to 1.0."
            },
            {
                "name": "SetFModRate",
                "type": "float",
                "desc": "Set the modulation cycles per second from -10.0f to 10.0."
            },
            {
                "name": "SetFModAmplitude",
                "type": "float",
                "desc": "Set the modulation extents from 0.0f to 10.0."
            },
            {
                "name": "RandomizeFMod",
                "type": "float",
                "desc": "Randomize the frequency modulation by an extremeness of 0.0 to 1.0."
            },
            {
                "name": "GetFmod",
                "type": "void",
                "desc": "Outputs the current modulation settings in console."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "point_proximity_sensor",
        "desc": "An entity that detects another entity's proximity to a target position.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Target Entity Name",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity whose position will be sensed."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Test the distance as measured along the axis specified by our direction.": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the sensor between enabled and disabled."
            }
        ],
        "outputs": [
            {
                "name": "Distance",
                "type": "float",
                "desc": "Distance of the target entity away from this entity."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_push",
        "desc": "Pulls objects to, or pushes them away from a point. In Portal 2, if a portal is placed nearby it will transfer the suction and produce a 'broken_tube_suck' effect for Diversity Vents.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Test LOS before pushing": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Use angles for push direction": {
                        "default": false,
                        "num": 2
                    },
                    "[4] No falloff (constant push at any distance)": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Push players": {
                        "default": true,
                        "num": 8
                    },
                    "[16] Push physics": {
                        "default": true,
                        "num": 16
                    }
                }
            },
            {
                "name": "Start Enabled",
                "key": "enabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Magnitude",
                "key": "magnitude",
                "type": "float",
                "default": "100",
                "desc": "How strongly to push away from the center."
            },
            {
                "name": "Radius",
                "key": "radius",
                "type": "float",
                "default": "128",
                "desc": "Radius to affect items in."
            },
            {
                "name": "LOS Radius",
                "key": "inner_radius",
                "type": "float",
                "default": "128",
                "desc": "If 'Test LOS' is enabled, collision checks will check this far from the center. This allows models to be placed in the middle."
            },
            {
                "name": "Cone of Influence",
                "key": "influence_cone",
                "type": "float",
                "default": "0",
                "desc": "If greater than zero, the cone (in degrees) within which the object must lie for it to be affected."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable the push."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable the push."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "point_servercommand",
        "desc": "An entity that issues commands to the server console.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "Command",
                "type": "string",
                "desc": "Command to execute."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "point_spotlight",
        "desc": "An entity to draw a spotlight. Will draw a beam when the player views it side on, and a halo when it's facing towards the player. Unless the 'No Dynamic Light' spawnflag is checked, it will also create a dynamic light wherever the end of the spotlight rests.",
        "bases": [
            "BaseEntityPoint",
            "SystemLevelChoice"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start On": {
                        "default": true,
                        "num": 1
                    },
                    "[2] No Dynamic Light": {
                        "default": true,
                        "num": 2
                    }
                }
            },
            {
                "name": "Spotlight Length",
                "key": "spotlightlength",
                "type": "integer",
                "default": "500",
                "desc": "Length of the spotlight beam."
            },
            {
                "name": "Spotlight Width",
                "key": "spotlightwidth",
                "type": "integer",
                "default": "50",
                "desc": "Width of the spotlight beam."
            },
            {
                "name": "Color (R G B)",
                "key": "rendercolor",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "HDR color scale.",
                "key": "hdrcolorscale",
                "type": "float",
                "default": "0.7",
                "desc": "float value to multiply sprite color by when running in HDR mode."
            },
            {
                "name": "Ignore Solid",
                "key": "ignoresolid",
                "type": "boolean",
                "default": "No",
                "desc": "If set, this spotlight won't trace for solids."
            },
            {
                "name": "Brightness",
                "key": "brightness",
                "type": "integer",
                "default": "64",
                "desc": "Integer value representing spotlight brightness (0-255)"
            }
        ],
        "inputs": [
            {
                "name": "LightOn",
                "type": "void",
                "desc": "Turn the spotlight on."
            },
            {
                "name": "LightOff",
                "type": "void",
                "desc": "Turn the spotlight off"
            },
            {
                "name": "SetColor",
                "type": "color255",
                "desc": "Change the color of the spotlight."
            },
            {
                "name": "ForceUpdate",
                "type": "void",
                "desc": "Force an update of the spotlight position and orientation."
            },
            {
                "name": "SetBrightness",
                "type": "integer",
                "desc": "Set the brightness of the spotlight."
            }
        ],
        "outputs": [
            {
                "name": "OnLightOn",
                "type": "void",
                "desc": "Fires when light turns on."
            },
            {
                "name": "OnLightOff",
                "type": "void",
                "desc": "Fires when light turns off."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_survey",
        "desc": "Displays a survey to the player.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Survey Script Name",
                "key": "surveyname",
                "type": "string",
                "default": "end_puzzle_survey",
                "desc": "Name of a survey keyvalues file, from the 'scripts/surveys' folder."
            }
        ],
        "inputs": [
            {
                "name": "ShowSurvey",
                "type": "void",
                "desc": "Displays the survey."
            }
        ],
        "outputs": [
            {
                "name": "OnSurveyComplete",
                "type": "void",
                "desc": "Fired when the player completes or cancels the survey."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_teleport",
        "desc": "An entity that teleports a target entity to this position and angles. If 'Teleport Home' spawn flag is set, teleports the target entity to its spawn position instead. If object is physically simulated, simulation is turned off when teleported.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Entity To Teleport",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity that will be teleported."
            },
            {
                "name": "[H] Model",
                "key": "model",
                "type": "studio",
                "default": "models/editor/angle_helper.mdl",
                "desc": "The model shown in Hammer, to use for positioning."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Teleport Home": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Into Duck (episodic)": {
                        "default": false,
                        "num": 2
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Teleport",
                "type": "void",
                "desc": "Teleport the target entity."
            },
            {
                "name": "TeleportToCurrentPos",
                "type": "void",
                "desc": "Teleport the target entity to wherever the point_teleport entity is currently. The Teleport input teleports to the initial position of the point_teleport, so this input was added to avoid breaking old content."
            },
            {
                "name": "TeleportEntity",
                "type": "target_destination",
                "desc": "Teleport the entity specified by the parameter override. Use this to teleport an entity other than the one specified in the Entity To Teleport field."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "point_template",
        "desc": "Turns an entity, or set of entities, into a single template that can be instanced anywhere, and multiple times. If there are interdependencies (entity I/O, hierarchy, or other name references) between the entities in the template, the entities in the template will have their names changed and the interdependencies will be reconnected to the changes names. The name change format is as follows: '<original name>&0000', where the 0000 will be replaced with the current global template instance, so wildcard searches for '<original name>*' will still find them.\nIf you don't want the name fixup to happen, because you're only spawning the template once, or you want inputs to trigger all instances of the template, check the 'Preserve entity names' spawnflag. \nTo spawn the template in other places, use an env_entity_maker.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Don't remove template entities": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Preserve entity names (Don't do name fixup)": {
                        "default": true,
                        "num": 2
                    }
                }
            },
            {
                "name": "Template 1",
                "key": "template01",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Template 2",
                "key": "template02",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Template 3",
                "key": "template03",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Template 4",
                "key": "template04",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Template 5",
                "key": "template05",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Template 6",
                "key": "template06",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Template 7",
                "key": "template07",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Template 8",
                "key": "template08",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Template 9",
                "key": "template09",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Template 10",
                "key": "template10",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Template 11",
                "key": "template11",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Template 12",
                "key": "template12",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Template 13",
                "key": "template13",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Template 14",
                "key": "template14",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Template 15",
                "key": "template15",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "Template 16",
                "key": "template16",
                "type": "target_destination",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "ForceSpawn",
                "type": "void",
                "desc": "Spawn an instance of the template at the original position."
            }
        ],
        "outputs": [
            {
                "name": "OnEntitySpawned",
                "type": "void",
                "desc": "Fired after spawning an instance of this template."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_tesla",
        "desc": "An entity that creates tesla lightning arcs around its origin.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Start Enabled",
                "key": "m_bon",
                "type": "boolean",
                "default": "No",
                "desc": "Should the tesla start active?"
            },
            {
                "name": "Source Entity",
                "key": "m_sourceentityname",
                "type": "target_destination",
                "default": "",
                "desc": "If specified, tesla lightning will originate from the specified entity. Otherwise, they originate from this entity."
            },
            {
                "name": "Sound Name",
                "key": "m_soundname",
                "type": "sound",
                "default": "DoSpark",
                "desc": "Sound to be played whenever lightning is created."
            },
            {
                "name": "Sprite Name",
                "key": "texture",
                "type": "sprite",
                "default": "sprites/physbeam.vmt",
                "desc": "Material to use for the tesla lightning beams."
            },
            {
                "name": "Color",
                "key": "m_color",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "Radius",
                "key": "m_flradius",
                "type": "float",
                "default": "200",
                "desc": "Radius around the origin to find a point to strike with a tesla lightning beam."
            },
            {
                "name": "Min # of Beams",
                "key": "beamcount_min",
                "type": "integer",
                "default": "6",
                "desc": "Minimum number of tesla lightning beams to create when creating an arc."
            },
            {
                "name": "Max # of Beams",
                "key": "beamcount_max",
                "type": "integer",
                "default": "8",
                "desc": "Maximum number of tesla lightning beams to create when creating an arc."
            },
            {
                "name": "Min Beam Width",
                "key": "thick_min",
                "type": "float",
                "default": "4",
                "desc": "Minimum width of the tesla lightning beams."
            },
            {
                "name": "Max Beam Width",
                "key": "thick_max",
                "type": "float",
                "default": "5",
                "desc": "Maximum width of the tesla lightning beams."
            },
            {
                "name": "Min Time Visible",
                "key": "lifetime_min",
                "type": "float",
                "default": "0.3",
                "desc": "Minimum lifetime of the tesla lightning beams."
            },
            {
                "name": "Max Time Visible",
                "key": "lifetime_max",
                "type": "float",
                "default": "0.3",
                "desc": "Maximum lifetime of the tesla lightning beams."
            },
            {
                "name": "Min Time Between Arcs",
                "key": "interval_min",
                "type": "float",
                "default": "0.5",
                "desc": "Minimum time delay between random arcing."
            },
            {
                "name": "Max Time Between Arcs",
                "key": "interval_max",
                "type": "float",
                "default": "2",
                "desc": "Maximum time delay between random arcing."
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turn emitter on."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Turn emitter off."
            },
            {
                "name": "DoSpark",
                "type": "void",
                "desc": "Force a single arc."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "point_velocitysensor",
        "desc": "An entity that detects and outputs an entity's velocity.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Target Entity Name",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity whose velocity will be sensed."
            },
            {
                "name": "Measurement Axis",
                "key": "axis",
                "type": "vecline",
                "default": "",
                "desc": ""
            },
            {
                "name": "Start Enabled",
                "key": "enabled",
                "type": "boolean",
                "default": "No",
                "desc": "Whether or not to start enabled and active."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable the sensor."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable the sensor."
            }
        ],
        "outputs": [
            {
                "name": "Velocity",
                "type": "float",
                "desc": "Fired when the Target's Velocity changes, passing the new magnitude of the velocity."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_viewcontrol",
        "desc": "A camera entity that controls the player's view. While it's active, the player will see out of the camera.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Entity to Look At",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity that the camera should point at and track while active."
            },
            {
                "name": "Target Attachment Name",
                "key": "targetattachment",
                "type": "string",
                "default": "",
                "desc": "If set, the camera will focus on the specified attachment on the 'Entity to Look At'."
            },
            {
                "name": "Hold Time",
                "key": "wait",
                "type": "integer",
                "default": "10",
                "desc": "The amount of time the camera should control the player's view for, after which it deactivates itself. If the camera should stay active until told to deactive, set the 'Infinite Hold Time' spawnflag."
            },
            {
                "name": "Path Corner",
                "key": "moveto",
                "type": "target_destination",
                "default": "",
                "desc": "The first path corner in a track that the camera should move along once it's activated. If not specified, the camera won't move."
            },
            {
                "name": "Interpolate Position To Player",
                "key": "interpolatepositiontoplayer",
                "type": "boolean",
                "default": "No",
                "desc": "Gradually interpolate player's position to here on start. (Episodic only)"
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start At Player": {
                        "default": true,
                        "num": 1
                    },
                    "[2] Follow Player": {
                        "default": true,
                        "num": 2
                    },
                    "[4] Freeze Player": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Infinite Hold Time": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Snap to goal angles": {
                        "default": false,
                        "num": 16
                    },
                    "[32] Make Player non-solid": {
                        "default": false,
                        "num": 32
                    },
                    "[64] Interruptable by Player": {
                        "default": false,
                        "num": 64
                    },
                    "[128] Set Fov": {
                        "default": false,
                        "num": 128
                    },
                    "[256] Freelook": {
                        "default": false,
                        "num": 256
                    }
                }
            },
            {
                "name": "Initial Speed",
                "key": "speed",
                "type": "float",
                "default": "0",
                "desc": "The starting speed that the camera moves at, if it's on a path track."
            },
            {
                "name": "Acceleration units/sec^2",
                "key": "acceleration",
                "type": "float",
                "default": "500",
                "desc": "The speed at which the camera accelerates to path corner's desired speeds."
            },
            {
                "name": "Stop Deceleration units/sec^2",
                "key": "deceleration",
                "type": "float",
                "default": "500",
                "desc": "The speed at which the camera decelerates to path corner's desired speeds."
            },
            {
                "name": "Tracking Speed of the camera",
                "key": "trackspeed",
                "type": "float",
                "default": "40",
                "desc": "The speed that the camera tries to follow it's look target."
            },
            {
                "name": "Field of view",
                "key": "fov",
                "type": "float",
                "default": "90",
                "desc": "Player FOV (if Set FOV spawnflag is set)"
            },
            {
                "name": "Seconds to reach FOV target",
                "key": "fov_rate",
                "type": "float",
                "default": "1.0",
                "desc": "Amount of time it should take to reach the specified FOV"
            },
            {
                "name": "Free Look Range",
                "key": "freelook_range",
                "type": "float",
                "default": "0",
                "desc": "The maximum distance in degrees the player can move the camera from it's starting position."
            },
            {
                "name": "Don't set player view",
                "key": "dontsetplayerview",
                "type": "boolean",
                "default": "No",
                "desc": "Prevents this point_viewcontrol from actually controlling the player's view. FOV, player-affecting spawnflags, etc. may still happen."
            },
            {
                "name": "<Far Plane>",
                "key": "_frustum_far",
                "type": "integer",
                "default": "1024",
                "desc": "Ignore, needed to display the view frustum preview."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable the point_viewcontrol, and start controlling the player's view."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable the point_viewcontrol, and stop controlling the player's view."
            },
            {
                "name": "EnableFreelook",
                "type": "void",
                "desc": "Enable the player to move the camera around freely."
            },
            {
                "name": "DisableFreelook",
                "type": "void",
                "desc": "Disable the player to move the camera around freely and ease view back to the camera's starting position."
            },
            {
                "name": "SetTarget",
                "type": "target_destination",
                "desc": "Set a new target for the camera to point at."
            },
            {
                "name": "SetTargetAttachment",
                "type": "string",
                "desc": "Set a new attachment on the target for the camera to point at."
            },
            {
                "name": "ReturnToEyes",
                "type": "void",
                "desc": "Return the camera view to the player's eyes."
            },
            {
                "name": "TeleportToView",
                "type": "void",
                "desc": "Teleport the player to the current position of the camera."
            },
            {
                "name": "SetTrackSpeed",
                "type": "float",
                "desc": "Set the speed that the camera will try to track it's target."
            },
            {
                "name": "SetPath",
                "type": "string",
                "desc": "Have the camera start following a new path."
            }
        ],
        "outputs": [
            {
                "name": "OnEndFollow",
                "type": "void",
                "desc": "Fired when the point_viewcontrol deactivates, due to the Disable input being received, the Entity to Look At being destroyed, or the Hold Time expiring."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_viewproxy",
        "desc": "A camera entity that moves the player's view. Use this if you want the player to retain control of where the player looks but want to move the position to another location.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[4] Freeze Player": {
                        "default": false,
                        "num": 4
                    },
                    "[32] Make Player non-solid": {
                        "default": false,
                        "num": 32
                    }
                }
            },
            {
                "name": "Offset type ",
                "key": "offsettype",
                "type": "choices",
                "default": "Snap to camera (0)",
                "desc": "How the player's view moves to the view of the camera.",
                "choices": {
                    "Snap to camera": "0",
                    "Ease to camera": "1",
                    "Keep offset": "2"
                }
            },
            {
                "name": "Proxy Entity",
                "key": "proxy",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity that the camera uses to translate the view."
            },
            {
                "name": "Attachment Point",
                "key": "proxyattachment",
                "type": "string",
                "default": "",
                "desc": "Use this attachment on the proxy's parent for position and orientation."
            },
            {
                "name": "Tilt Fraction",
                "key": "tiltfraction",
                "type": "float",
                "default": "0.5",
                "desc": "How much the angle of the proxy affects the angle of the view. 0.0 will keep the players view angles unmodified. 1.0 will add in the whole tilt from the proxy."
            },
            {
                "name": "Use Fake Acceleration",
                "key": "usefakeacceleration",
                "type": "boolean",
                "default": "No",
                "desc": "If the player maintains an offset from the proxy apply fake acceleration on the player based on the movement of the proxy."
            },
            {
                "name": "Skew Acceleration Forward",
                "key": "skewaccelerationforward",
                "type": "boolean",
                "default": "No",
                "desc": "If this is set fake acceleration will be more noticeable in the direction of the proxy."
            },
            {
                "name": "Acceleration Scalar",
                "key": "accelerationscalar",
                "type": "float",
                "default": "1.0",
                "desc": "Multiply the fake acceleration by this ammount."
            },
            {
                "name": "Ease Angles To Camera",
                "key": "easeanglestocamera",
                "type": "boolean",
                "default": "No",
                "desc": "Move the player's angles to the camera - this will stop them from looking around."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable the view proxy, and start modifying the player's view."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable the view proxy, and start modifying the player's view."
            },
            {
                "name": "TeleportPlayerToProxy",
                "type": "void",
                "desc": "Move the player to the view proxy."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "point_worldtext",
        "desc": "An entity that displays a text message oriented in the world, at its origin.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start Disabled": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Entity Message",
                "key": "message",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Text Size",
                "key": "textsize",
                "type": "float",
                "default": "10",
                "desc": "Text Size."
            },
            {
                "name": "Color",
                "key": "color",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "Font Material",
                "key": "font",
                "type": "material",
                "default": "editor/worldtext",
                "desc": "The font material atlas to use for the text"
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Start displaying the message text, if the player is within the message radius."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Stop displaying the message text."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggles the display status"
            },
            {
                "name": "SetMessage",
                "type": "string",
                "desc": "Set the message text."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "portalmp_gamerules",
        "desc": "Proxy entity for Portal 2 Gamerules. Appears nonfunctional.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "AddRedTeamScore",
                "type": "integer",
                "desc": "Add to P-Body's score (can be a negative number)"
            },
            {
                "name": "AddBlueTeamScore",
                "type": "integer",
                "desc": "Add to ATLAS's score (can be a negative number)"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "postprocess_controller",
        "desc": "An entity that controls the postprocess settings in the map.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Fade-in time",
                "key": "fadetime",
                "type": "float",
                "default": "2",
                "desc": ""
            },
            {
                "name": "Local contrast strength [-1..x]",
                "key": "localcontraststrength",
                "type": "float",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Local contrast edge strength [0..1]",
                "key": "localcontrastedgestrength",
                "type": "float",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Vignette start distance [0..1]",
                "key": "vignettestart",
                "type": "float",
                "default": "0.8",
                "desc": ""
            },
            {
                "name": "Vignette end distance [0..x]",
                "key": "vignetteend",
                "type": "float",
                "default": "1.1",
                "desc": ""
            },
            {
                "name": "Vignette blur strength [0..1]",
                "key": "vignetteblurstrength",
                "type": "float",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Fade to black strength [0..1]",
                "key": "fadetoblackstrength",
                "type": "float",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Depth-blur focal plane distance [0..1]",
                "key": "depthblurfocaldistance",
                "type": "float",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Depth-blur effect strength [0..x]",
                "key": "depthblurstrength",
                "type": "float",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Full-screen blur strength [0..1]",
                "key": "screenblurstrength",
                "type": "float",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Film grain strength [0..x]",
                "key": "filmgrainstrength",
                "type": "float",
                "default": "0",
                "desc": ""
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Master (Has priority if multiple postprocess_controllers exist)": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "SetFadeTime",
                "type": "float",
                "desc": "Set the fade time between post process settings."
            },
            {
                "name": "SetLocalContrastStrength",
                "type": "float",
                "desc": "Set the local contrast strength."
            },
            {
                "name": "SetLocalContrastEdgeStrength",
                "type": "float",
                "desc": "Set the local contrast strength at the edge of the screen (controlled by vignette)."
            },
            {
                "name": "SetVignetteStart",
                "type": "float",
                "desc": "Set the vignette start distance (from screen center)."
            },
            {
                "name": "SetVignetteEnd",
                "type": "float",
                "desc": "Set the vignette end distance."
            },
            {
                "name": "SetVignetteBlurStrength",
                "type": "float",
                "desc": "Set the strength of the desaturated blur on the vignette."
            },
            {
                "name": "SetFadeToBlackStrength",
                "type": "float",
                "desc": "Set the fadeout strength."
            },
            {
                "name": "SetDepthBlurFocalDistance",
                "type": "float",
                "desc": "Set the focal distance of the depth blur effect (in the range [0,1])."
            },
            {
                "name": "SetDepthBlurStrength",
                "type": "float",
                "desc": "Set the depth blur effect strength."
            },
            {
                "name": "SetScreenBlurStrength",
                "type": "float",
                "desc": "Set the screen blur effect strength."
            },
            {
                "name": "SetFilmGrainStrength",
                "type": "float",
                "desc": "Set the film grain effect strength."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "projected_wall_entity",
        "desc": "A Hard Light Bridge. Probably not spawnable in Hammer. Can be detected with triggers that have the 'Everything' flag set.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_detail",
        "desc": "Allows manually placing model-based detail props. These are normally generated by VBSP on materials with %detailtype set.",
        "bases": [
            "Origin",
            "Angles",
            "DetailPropBase"
        ],
        "keyvalues": [
            {
                "name": "World model",
                "key": "model",
                "type": "studio",
                "default": "",
                "desc": "The model to use for this prop."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_detail_sprite",
        "desc": "Allows manually placing sprite-based detail props. These are normally generated by VBSP on materials with %detailtype set.",
        "bases": [
            "Origin",
            "Angles",
            "DetailPropBase"
        ],
        "keyvalues": [
            {
                "name": "Upper-Left Position",
                "key": "position_ul",
                "type": "vector",
                "default": "-10 20",
                "desc": "Position of the upper-left corner of the sprite in the world."
            },
            {
                "name": "Lower-Right Position",
                "key": "position_lr",
                "type": "vector",
                "default": "10 0",
                "desc": "Position of the lower-right corner of the sprite in the world."
            },
            {
                "name": "Upper-Left Sprite Position",
                "key": "tex_ul",
                "type": "vector",
                "default": "0 0",
                "desc": "Position of the upper-left corner of the sprite in the texture."
            },
            {
                "name": "Sprite Size",
                "key": "tex_size",
                "type": "vector",
                "default": "64 64",
                "desc": "Width and height of the sprite in the texture."
            },
            {
                "name": "Spritesheet Size",
                "key": "tex_total_size",
                "type": "float",
                "default": "512",
                "desc": "The width of the spritesheet texture. \nValve Bug: the aspect ratio must match the default detail/detailsprites!"
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_glass_futbol_socket",
        "desc": "Invisible entity that holds futbols and fires an output. When a futbol comes close it will snap into place.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": [
            {
                "name": "OnFutbolReleased",
                "type": "void",
                "desc": "Player has taken the futbol out of this socket."
            },
            {
                "name": "OnFutbolCaught",
                "type": "void",
                "desc": "This socket has captured a futbol."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_glass_futbol_spawner",
        "desc": "Spawns futbols. Will re-create a futbol when its created futbol breaks.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Start with Futbol",
                "key": "startwithfutbol",
                "type": "boolean",
                "default": "No",
                "desc": "Set true if this spawner starts with a futbol in it. Set to false if this spawner's futbol will be manually placed in the map."
            }
        ],
        "inputs": [
            {
                "name": "ForceSpawn",
                "type": "void",
                "desc": "Spawns a new futbol. Usually isn't necessary, because futbols respawn automatically if broken."
            }
        ],
        "outputs": [
            {
                "name": "OnFutbolSpawned",
                "type": "void",
                "desc": "Created a new futbol."
            },
            {
                "name": "OnFutbolGrabbed",
                "type": "void",
                "desc": "Player has taken the futbol out of this spawner."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_indicator_panel",
        "desc": "Indicator signs for the end of modern antlines. Shows either a tick/cross, or a circular countdown. Can also function as a env_texturetoggle for indicator lights.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Timer Duration",
                "key": "timerduration",
                "type": "float",
                "default": "0",
                "desc": "Amount of time the counter will count down."
            },
            {
                "name": "Start visible?",
                "key": "enabled",
                "type": "boolean",
                "default": "No",
                "desc": "Appears non-functional."
            },
            {
                "name": "Starting State",
                "key": "istimer",
                "type": "choices",
                "default": "Checkmark (0)",
                "desc": "Does this start as a checkmark or countdown display? Firing the appropriate inputs will switch the mode automatically.",
                "choices": {
                    "Checkmark": "0",
                    "Timer": "1"
                }
            },
            {
                "name": "Starts checked?",
                "key": "ischecked",
                "type": "boolean",
                "default": "No",
                "desc": "If this is a checkmark sign, whether this starts checked or not."
            },
            {
                "name": "Indicator Lights",
                "key": "indicatorlights",
                "type": "target_destination",
                "default": "",
                "desc": "If supplied, assumes this is a group of indicators lights to toggle when the indicator is toggled."
            },
            {
                "name": "[H] Skin",
                "key": "skin",
                "type": "choices",
                "default": "Check (0)",
                "desc": "What kind of indicator to show as inside Hammer.",
                "choices": {
                    "Check": "0",
                    "Cross": "1",
                    "Timer": "2"
                }
            }
        ],
        "inputs": [
            {
                "name": "Check",
                "type": "void",
                "desc": "Sets the indicator state to be 'checked', switching the screen to tick/cross mode."
            },
            {
                "name": "Uncheck",
                "type": "void",
                "desc": "Sets the indicator state to be 'unchecked'."
            },
            {
                "name": "Start",
                "type": "void",
                "desc": "Start counting down, switching the screen to timer mode."
            },
            {
                "name": "Stop",
                "type": "void",
                "desc": "Stop the counter at its current value."
            },
            {
                "name": "Reset",
                "type": "void",
                "desc": "Reset the timer back to its default value."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_portal",
        "desc": "A portal.",
        "bases": [
            "BaseEntityPoint",
            "PortalBase"
        ],
        "keyvalues": [
            {
                "name": "Start Activated",
                "key": "activated",
                "type": "choices",
                "default": "Inactive (0)",
                "desc": "An inactive portal will not be drawn and will not teleport entites",
                "choices": {
                    "Inactive": "0",
                    "Active": "1"
                }
            },
            {
                "name": "Portal Number",
                "key": "portaltwo",
                "type": "choices",
                "default": "Portal 2 (Orange/Purple/Red) (1)",
                "desc": "Which of the pair is this portal?",
                "choices": {
                    "Portal 1 (Blue/Cyan/Yellow)": "0",
                    "Portal 2 (Orange/Purple/Red)": "1"
                }
            },
            {
                "name": "Portal Group",
                "key": "linkagegroupid",
                "type": "integer",
                "default": "0",
                "desc": "Portal pair ID that it belongs to, 0=SP, 1=ATLAS, 2=P-Body"
            },
            {
                "name": "Hammer Skin",
                "key": "skin",
                "type": "choices",
                "default": "Orange Portal (1)",
                "desc": "Which portal to show as?",
                "choices": {
                    "Blue Portal": "0",
                    "Orange Portal": "1",
                    "Cyan Portal": "3",
                    "Purple Portal": "4",
                    "Yellow Portal": "5",
                    "Red Portal": "6",
                    "Generic Portal": "2"
                }
            },
            {
                "name": "Half-Width of the Portal.",
                "key": "halfwidth",
                "type": "float",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Half-Height of the Portal.",
                "key": "halfheight",
                "type": "float",
                "default": "0",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "SetName",
                "type": "string",
                "desc": "Naming your portals is fun"
            },
            {
                "name": "SetActivatedState",
                "type": "boolean",
                "desc": "An inactive portal will not be drawn and will not teleport entites"
            },
            {
                "name": "Fizzle",
                "type": "void",
                "desc": "Makes a cool visual fizzle and properly shuts down the portal"
            },
            {
                "name": "NewLocation",
                "type": "string",
                "desc": "Sets this portals location and angles. This expects 6 floats with space delimiters, the format is 'x y z pitch yaw roll'"
            },
            {
                "name": "Resize",
                "type": "string",
                "desc": "Resizes the portal. Format is 'halfwidth halfheight'"
            },
            {
                "name": "SetLinkageGroupId",
                "type": "integer",
                "desc": "Sets the portal linkage ID.  If portal is open it will close and reopen with new portal linked."
            }
        ],
        "outputs": [
            {
                "name": "OnPlacedSuccessfully",
                "type": "void",
                "desc": "When a portal is placed without failure, this output is fired."
            },
            {
                "name": "OnEntityTeleportFromMe",
                "type": "void",
                "desc": "When any entity is teleported from this portal to the linked partner."
            },
            {
                "name": "OnPlayerTeleportFromMe",
                "type": "void",
                "desc": "When the player is teleported from this portal to the linked partner."
            },
            {
                "name": "OnEntityTeleportToMe",
                "type": "void",
                "desc": "When any entity is teleported from this linked partner to the portal."
            },
            {
                "name": "OnPlayerTeleportToMe",
                "type": "void",
                "desc": "When the player is teleported from this linked partner to the portal."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_static",
        "desc": "A prop that doesn't move and doesn't animate.",
        "bases": [
            "Angles"
        ],
        "keyvalues": [
            {
                "name": "World Model",
                "key": "model",
                "type": "studio",
                "default": "",
                "desc": "Specify the model to place."
            },
            {
                "name": "Skin",
                "key": "skin",
                "type": "integer",
                "default": "0",
                "desc": "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default."
            },
            {
                "name": "Alpha",
                "key": "renderamt",
                "type": "integer",
                "default": "255",
                "desc": "Alpha of the fade, where 0 = fully transparent and 255 = fully opaque."
            },
            {
                "name": "Color (R G B)",
                "key": "rendercolor",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "Uniform Scale Override",
                "key": "uniformscale",
                "type": "float",
                "default": "1",
                "desc": "Resize the static prop uniformly."
            },
            {
                "name": "Scale Override",
                "key": "scale",
                "type": "vector",
                "default": "1 1 1",
                "desc": "Resize the static prop."
            },
            {
                "name": "Collisions",
                "key": "solid",
                "type": "choices",
                "default": "Use VPhysics (6)",
                "desc": "",
                "choices": {
                    "Not Solid": "0",
                    "Use BSP (QPhysics)": "1",
                    "Use Bounding Box": "2",
                    "Use Oriented Bounding Box": "3",
                    "Use Oriented Bounding Box, constrained to Yaw only": "4",
                    "Use VPhysics": "6"
                }
            },
            {
                "name": "Minimum CPU Level",
                "key": "mincpulevel",
                "type": "choices",
                "default": "default (low) (0)",
                "desc": "",
                "choices": {
                    "default (low)": "0",
                    "low": "1",
                    "medium": "2",
                    "high": "3"
                }
            },
            {
                "name": "Maximum CPU Level",
                "key": "maxcpulevel",
                "type": "choices",
                "default": "default (high) (0)",
                "desc": "",
                "choices": {
                    "default (high)": "0",
                    "low": "1",
                    "medium": "2",
                    "high": "3"
                }
            },
            {
                "name": "Minimum GPU Level",
                "key": "mingpulevel",
                "type": "choices",
                "default": "default (very low) (0)",
                "desc": "",
                "choices": {
                    "default (very low)": "0",
                    "very low": "1",
                    "low": "2",
                    "medium": "3",
                    "high": "4"
                }
            },
            {
                "name": "Maximum GPU Level",
                "key": "maxgpulevel",
                "type": "choices",
                "default": "default (high) (0)",
                "desc": "",
                "choices": {
                    "default (high)": "0",
                    "very low": "1",
                    "low": "2",
                    "medium": "3",
                    "high": "4"
                }
            },
            {
                "name": "Disable Shadows",
                "key": "disableshadows",
                "type": "boolean",
                "default": "No",
                "desc": "Prevent the entity from casting VRAD shadows"
            },
            {
                "name": "Disable ShadowDepth",
                "key": "disableshadowdepth",
                "type": "boolean",
                "default": "No",
                "desc": "Used to disable rendering into shadow depth (for projected textures and CSM) for this entity."
            },
            {
                "name": "Disable Vertex lighting",
                "key": "disablevertexlighting",
                "type": "boolean",
                "default": "No",
                "desc": "Disable per-vertex lighting on this prop."
            },
            {
                "name": "Disable Self-Shadowing",
                "key": "disableselfshadowing",
                "type": "boolean",
                "default": "No",
                "desc": "When vertex lighting is enabled, prevent the geometry from self-shadowing -- casting shadows onto itself."
            },
            {
                "name": "Ignore Surface Normal",
                "key": "ignorenormals",
                "type": "boolean",
                "default": "No",
                "desc": "When vertex lighting is enabled, ignore the surface normal of faces when calculating the vertex lighting. Useful for thin, translucent objects such as leaves on foliage props."
            },
            {
                "name": "Enable Bounced Lighting",
                "key": "enablelightbounce",
                "type": "boolean",
                "default": "No",
                "desc": "Whether VRAD should create indirect lighting from this prop."
            },
            {
                "name": "Render in Fast Reflections",
                "key": "drawinfastreflection",
                "type": "boolean",
                "default": "No",
                "desc": "If enabled, causes this entity/prop to to render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
            },
            {
                "name": "Lighting Origin",
                "key": "lightingorigin",
                "type": "target_destination",
                "default": "",
                "desc": "Select an info_lighting to specify a location to sample lighting from, instead of using this entity's origin."
            },
            {
                "name": "Screen Space Fade",
                "key": "screenspacefade",
                "type": "boolean",
                "default": "No",
                "desc": "The method by which the fading distance should be determined. If 'No', the fade distances is the distance from the player's view to the object, in units. If 'Yes', the fade distance is the size of the object onscreen, in pixels."
            },
            {
                "name": "Start Fade Dist/Pixels",
                "key": "fademindist",
                "type": "float",
                "default": "-1",
                "desc": "Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade."
            },
            {
                "name": "End Fade Dist/Pixels",
                "key": "fademaxdist",
                "type": "float",
                "default": "0",
                "desc": "Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades."
            },
            {
                "name": "Fade Scale",
                "key": "fadescale",
                "type": "float",
                "default": "1",
                "desc": "If you specify a fade in the worldspawn, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.This scale factor gives you some control over the fade. Using 0 here turns off the forcible fades. Numbers smaller than 1 cause the prop to fade out at further distances, and greater than 1 cause it to fade out at closer distances."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_testchamber_sign",
        "desc": "Portal 2 Test chamber sign",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Icon 0 active": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Icon 1 active": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Icon 2 active": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Icon 3 active": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Icon 4 active": {
                        "default": false,
                        "num": 16
                    },
                    "[32] Icon 5 active": {
                        "default": false,
                        "num": 32
                    },
                    "[64] Icon 6 active": {
                        "default": false,
                        "num": 64
                    },
                    "[128] Icon 7 active": {
                        "default": false,
                        "num": 128
                    },
                    "[256] Icon 8 active": {
                        "default": false,
                        "num": 256
                    },
                    "[512] Icon 9 active": {
                        "default": false,
                        "num": 512
                    }
                }
            },
            {
                "name": "Enabled",
                "key": "enabled",
                "type": "boolean",
                "default": "No",
                "desc": "Whether or not to start on"
            },
            {
                "name": "Level name",
                "key": "sign_levelname",
                "type": "string",
                "default": "",
                "desc": "Name of the puzzle to display above the main number"
            },
            {
                "name": "Default Startup Sequence",
                "key": "sign_startup_sequence",
                "type": "choices",
                "default": "Normal Flicker",
                "desc": "Name of the startup sequence to use",
                "choices": {
                    "Normal Flicker": "normal_flicker",
                    "Dirty Flicker": "dirty_flicker",
                    "Broken Flicker": "broken_flicker"
                }
            },
            {
                "name": "Current level number",
                "key": "sign_current",
                "type": "integer",
                "default": "",
                "desc": "Number of the level you are currently in"
            },
            {
                "name": "Total level number",
                "key": "sign_total",
                "type": "integer",
                "default": "",
                "desc": "Number of levels in the testing track"
            },
            {
                "name": "Dirt amount",
                "key": "sign_dirt",
                "type": "choices",
                "default": "Clean (-1)",
                "desc": "How dirty the sign should be",
                "choices": {
                    "Clean": "-1",
                    "Not very dirty": "0",
                    "A bit dirty": "1",
                    "Very dirty": "2"
                }
            },
            {
                "name": "Icon 0 Type",
                "key": "sign_icon0name",
                "type": "choices",
                "default": "Empty ()",
                "desc": "",
                "choices": {
                    "Empty": "",
                    "Cube Drop": "cube_drop",
                    "Cube Button": "cube_button",
                    "Cube Bonk": "cube_bonk",
                    "Drink Water": "drink_water",
                    "Goop": "goop",
                    "Crushers": "crushers",
                    "Laser Cube": "laser_cube",
                    "Laser Power": "laser_power",
                    "Turret": "turret",
                    "Turret Burn": "turret_burn",
                    "Portal Fling 1": "portal_fling",
                    "Portal Fling 2": "portal_fling_2",
                    "Plate Fling": "plate_fling",
                    "Bridges": "bridges",
                    "Bridge Block": "bridge_block",
                    "Grinders": "grinders",
                    "Tractor Beam": "tbeams",
                    "Tractor Beam Polarity": "tbeam_polarity",
                    "Paint Bounce": "paint_bounce",
                    "Paint Speed": "paint_speed",
                    "Coop Handoff": "handoff",
                    "Button Stand": "button_stand",
                    "Danger Field": "danger_field"
                }
            },
            {
                "name": "Icon 1 Type",
                "key": "sign_icon1name",
                "type": "choices",
                "default": "Empty ()",
                "desc": "",
                "choices": {
                    "Empty": "",
                    "Cube Drop": "cube_drop",
                    "Cube Button": "cube_button",
                    "Cube Bonk": "cube_bonk",
                    "Drink Water": "drink_water",
                    "Goop": "goop",
                    "Crushers": "crushers",
                    "Laser Cube": "laser_cube",
                    "Laser Power": "laser_power",
                    "Turret": "turret",
                    "Turret Burn": "turret_burn",
                    "Portal Fling 1": "portal_fling",
                    "Portal Fling 2": "portal_fling_2",
                    "Plate Fling": "plate_fling",
                    "Bridges": "bridges",
                    "Bridge Block": "bridge_block",
                    "Grinders": "grinders",
                    "Tractor Beam": "tbeams",
                    "Tractor Beam Polarity": "tbeam_polarity",
                    "Paint Bounce": "paint_bounce",
                    "Paint Speed": "paint_speed",
                    "Coop Handoff": "handoff",
                    "Button Stand": "button_stand",
                    "Danger Field": "danger_field"
                }
            },
            {
                "name": "Icon 2 Type",
                "key": "sign_icon2name",
                "type": "choices",
                "default": "Empty ()",
                "desc": "",
                "choices": {
                    "Empty": "",
                    "Cube Drop": "cube_drop",
                    "Cube Button": "cube_button",
                    "Cube Bonk": "cube_bonk",
                    "Drink Water": "drink_water",
                    "Goop": "goop",
                    "Crushers": "crushers",
                    "Laser Cube": "laser_cube",
                    "Laser Power": "laser_power",
                    "Turret": "turret",
                    "Turret Burn": "turret_burn",
                    "Portal Fling 1": "portal_fling",
                    "Portal Fling 2": "portal_fling_2",
                    "Plate Fling": "plate_fling",
                    "Bridges": "bridges",
                    "Bridge Block": "bridge_block",
                    "Grinders": "grinders",
                    "Tractor Beam": "tbeams",
                    "Tractor Beam Polarity": "tbeam_polarity",
                    "Paint Bounce": "paint_bounce",
                    "Paint Speed": "paint_speed",
                    "Coop Handoff": "handoff",
                    "Button Stand": "button_stand",
                    "Danger Field": "danger_field"
                }
            },
            {
                "name": "Icon 3 Type",
                "key": "sign_icon3name",
                "type": "choices",
                "default": "Empty ()",
                "desc": "",
                "choices": {
                    "Empty": "",
                    "Cube Drop": "cube_drop",
                    "Cube Button": "cube_button",
                    "Cube Bonk": "cube_bonk",
                    "Drink Water": "drink_water",
                    "Goop": "goop",
                    "Crushers": "crushers",
                    "Laser Cube": "laser_cube",
                    "Laser Power": "laser_power",
                    "Turret": "turret",
                    "Turret Burn": "turret_burn",
                    "Portal Fling 1": "portal_fling",
                    "Portal Fling 2": "portal_fling_2",
                    "Plate Fling": "plate_fling",
                    "Bridges": "bridges",
                    "Bridge Block": "bridge_block",
                    "Grinders": "grinders",
                    "Tractor Beam": "tbeams",
                    "Tractor Beam Polarity": "tbeam_polarity",
                    "Paint Bounce": "paint_bounce",
                    "Paint Speed": "paint_speed",
                    "Coop Handoff": "handoff",
                    "Button Stand": "button_stand",
                    "Danger Field": "danger_field"
                }
            },
            {
                "name": "Icon 4 Type",
                "key": "sign_icon4name",
                "type": "choices",
                "default": "Empty ()",
                "desc": "",
                "choices": {
                    "Empty": "",
                    "Cube Drop": "cube_drop",
                    "Cube Button": "cube_button",
                    "Cube Bonk": "cube_bonk",
                    "Drink Water": "drink_water",
                    "Goop": "goop",
                    "Crushers": "crushers",
                    "Laser Cube": "laser_cube",
                    "Laser Power": "laser_power",
                    "Turret": "turret",
                    "Turret Burn": "turret_burn",
                    "Portal Fling 1": "portal_fling",
                    "Portal Fling 2": "portal_fling_2",
                    "Plate Fling": "plate_fling",
                    "Bridges": "bridges",
                    "Bridge Block": "bridge_block",
                    "Grinders": "grinders",
                    "Tractor Beam": "tbeams",
                    "Tractor Beam Polarity": "tbeam_polarity",
                    "Paint Bounce": "paint_bounce",
                    "Paint Speed": "paint_speed",
                    "Coop Handoff": "handoff",
                    "Button Stand": "button_stand",
                    "Danger Field": "danger_field"
                }
            },
            {
                "name": "Icon 5 Type",
                "key": "sign_icon5name",
                "type": "choices",
                "default": "Empty ()",
                "desc": "",
                "choices": {
                    "Empty": "",
                    "Cube Drop": "cube_drop",
                    "Cube Button": "cube_button",
                    "Cube Bonk": "cube_bonk",
                    "Drink Water": "drink_water",
                    "Goop": "goop",
                    "Crushers": "crushers",
                    "Laser Cube": "laser_cube",
                    "Laser Power": "laser_power",
                    "Turret": "turret",
                    "Turret Burn": "turret_burn",
                    "Portal Fling 1": "portal_fling",
                    "Portal Fling 2": "portal_fling_2",
                    "Plate Fling": "plate_fling",
                    "Bridges": "bridges",
                    "Bridge Block": "bridge_block",
                    "Grinders": "grinders",
                    "Tractor Beam": "tbeams",
                    "Tractor Beam Polarity": "tbeam_polarity",
                    "Paint Bounce": "paint_bounce",
                    "Paint Speed": "paint_speed",
                    "Coop Handoff": "handoff",
                    "Button Stand": "button_stand",
                    "Danger Field": "danger_field"
                }
            },
            {
                "name": "Icon 6 Type",
                "key": "sign_icon6name",
                "type": "choices",
                "default": "Empty ()",
                "desc": "",
                "choices": {
                    "Empty": "",
                    "Cube Drop": "cube_drop",
                    "Cube Button": "cube_button",
                    "Cube Bonk": "cube_bonk",
                    "Drink Water": "drink_water",
                    "Goop": "goop",
                    "Crushers": "crushers",
                    "Laser Cube": "laser_cube",
                    "Laser Power": "laser_power",
                    "Turret": "turret",
                    "Turret Burn": "turret_burn",
                    "Portal Fling 1": "portal_fling",
                    "Portal Fling 2": "portal_fling_2",
                    "Plate Fling": "plate_fling",
                    "Bridges": "bridges",
                    "Bridge Block": "bridge_block",
                    "Grinders": "grinders",
                    "Tractor Beam": "tbeams",
                    "Tractor Beam Polarity": "tbeam_polarity",
                    "Paint Bounce": "paint_bounce",
                    "Paint Speed": "paint_speed",
                    "Coop Handoff": "handoff",
                    "Button Stand": "button_stand",
                    "Danger Field": "danger_field"
                }
            },
            {
                "name": "Icon 7 Type",
                "key": "sign_icon7name",
                "type": "choices",
                "default": "Empty ()",
                "desc": "",
                "choices": {
                    "Empty": "",
                    "Cube Drop": "cube_drop",
                    "Cube Button": "cube_button",
                    "Cube Bonk": "cube_bonk",
                    "Drink Water": "drink_water",
                    "Goop": "goop",
                    "Crushers": "crushers",
                    "Laser Cube": "laser_cube",
                    "Laser Power": "laser_power",
                    "Turret": "turret",
                    "Turret Burn": "turret_burn",
                    "Portal Fling 1": "portal_fling",
                    "Portal Fling 2": "portal_fling_2",
                    "Plate Fling": "plate_fling",
                    "Bridges": "bridges",
                    "Bridge Block": "bridge_block",
                    "Grinders": "grinders",
                    "Tractor Beam": "tbeams",
                    "Tractor Beam Polarity": "tbeam_polarity",
                    "Paint Bounce": "paint_bounce",
                    "Paint Speed": "paint_speed",
                    "Coop Handoff": "handoff",
                    "Button Stand": "button_stand",
                    "Danger Field": "danger_field"
                }
            },
            {
                "name": "Icon 8 Type",
                "key": "sign_icon8name",
                "type": "choices",
                "default": "Empty ()",
                "desc": "",
                "choices": {
                    "Empty": "",
                    "Cube Drop": "cube_drop",
                    "Cube Button": "cube_button",
                    "Cube Bonk": "cube_bonk",
                    "Drink Water": "drink_water",
                    "Goop": "goop",
                    "Crushers": "crushers",
                    "Laser Cube": "laser_cube",
                    "Laser Power": "laser_power",
                    "Turret": "turret",
                    "Turret Burn": "turret_burn",
                    "Portal Fling 1": "portal_fling",
                    "Portal Fling 2": "portal_fling_2",
                    "Plate Fling": "plate_fling",
                    "Bridges": "bridges",
                    "Bridge Block": "bridge_block",
                    "Grinders": "grinders",
                    "Tractor Beam": "tbeams",
                    "Tractor Beam Polarity": "tbeam_polarity",
                    "Paint Bounce": "paint_bounce",
                    "Paint Speed": "paint_speed",
                    "Coop Handoff": "handoff",
                    "Button Stand": "button_stand",
                    "Danger Field": "danger_field"
                }
            },
            {
                "name": "Icon 9 Type",
                "key": "sign_icon9name",
                "type": "choices",
                "default": "Empty ()",
                "desc": "",
                "choices": {
                    "Empty": "",
                    "Cube Drop": "cube_drop",
                    "Cube Button": "cube_button",
                    "Cube Bonk": "cube_bonk",
                    "Drink Water": "drink_water",
                    "Goop": "goop",
                    "Crushers": "crushers",
                    "Laser Cube": "laser_cube",
                    "Laser Power": "laser_power",
                    "Turret": "turret",
                    "Turret Burn": "turret_burn",
                    "Portal Fling 1": "portal_fling",
                    "Portal Fling 2": "portal_fling_2",
                    "Plate Fling": "plate_fling",
                    "Bridges": "bridges",
                    "Bridge Block": "bridge_block",
                    "Grinders": "grinders",
                    "Tractor Beam": "tbeams",
                    "Tractor Beam Polarity": "tbeam_polarity",
                    "Paint Bounce": "paint_bounce",
                    "Paint Speed": "paint_speed",
                    "Coop Handoff": "handoff",
                    "Button Stand": "button_stand",
                    "Danger Field": "danger_field"
                }
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "string",
                "desc": "Turns the sign on. You can optionally set the startup sequence as the parameter. (normal_flicker, dirty_flicker, broken_flicker)"
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Turns the sign off."
            },
            {
                "name": "SetCurrentLevel",
                "type": "integer",
                "desc": "Sets the current level number."
            },
            {
                "name": "SetTotalLevel",
                "type": "integer",
                "desc": "Sets the total level number."
            },
            {
                "name": "SetLevelName",
                "type": "string",
                "desc": "Sets the name of the level to show."
            },
            {
                "name": "SetDirt",
                "type": "integer",
                "desc": "Sets the amount of dirt."
            },
            {
                "name": "SetIconActive",
                "type": "integer",
                "desc": "Turns the specified icon on"
            },
            {
                "name": "SetIconInactive",
                "type": "integer",
                "desc": "Turns the specified icon off"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_tic_tac_toe_panel",
        "desc": "Unknown use, likely for some kind of ping detector.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": [
            {
                "name": "OnPlayer1Pinged",
                "type": "void",
                "desc": "Fired if pinged by Player 1."
            },
            {
                "name": "OnPlayer2Pinged",
                "type": "void",
                "desc": "Fired if pinged by Player 2."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "rocket_turret_projectile",
        "desc": "The rocket the Rocket Sentry fires.",
        "bases": [
            "BaseEntityPoint",
            "ResponseContext",
            "ToggleDraw"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "RemovePaint",
                "type": "void",
                "desc": "Cleans the rocket?"
            }
        ],
        "outputs": [
            {
                "name": "OnIgnite",
                "type": "void",
                "desc": "On fire?"
            },
            {
                "name": "OnFizzled",
                "type": "void",
                "desc": "The rocket has been fizzled."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "scripted_sentence",
        "desc": "Scripted Sentence",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Fire Once": {
                        "default": true,
                        "num": 1
                    },
                    "[2] Followers Only": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Interrupt Speech": {
                        "default": true,
                        "num": 4
                    },
                    "[8] Concurrent": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Speak to Activator": {
                        "default": true,
                        "num": 16
                    }
                }
            },
            {
                "name": "Sentence Name",
                "key": "sentence",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Speaker Type",
                "key": "entity",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Additional Sentence Time",
                "key": "delay",
                "type": "string",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Search Radius",
                "key": "radius",
                "type": "integer",
                "default": "512",
                "desc": ""
            },
            {
                "name": "Delay Before Refire",
                "key": "refire",
                "type": "string",
                "default": "3",
                "desc": ""
            },
            {
                "name": "Listener Type",
                "key": "listener",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Volume 0-10",
                "key": "volume",
                "type": "string",
                "default": "10",
                "desc": ""
            },
            {
                "name": "Sound Radius",
                "key": "attenuation",
                "type": "choices",
                "default": "Small Radius (0)",
                "desc": "",
                "choices": {
                    "Small Radius": "0",
                    "Medium Radius": "1",
                    "Large  Radius": "2",
                    "Play Everywhere": "3"
                }
            }
        ],
        "inputs": [
            {
                "name": "BeginSentence",
                "type": "void",
                "desc": "Starts the scripted sentence."
            }
        ],
        "outputs": [
            {
                "name": "OnBeginSentence",
                "type": "void",
                "desc": "Fires when the sentence begins"
            },
            {
                "name": "OnEndSentence",
                "type": "void",
                "desc": "Fires when the sentence ends"
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "scripted_sequence",
        "desc": "Grabs an NPC and makes them play a specified set of animations. The NPC can be told to move to the scripted sequence position or can be told to play the script wherever they currently are. Multiple scripted sequences of the same name will frame-synchronize in the action animation once all the actors have moved to position. This allows tight interaction between actors (one actor grabbing another, hitting them, etc.) The flow is as follows:\n\n1) Move to position using the specified movement animation. If 'Move to Position' is set to NONE, skip to step 2.\n2) If forced to wait for another actor to move to position, play the pre-action idle animation, otherwise skip to step 3. If there is no pre-action idle specified, ACT_IDLE is used.\n3) Fire the OnBeginSequence output.\n4) Play the action animation. If no action animation is specified, skip to step 5.\n5) Play the post-action idle animation. If none is specified, skip to step 6. If the 'Loop in Post Idle' spawnflag is set, keep playing the post-action idle until the script is cancelled. If no post-action idle animation is specified, ACT_IDLE is used.\n6) Fire the OnEndSequence output.\n7) If a next script to play is specified, hand the NPC to the next script and repeat this process for that script.\n\nThe MoveToPosition input runs steps 1 and 2, then waits while playing the pre-action idle animation until the BeginSequence input is received.\n\nIf the sequence has motion extraction in it, set the 'Don't Teleport NPC On End' spawnflag.",
        "bases": [
            "BaseEntityPoint",
            "SystemLevelChoice"
        ],
        "keyvalues": [
            {
                "name": "Target NPC",
                "key": "m_iszentity",
                "type": "target_destination",
                "default": "",
                "desc": "The name or class name (such as 'npc_zombie') of an NPC to use for this script."
            },
            {
                "name": "Pre Action Idle Animation",
                "key": "m_iszidle",
                "type": "string",
                "default": "",
                "desc": "The name of the sequence (such as 'idle01') or activity (such as 'ACT_IDLE') to play before the action animation if the NPC must wait for the script to be triggered. Use 'Start on Spawn' flag or MoveToPosition input to play this idle animation."
            },
            {
                "name": "Entry Animation",
                "key": "m_iszentry",
                "type": "string",
                "default": "",
                "desc": "The name of the sequence (such as 'reload02') or activity (such as 'ACT_RELOAD') to play when the sequence starts, before transitioning to play the main action sequence."
            },
            {
                "name": "Action Animation",
                "key": "m_iszplay",
                "type": "string",
                "default": "",
                "desc": "The name of the main sequence (such as 'reload02') or activity (such as 'ACT_RELOAD') to play."
            },
            {
                "name": "Post Action Idle Animation",
                "key": "m_iszpostidle",
                "type": "string",
                "default": "",
                "desc": "The name of the sequence (such as 'idle01') or activity (such as 'ACT_IDLE') to play after the action animation. If the ''Loop in Post Idle'' spawnflag is not ticked, this will act as an Exit Animation, similar to the Entry Animation."
            },
            {
                "name": "Custom Move Animation",
                "key": "m_iszcustommove",
                "type": "string",
                "default": "",
                "desc": "Used in conjunction with the 'Custom movement' setting for the 'Move to Position' property, specifies the sequence (such as 'crouch_run01') or activity (such as 'ACT_RUN') to use while moving to the scripted position."
            },
            {
                "name": "Loop Action Animation?",
                "key": "m_bloopactionsequence",
                "type": "boolean",
                "default": "No",
                "desc": "Loops the action animation until the sequence is cancelled or interrupted."
            },
            {
                "name": "Synch Post Idles?",
                "key": "m_bsynchpostidles",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Search Radius (0=everywhere)",
                "key": "m_flradius",
                "type": "integer",
                "default": "0",
                "desc": "Radius to search within for an NPC to use. 0 searches everywhere."
            },
            {
                "name": "Repeat Rate ms",
                "key": "m_flrepeat",
                "type": "integer",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Move to Position",
                "key": "m_fmoveto",
                "type": "choices",
                "default": "Walk (1)",
                "desc": "",
                "choices": {
                    "No": "0",
                    "Walk": "1",
                    "Run": "2",
                    "Custom movement": "3",
                    "Instantaneous": "4",
                    "No - Turn to Face": "5"
                }
            },
            {
                "name": "On player death",
                "key": "onplayerdeath",
                "type": "choices",
                "default": "Do Nothing (0)",
                "desc": "What should this entity do if the player dies",
                "choices": {
                    "Do Nothing": "0",
                    "Cancel Script and return to AI": "1"
                }
            },
            {
                "name": "Next Script",
                "key": "m_isznextscript",
                "type": "target_destination",
                "default": "",
                "desc": "The name of the script to run immediately after this script completes. The NPC will not return to AI between the two scripts."
            },
            {
                "name": "Ignore Gravity on NPC during script",
                "key": "m_bignoregravity",
                "type": "boolean",
                "default": "No",
                "desc": "If this is set to 'Yes', the NPC will not be subject to gravity while playing this script."
            },
            {
                "name": "Disable NPC collisions during script",
                "key": "m_bdisablenpccollisions",
                "type": "boolean",
                "default": "No",
                "desc": "Useful for when NPCs playing scripts must interpenetrate while riding on trains, elevators, etc. This only disables collisions between the NPCs in the script and must be enabled on BOTH scripted_sequences."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[4] Repeatable": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Leave Corpse": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Start on Spawn": {
                        "default": false,
                        "num": 16
                    },
                    "[32] No Interruptions": {
                        "default": false,
                        "num": 32
                    },
                    "[64] Override AI": {
                        "default": false,
                        "num": 64
                    },
                    "[128] Don't Teleport NPC On End": {
                        "default": false,
                        "num": 128
                    },
                    "[256] Loop in Post Idle": {
                        "default": false,
                        "num": 256
                    },
                    "[512] Priority Script": {
                        "default": false,
                        "num": 512
                    },
                    "[1024] Search Cyclically": {
                        "default": false,
                        "num": 1024
                    },
                    "[2048] Don't Complain": {
                        "default": false,
                        "num": 2048
                    },
                    "[4096] Allow actor death without stopping scene": {
                        "default": false,
                        "num": 4096
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "BeginSequence",
                "type": "void",
                "desc": "Summons an NPC to act out the scripted sequence."
            },
            {
                "name": "MoveToPosition",
                "type": "void",
                "desc": "Summons an NPC to the script location. They will play their scripted idle (or ACT_IDLE if none is specified) until BeginSequence is triggered."
            },
            {
                "name": "CancelSequence",
                "type": "void",
                "desc": "Stops the scripted sequence. If fired after a sequence starts, this input will not take effect until the NPC finishes playing the scripted action animation."
            }
        ],
        "outputs": [
            {
                "name": "OnBeginSequence",
                "type": "void",
                "desc": "Fires when the action animation begins playing."
            },
            {
                "name": "OnEndSequence",
                "type": "void",
                "desc": "Fires when the action animation completes."
            },
            {
                "name": "OnCancelSequence",
                "type": "void",
                "desc": "Fires when the sequence is cancelled."
            },
            {
                "name": "OnCancelFailedSequence",
                "type": "void",
                "desc": "Fires when the sequence is cancelled without ever playing (OnCancelSequence will also fire)."
            },
            {
                "name": "OnScriptEvent01",
                "type": "void",
                "desc": "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 1 } in the QC."
            },
            {
                "name": "OnScriptEvent02",
                "type": "void",
                "desc": "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 2 } in the QC."
            },
            {
                "name": "OnScriptEvent03",
                "type": "void",
                "desc": "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 3 } in the QC."
            },
            {
                "name": "OnScriptEvent04",
                "type": "void",
                "desc": "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 4 } in the QC."
            },
            {
                "name": "OnScriptEvent05",
                "type": "void",
                "desc": "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 5 } in the QC."
            },
            {
                "name": "OnScriptEvent06",
                "type": "void",
                "desc": "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 6 } in the QC."
            },
            {
                "name": "OnScriptEvent07",
                "type": "void",
                "desc": "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 7 } in the QC."
            },
            {
                "name": "OnScriptEvent08",
                "type": "void",
                "desc": "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 8 } in the QC."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "scripted_target",
        "desc": "Scripted Target",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Start Disabled",
                "key": "startdisabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Target NPC",
                "key": "m_iszentity",
                "type": "npcclass",
                "default": "",
                "desc": ""
            },
            {
                "name": "Search Radius (0=everywhere)",
                "key": "m_flradius",
                "type": "integer",
                "default": "0",
                "desc": "Radius to search within for an NPC to use. 0 searches everywhere."
            },
            {
                "name": "Move Speed",
                "key": "movespeed",
                "type": "integer",
                "default": "5",
                "desc": ""
            },
            {
                "name": "Pause Duration",
                "key": "pauseduration",
                "type": "integer",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Effect Duration",
                "key": "effectduration",
                "type": "integer",
                "default": "2",
                "desc": ""
            },
            {
                "name": "Next Target",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable this entity"
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable this entity"
            }
        ],
        "outputs": [
            {
                "name": "AtTarget",
                "type": "void",
                "desc": "Fires when NPC reaches this target"
            },
            {
                "name": "LeaveTarget",
                "type": "void",
                "desc": "Fires when NPC leaves this target"
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "shadow_control",
        "desc": "An entity to control the shadows in the map.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Pitch Yaw Roll (Y Z X)",
                "key": "angles",
                "type": "angle",
                "default": "80 30 0",
                "desc": "This is the shadow direction. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, and roll is the rotation around the X axis."
            },
            {
                "name": "Shadow Color",
                "key": "color",
                "type": "color255",
                "default": "128 128 128",
                "desc": "This is the color of the shadows."
            },
            {
                "name": "Maximum Distance",
                "key": "distance",
                "type": "float",
                "default": "75",
                "desc": "This is the maximum distance the shadow is allowed to cast, in Source units."
            },
            {
                "name": "All Shadows Disabled",
                "key": "disableallshadows",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Enable Local Light Shadows",
                "key": "enableshadowsfromlocallights",
                "type": "boolean",
                "default": "No",
                "desc": "Enables RTT dynamic shadow angles, which cause shadows to face away from the nearest light source instead of always using this entity's direction. This is a new feature and the original Half-Life 2 had no dynamic shadow angles. Leave this off if they are not desired."
            }
        ],
        "inputs": [
            {
                "name": "color",
                "type": "color255",
                "desc": "Set the shadow color."
            },
            {
                "name": "direction",
                "type": "vector",
                "desc": "Set the shadow direction."
            },
            {
                "name": "SetDistance",
                "type": "float",
                "desc": "Set the maximum shadow cast distance."
            },
            {
                "name": "SetAngles",
                "type": "string",
                "desc": "Set the shadow direction."
            },
            {
                "name": "SetShadowsDisabled",
                "type": "integer",
                "desc": "Set shadows disabled state."
            },
            {
                "name": "SetShadowsFromLocalLightsEnabled",
                "type": "integer",
                "desc": "Set local light shadows enabled state."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "sky_camera",
        "desc": "An entity used to control the 3D Skybox. Its origin is used to determine the 3D Skybox's position relative to the map. Place this entity, in the 3D Skybox, at the point where the origin of the map should be.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Parent",
                "key": "parentname",
                "type": "target_destination",
                "default": "",
                "desc": "The name of the entity to move with. NOTE: sky_camera's position is normally only updated on spawn. Fire the ForceUpdate or StartUpdating inputs to update the sky_camera's position! You might also want to enable Use Angles for Sky."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Master (takes priority if multiple sky_cameras exist)": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Continuously update position (for moving sky_cameras)": {
                        "default": false,
                        "num": 2
                    }
                }
            },
            {
                "name": "Sky Color",
                "key": "skycolor",
                "type": "color255",
                "default": "255 255 255 0",
                "desc": "Causes the skybox to use a solid color instead of the sky texture specified in worldspawn. Blended alpha is unfortunately not supported, but an alpha of '0' disables the effect and any alpha greater than that (e.g. 255) enables the effect."
            },
            {
                "name": "3D Skybox scale",
                "key": "scale",
                "type": "integer",
                "default": "16",
                "desc": "Scale of the skybox."
            },
            {
                "name": "Fog Enable",
                "key": "fogenable",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Fog Blend",
                "key": "fogblend",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Use Angles for Fog Dir",
                "key": "use_angles",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Use Angles for Sky",
                "key": "use_angles_for_sky",
                "type": "boolean",
                "default": "No",
                "desc": "Uses angles for actual skybox rotation, as if the world were tilted on this entity's axis."
            },
            {
                "name": "Primary Fog Color",
                "key": "fogcolor",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "Secondary Fog Color",
                "key": "fogcolor2",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "Primary Fog Direction",
                "key": "fogdir",
                "type": "string",
                "default": "1 0 0",
                "desc": ""
            },
            {
                "name": "Fog Start",
                "key": "fogstart",
                "type": "float",
                "default": "500",
                "desc": "Distance at which the skybox fog should start."
            },
            {
                "name": "Fog End",
                "key": "fogend",
                "type": "float",
                "default": "2000",
                "desc": "Distance at which the skybox fog should be fully opaque."
            },
            {
                "name": "Fog Max Density [0..1]",
                "key": "fogmaxdensity",
                "type": "float",
                "default": "1",
                "desc": ""
            },
            {
                "name": "HDR color scale.",
                "key": "hdrcolorscale",
                "type": "float",
                "default": "1",
                "desc": "float value to multiply fog color by when running in HDR mode."
            }
        ],
        "inputs": [
            {
                "name": "ForceUpdate",
                "type": "void",
                "desc": "Forces the 3D skybox to update with this sky_camera's position."
            },
            {
                "name": "StartUpdating",
                "type": "void",
                "desc": "Begins per-tick skybox updating, which is needed if you want this sky_camera to move."
            },
            {
                "name": "StopUpdating",
                "type": "void",
                "desc": "Ends per-tick skybox updating if it was enabled before."
            },
            {
                "name": "ActivateSkybox",
                "type": "void",
                "desc": "Make this skybox the active one."
            },
            {
                "name": "DeactivateSkybox",
                "type": "void",
                "desc": "Stops making this sky_camera the active skybox if it is currently the active skybox, which causes the sky to clear."
            },
            {
                "name": "SetFogStartDist",
                "type": "float",
                "desc": "Sets the fog start distance."
            },
            {
                "name": "SetFogEndDist",
                "type": "float",
                "desc": "Sets the fog end distance."
            },
            {
                "name": "TurnOnFog",
                "type": "void",
                "desc": "Turns the fog on."
            },
            {
                "name": "TurnOffFog",
                "type": "void",
                "desc": "Turns the fog off."
            },
            {
                "name": "SetFogColor",
                "type": "color255",
                "desc": "Sets the primary fog color."
            },
            {
                "name": "SetFogColorSecondary",
                "type": "color255",
                "desc": "Sets the secondary fog color."
            },
            {
                "name": "SetFarZ",
                "type": "integer",
                "desc": "Sets the far clip plane distance."
            },
            {
                "name": "SetFogMaxDensity",
                "type": "float",
                "desc": "0 to 1, set the fog's max density"
            },
            {
                "name": "SetSkyColor",
                "type": "color255",
                "desc": "Sets the sky color."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "skybox_swapper",
        "desc": "An entity that precaches skybox materials and swaps them on trigger.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Skybox Material Name",
                "key": "skyboxname",
                "type": "string",
                "default": "sky_dust",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "Trigger",
                "type": "void",
                "desc": "Swap to this skybox."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "spark_shower",
        "desc": "Temporary spark shower effect created by env_explosions.When spawned, moves in the forward direction whilst producing sparks, until it fades out.",
        "bases": [
            "BaseEntityPoint",
            "Angles"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "sunlight_shadow_control",
        "desc": "An entity to control the sunlight that casts shadows in the map.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Pitch Yaw Roll (Y Z X)",
                "key": "angles",
                "type": "angle",
                "default": "50 40 0",
                "desc": "This is the light cast direction. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, and roll is the rotation around the X axis."
            },
            {
                "name": "Light Color",
                "key": "color",
                "type": "color255",
                "default": "255 255 255 1",
                "desc": "This is the color of the sunlight."
            },
            {
                "name": "Color Transition Time",
                "key": "colortransitiontime",
                "type": "float",
                "default": "0.5",
                "desc": "This is the number of seconds it takes to get from 0 to 255."
            },
            {
                "name": "Distance",
                "key": "distance",
                "type": "float",
                "default": "10000",
                "desc": "This is the distance of the sun, greater distances produce more orthogonal shadows."
            },
            {
                "name": "FOV",
                "key": "fov",
                "type": "float",
                "default": "5",
                "desc": "This is the field of view that the sunlight casts in. Use lower values for more distant sun and sharper shadows."
            },
            {
                "name": "NearZ Distance",
                "key": "nearz",
                "type": "float",
                "default": "512",
                "desc": "This controls the near clipping plane's distance from the player."
            },
            {
                "name": "North Offset",
                "key": "northoffset",
                "type": "float",
                "default": "200",
                "desc": "This offsets the from the player position where the sun is attached."
            },
            {
                "name": "Texture Name",
                "key": "texturename",
                "type": "material",
                "default": "effects/flashlight001",
                "desc": ""
            },
            {
                "name": "Enable Shadows",
                "key": "enableshadows",
                "type": "boolean",
                "default": "No",
                "desc": "Enables/disables shadows from this projected texture."
            }
        ],
        "inputs": [
            {
                "name": "LightColor",
                "type": "color255",
                "desc": "Set the light color."
            },
            {
                "name": "SetAngles",
                "type": "string",
                "desc": "Set the sun direction."
            },
            {
                "name": "SetDistance",
                "type": "float",
                "desc": "Set the distance of the sun."
            },
            {
                "name": "SetFOV",
                "type": "float",
                "desc": "Set the field of view the sun casts."
            },
            {
                "name": "SetNearZDistance",
                "type": "float",
                "desc": "Set the near z distance."
            },
            {
                "name": "SetNorthOffset",
                "type": "float",
                "desc": "Sets the north offset."
            },
            {
                "name": "SetTexture",
                "type": "string",
                "desc": "Set the texture cookie of the sunlight."
            },
            {
                "name": "EnableShadows",
                "type": "boolean",
                "desc": "Set the if shadows are enabled"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "tanktrain_ai",
        "desc": "Tank movement AI. This takes control of a func_tracktrain, moving it to follow a target.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Train Name",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The func_tracktrain to control."
            },
            {
                "name": "Start Moving Sound",
                "key": "startsound",
                "type": "sound",
                "default": "vehicles/diesel_start1.wav",
                "desc": ""
            },
            {
                "name": "Engine Loop Sound",
                "key": "enginesound",
                "type": "sound",
                "default": "vehicles/diesel_turbo_loop1.wav",
                "desc": ""
            },
            {
                "name": "Vehicle Movement Sound",
                "key": "movementsound",
                "type": "sound",
                "default": "vehicles/tank_treads_loop1.wav",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "TargetEntity",
                "type": "string",
                "desc": "Change the tank to target the specified entity."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "tanktrain_aitarget",
        "desc": "An entity that changes the target of a func_tank or tanktrain_ai entity. This simply fires TargetEntity on the tank when this is USEd.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Tank AI Entity",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The tanktrain_ai entity to change the target of."
            },
            {
                "name": "New Target Entity",
                "key": "newtarget",
                "type": "target_destination",
                "default": "",
                "desc": "The entity to tell the tanktrain_ai to target."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "target_changegravity",
        "desc": "Changes the gravity of the player who activates this entity.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Gravity",
                "key": "gravity",
                "type": "integer",
                "default": "1",
                "desc": "Gravity."
            }
        ],
        "inputs": [
            {
                "name": "ChangeGrav",
                "type": "void",
                "desc": "Change the activator's gravity."
            },
            {
                "name": "ResetGrav",
                "type": "void",
                "desc": "Reset the activator's gravity."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "test_sidelist",
        "desc": "Test entity for Ken!",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Sides",
                "key": "sides",
                "type": "sidelist",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "test_traceline",
        "desc": "A debugging tool for testing tracelines. Pretty much useless for other people. This spins wildly, tracing lines to the closest brush.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_brush",
        "desc": "A trigger volume that can be used, and can relay touches to its parent.",
        "bases": [
            "BaseEntityBrush",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Ignore Players": {
                        "default": true,
                        "num": 1
                    },
                    "[2] Ignore NPCs": {
                        "default": true,
                        "num": 2
                    },
                    "[4] Ignore func_pushable": {
                        "default": true,
                        "num": 4
                    },
                    "[8] Ignore touches": {
                        "default": true,
                        "num": 8
                    },
                    "[16] Ignore +USE": {
                        "default": true,
                        "num": 16
                    }
                }
            },
            {
                "name": "Input Flags",
                "key": "inputfilter",
                "type": "integer",
                "default": "0",
                "desc": "Filters what kind of entities can interact with this. Set this in spawnflags instead."
            },
            {
                "name": "Proxy To Parent",
                "key": "dontmessageparent",
                "type": "choices",
                "default": "Yes (0)",
                "desc": "Relay touching or USEing this entity to the parent entity. The input filters will still apply.",
                "choices": {
                    "No": "1",
                    "Yes": "0"
                }
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnStartTouch",
                "type": "void",
                "desc": "Fired when something touches us."
            },
            {
                "name": "OnEndTouch",
                "type": "void",
                "desc": "Fired when something stops touching us."
            },
            {
                "name": "OnUse",
                "type": "void",
                "desc": "Fired when the player (or I/O) USEs us."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "vgui_level_placard_display",
        "desc": "Pre-level display placard entity.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "vgui_movie_display",
        "desc": "Movie Display",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Start enabled",
                "key": "startenabled",
                "type": "boolean",
                "default": "No",
                "desc": "Whether or not the video should start enabled."
            },
            {
                "name": "Start paused",
                "key": "startpaused",
                "type": "boolean",
                "default": "No",
                "desc": "Whether or not the video should start paused."
            },
            {
                "name": "Display Text",
                "key": "displaytext",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Movie to display",
                "key": "moviefilename",
                "type": "choices",
                "default": "Aperture Logo (media/aperture_logo.webm)",
                "desc": "The movie to display. You can also type in the filename of a custom movie here.",
                "choices": {
                    "Black Screen": "media/coop_black_screen.webm",
                    "Aperture Logo": "media/aperture_logo.webm",
                    "Animal King": "media/animalking.webm",
                    "Aperture Appear (Horizontal)": "media/aperture_appear_horiz.webm",
                    "Aperture Appear (Vertical)": "media/aperture_appear_vert.webm",
                    "Blue Screen Of Death": "media/bluescreen.webm",
                    "Evacuation Training (Horizontal)": "media/exercises_horiz.webm",
                    "Evacuation Training (Vertical)": "media/exercises_vert.webm",
                    "Aerial Faith Plate": "media/faithplate.webm",
                    "Emancipation Grid": "media/fizzler.webm",
                    "Light Bridge": "media/hard_light.webm",
                    "Laser Danger (Horizontal)": "media/laser_danger_horiz.webm",
                    "Laser Danger (Vertical)": "media/laser_danger_vert.webm",
                    "Laser Through Portal": "media/laser_portal.webm",
                    "Please Remain Calm (Horizontal)": "media/plc_blue_horiz.webm",
                    "Please Remain Calm (Vertical)": "media/plc_blue_vert.webm",
                    "Turret Case Options": "media/turret_colours_type.webm",
                    "Turret Drop In": "media/turret_dropin.webm",
                    "Exploded Turret": "media/turret_exploded_grey.webm",
                    "Menu Background: Act 1": "media/menu_act01.webm",
                    "Menu Background: Act 2": "media/menu_act02.webm",
                    "Menu Background: Act 3": "media/menu_act03.webm",
                    "Menu Background: Act 4": "media/menu_act04.webm",
                    "Menu Background: Act 5": "media/menu_act05.webm",
                    "SP Ending": "media/sp_30_a4_finale5.webm",
                    "Want You Gone Background": "media/sp_credits_bg.webm",
                    "Space": "media/sp_a5_credits.webm",
                    "Space Wheatley": "media/sp_ending_callback.webm",
                    "ATLAS Schematic": "media/coop_bluebot_load.webm",
                    "P-Body Schematic": "media/coop_orangebot_load.webm",
                    "Conveyor Bots": "media/coop_bots_load.webm",
                    "Waving Bots": "media/coop_bots_load_wave.webm",
                    "Coop Intro": "media/coop_intro.webm",
                    "Coop Outro": "media/coop_outro.webm",
                    "Coop Disc: Blueprints": "media/coop_bts_blueprints.webm",
                    "Coop Disc: Power Grid 1": "media/coop_bts_powergrid_01.webm",
                    "Coop Disc: Power Grid 2": "media/coop_bts_powergrid_02.webm",
                    "Coop Disc: Radar 1": "media/coop_bts_radar_01.webm",
                    "Coop Disc: Radar 2": "media/coop_bts_radar_02.webm",
                    "Coop Disc: Security 1": "media/coop_bts_security_01.webm",
                    "Coop Disc: Security 2": "media/coop_bts_security_02.webm",
                    "Coop Disc: Unused Radar": "media/coop_bts_radar.webm",
                    "Coop Disc: Unused Security": "media/coop_bts_security.webm",
                    "Insert Disc": "media/insert_disc.webm",
                    "Art Therapy Outro": "media/dlc1_endmovie.webm",
                    "Community Maps Background": "media/community_bg1.webm",
                    "Community Maps Intro": "media/intro_movie.webm",
                    "Extras: Coop Trailer": "media/attract01.webm",
                    "Extras: SP Trailer": "media/attract02.webm",
                    "Extras: Long Fall Boots": "media/attrct_boots.webm",
                    "Extras: Bot Trust": "media/attract_bot_trust.webm",
                    "Extras: Panels": "media/attract_panels.webm",
                    "Extras: Turrets": "media/attract_turrets.webm"
                }
            },
            {
                "name": "Group Name",
                "key": "groupname",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Loop Movie",
                "key": "looping",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Panel Width in World (Green)",
                "key": "width",
                "type": "integer",
                "default": "256",
                "desc": "Width of the panel in units."
            },
            {
                "name": "Panel Height in World (Blue)",
                "key": "height",
                "type": "integer",
                "default": "128",
                "desc": "Height of the panel in units."
            },
            {
                "name": "Stretch to Fill",
                "key": "stretch",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Forced slave",
                "key": "forcedslave",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Force precache",
                "key": "forceprecache",
                "type": "boolean",
                "default": "No",
                "desc": "Precache the movie referred to by Movie Filename on entity spawn."
            },
            {
                "name": "Disable Scanline Overlay",
                "key": "noscanline",
                "type": "boolean",
                "default": "No",
                "desc": "Disables the default scanline overlay."
            },
            {
                "name": "Use Custom UVs",
                "key": "custom_uv",
                "type": "boolean",
                "default": "No",
                "desc": "Enables custom uv coordinates to be used."
            },
            {
                "name": "U Min",
                "key": "u_min",
                "type": "float",
                "default": "0",
                "desc": "U Min (Left) Coordinate (0-1). Needs Custom UVs to be enabled!"
            },
            {
                "name": "U Max",
                "key": "u_max",
                "type": "float",
                "default": "0",
                "desc": "U Max (Right) Coordinate (0-1). Needs Custom UVs to be enabled!"
            },
            {
                "name": "V Min",
                "key": "v_min",
                "type": "float",
                "default": "1",
                "desc": "V Min (Top) Coordinate (0-1). Needs Custom UVs to be enabled!"
            },
            {
                "name": "V Max",
                "key": "v_max",
                "type": "float",
                "default": "1",
                "desc": "V Max (Bottom) Coordinate (0-1). Needs Custom UVs to be enabled!"
            },
            {
                "name": "Audio Volume",
                "key": "volume",
                "type": "integer",
                "default": "0",
                "desc": "Audio volume to use for video playback. 0-10"
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Make movie visible."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Make movie invisible."
            },
            {
                "name": "Pause",
                "type": "void",
                "desc": "Pauses the video playback."
            },
            {
                "name": "Resume",
                "type": "void",
                "desc": "Resumes the video playback."
            },
            {
                "name": "SetPaused",
                "type": "boolean",
                "desc": "Sets the playback state using the parameter."
            },
            {
                "name": "SetDisplayText",
                "type": "string",
                "desc": "Sets the display text."
            },
            {
                "name": "SetMovie",
                "type": "string",
                "desc": "Sets the movie to display."
            },
            {
                "name": "SetUseCustomUVs",
                "type": "boolean",
                "desc": "Use custom UVs."
            },
            {
                "name": "TakeOverAsMaster",
                "type": "void",
                "desc": "Start using this video as the master of it's group."
            },
            {
                "name": "SetUMin",
                "type": "float",
                "desc": "Set the minimum U."
            },
            {
                "name": "SetUMax",
                "type": "float",
                "desc": "Set the maximum U."
            },
            {
                "name": "SetVMin",
                "type": "float",
                "desc": "Set the minimum V."
            },
            {
                "name": "SetVMax",
                "type": "float",
                "desc": "Set the maximum V."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "vgui_mp_lobby_display",
        "desc": "VGUI entity to display Coop levels in the Hub.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "vgui_neurotoxin_countdown",
        "desc": "Neurotoxin Countdown display. AddOutput can be used to change/reset timer countdown.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Panel width",
                "key": "width",
                "type": "integer",
                "default": "256",
                "desc": "Width of the screen in units."
            },
            {
                "name": "Panel height",
                "key": "height",
                "type": "integer",
                "default": "128",
                "desc": "Height of the screen in units."
            },
            {
                "name": "Countdown time",
                "key": "countdown",
                "type": "integer",
                "default": "60",
                "desc": "Countdown time in seconds."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Start/Show countdown."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Hide coundown, will not reset."
            },
            {
                "name": "SetTime",
                "type": "float",
                "desc": "Set time of countdown"
            },
            {
                "name": "Pause",
                "type": "void",
                "desc": "Pauses the timer without hiding the panel."
            },
            {
                "name": "Resume",
                "type": "void",
                "desc": "Resumes the paused timer."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "vgui_screen",
        "desc": "A VGUI screen. Useful for in-world monitors.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Panel Name",
                "key": "panelname",
                "type": "string",
                "default": "",
                "desc": "The type of display to show."
            },
            {
                "name": "Overlay Material",
                "key": "overlaymaterial",
                "type": "material",
                "default": "",
                "desc": "Name of a material to overlay over the top of the VGUI screen. NOTE: This material must write Z for the VGUI screen to work."
            },
            {
                "name": "Panel Width in World (Green)",
                "key": "width",
                "type": "integer",
                "default": "256",
                "desc": "Width of the panel in units."
            },
            {
                "name": "Panel Height in World (Blue)",
                "key": "height",
                "type": "integer",
                "default": "128",
                "desc": "Height of the panel in units."
            },
            {
                "name": "Is Transparent?",
                "key": "istransparent",
                "type": "boolean",
                "default": "No",
                "desc": "Set this to true if you would like your background to be invisible instead of a black fill."
            }
        ],
        "inputs": [
            {
                "name": "SetActive",
                "type": "void",
                "desc": "Make the vgui screen visible."
            },
            {
                "name": "SetInactive",
                "type": "void",
                "desc": "Make the vgui screen invisible."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "vgui_slideshow_display",
        "desc": "Slideshow Display",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Display Text",
                "key": "displaytext",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Image Directory (materials/vgui/...)",
                "key": "directory",
                "type": "string",
                "default": "slideshow",
                "desc": ""
            },
            {
                "name": "Min Slide Time",
                "key": "minslidetime",
                "type": "float",
                "default": "0.5",
                "desc": "Minimum amount of random time that a slide is displayed."
            },
            {
                "name": "Max Slide Time",
                "key": "maxslidetime",
                "type": "float",
                "default": "0.5",
                "desc": "Maximum amount of random time that a slide is displayed."
            },
            {
                "name": "Cycle Type",
                "key": "cycletype",
                "type": "choices",
                "default": "Random (0)",
                "desc": "",
                "choices": {
                    "Random": "0",
                    "Forward": "1",
                    "Backward": "2"
                }
            },
            {
                "name": "No List Repeat",
                "key": "nolistrepeat",
                "type": "choices",
                "default": "Allow List Repeats (0)",
                "desc": "",
                "choices": {
                    "Allow List Repeats": "0",
                    "No List Repeats": "1"
                }
            },
            {
                "name": "Panel width",
                "key": "width",
                "type": "integer",
                "default": "256",
                "desc": "Width of the panel in units."
            },
            {
                "name": "Panel height",
                "key": "height",
                "type": "integer",
                "default": "128",
                "desc": "Height of the panel in units."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Make slideshow visible."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Make slideshow invisible."
            },
            {
                "name": "SetDisplayText",
                "type": "string",
                "desc": "Sets the display text."
            },
            {
                "name": "RemoveAllSlides",
                "type": "void",
                "desc": "Removes all slides from slideshow."
            },
            {
                "name": "AddSlides",
                "type": "string",
                "desc": "Adds slides by keyword."
            },
            {
                "name": "SetMinSlideTime",
                "type": "float",
                "desc": "Sets min random time between slides."
            },
            {
                "name": "SetMaxSlideTime",
                "type": "float",
                "desc": "Sets max random time between slides."
            },
            {
                "name": "SetCycleType",
                "type": "integer",
                "desc": "0 - random, 1 - forward, 2 - backward"
            },
            {
                "name": "SetNoListRepeat",
                "type": "boolean",
                "desc": "Sets if lists can be randomly picked twice in a row."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "vgui_world_text_panel",
        "desc": "A VGUI world panel that can be placed and modified by entity logic and display localized text",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Enabled by default?",
                "key": "enabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Display Text",
                "key": "displaytext",
                "type": "string",
                "default": "",
                "desc": "The default text to display"
            },
            {
                "name": "Display Text Option",
                "key": "displaytextoption",
                "type": "string",
                "default": "",
                "desc": "Text that will be inserted in the place of a %s1 if you token has one - if you don't know what that is, don't use this"
            },
            {
                "name": "Font",
                "key": "font",
                "type": "string",
                "default": "DefaultLarge",
                "desc": "The font that will be used (should match an entry in your Scheme.res file)"
            },
            {
                "name": "Panel Width in World (Green)",
                "key": "width",
                "type": "integer",
                "default": "256",
                "desc": "Width of the panel in units."
            },
            {
                "name": "Panel Height in World (Blue)",
                "key": "height",
                "type": "integer",
                "default": "128",
                "desc": "Height of the panel in units."
            },
            {
                "name": "Text Panel Width",
                "key": "textpanelwidth",
                "type": "integer",
                "default": "256",
                "desc": "Sometimes the text panel needs to be smaller to force a wrap, but keep the same font size."
            },
            {
                "name": "Text Color (R G B)",
                "key": "textcolor",
                "type": "color255",
                "default": "255 255 255",
                "desc": "The color of the text."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Make text visible."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Make text invisible."
            },
            {
                "name": "SetDisplayText",
                "type": "string",
                "desc": "Sets the display text."
            },
            {
                "name": "SetDisplayTextOption",
                "type": "string",
                "desc": "Sets the display text option."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "water_lod_control",
        "desc": "An entity used to control the LOD behavior of any water in the map. If your map has water, this entity is required.",
        "bases": [
            "BaseEntityPoint"
        ],
        "keyvalues": [
            {
                "name": "Start Transition to Cheap Water",
                "key": "cheapwaterstartdistance",
                "type": "float",
                "default": "1000",
                "desc": "This is the distance from the camera that water will start transitioning to cheap water, in unit."
            },
            {
                "name": "End Transition to Cheap Water",
                "key": "cheapwaterenddistance",
                "type": "float",
                "default": "2000",
                "desc": "This is the distance from the camera that water will finish transitioning to cheap water, in unit."
            }
        ],
        "inputs": [
            {
                "name": "SetCheapWaterStartDistance",
                "type": "float",
                "desc": "Set the distance that water starts transitioning to cheap water."
            },
            {
                "name": "SetCheapWaterEndDistance",
                "type": "float",
                "desc": "Set the distance that water finishes transitioning to cheap water."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "worldspawn",
        "desc": "This is the world entity. Each map can only contain one, and it's automatically created for you.",
        "bases": [
            "BaseEntity",
            "ResponseContext"
        ],
        "keyvalues": [
            {
                "name": "Map Description / Title",
                "key": "message",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "SkyBox Texture Name",
                "key": "skyname",
                "type": "string",
                "default": "",
                "desc": "Texture used for the 2D skybox."
            },
            {
                "name": "Chapter Title",
                "key": "chaptertitle",
                "type": "string",
                "default": "",
                "desc": "Chapter Title that appears onscreen when this level starts."
            },
            {
                "name": "Level Fade In",
                "key": "startdark",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "New Level Unit",
                "key": "newunit",
                "type": "choices",
                "default": "No, keep current (0)",
                "desc": "Used to clear out savegame data of previous levels to keep the savegame size as small as possible. Only set it to Yes if the player cannot return to any previous levels.",
                "choices": {
                    "No, keep current": "0",
                    "Yes, clear previous levels": "1"
                }
            },
            {
                "name": "Time of day",
                "key": "timeofday",
                "type": "choices",
                "default": "Midnight (0)",
                "desc": "",
                "choices": {
                    "Midnight": "0",
                    "Dawn": "1",
                    "Morning": "2",
                    "Afternoon": "3",
                    "Dusk": "4",
                    "Evening": "5"
                }
            },
            {
                "name": "Max occludee area",
                "key": "maxoccludeearea",
                "type": "float",
                "default": "0",
                "desc": "[Used on PC] Prevents occlusion testing for entities that take up more than X% of the screen."
            },
            {
                "name": "Min occluder area",
                "key": "minoccluderarea",
                "type": "float",
                "default": "0",
                "desc": "[Used on PC] Prevents occluders from being used if they take up less than X% of the screen."
            },
            {
                "name": "Start Fade Pixels",
                "key": "maxpropscreenwidth",
                "type": "float",
                "default": "-1",
                "desc": "Number of pixels wide at which all props in the level start to fade (<0 = use fademaxdist). This number is ignored if the prop has a specific fade distance specified."
            },
            {
                "name": "End Fade Pixels",
                "key": "minpropscreenwidth",
                "type": "float",
                "default": "0",
                "desc": "Minimum number of pixels wide at which the prop is visible (0 = don't fade out). This number is ignored if the prop has a specific fade distance specified."
            },
            {
                "name": "Detail.vbsp file",
                "key": "detailvbsp",
                "type": "string",
                "default": "detail.vbsp",
                "desc": "Detail .vbsp file to use for emitting detail props (found in directory <root>/modname)"
            },
            {
                "name": "Detail material file",
                "key": "detailmaterial",
                "type": "material",
                "default": "detail/detailsprites",
                "desc": "Material for detail sprites to use for drawing detail props"
            },
            {
                "name": "World is cold",
                "key": "coldworld",
                "type": "boolean",
                "default": "No",
                "desc": "Emit steam from NPC's mouths and similar effects."
            },
            {
                "name": "Enable Paint",
                "key": "paintinmap",
                "type": "boolean",
                "default": "No",
                "desc": "Enable code for spreading paint on surfaces, and bouncing physics objects around."
            },
            {
                "name": "Gel Blob Limit",
                "key": "maxblobcount",
                "type": "integer",
                "default": "250",
                "desc": "Number of Gel blobs that can exist. Maximum is 250."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "BaseLogicalNPC",
        "desc": "",
        "bases": [
            "BaseEntityAnimating",
            "DamageFilter"
        ],
        "keyvalues": [
            {
                "name": "Health",
                "key": "health",
                "type": "integer",
                "default": "",
                "desc": "Overrides the NPC's default health. Cannot be higher than Max Health."
            },
            {
                "name": "Max Health",
                "key": "max_health",
                "type": "integer",
                "default": "",
                "desc": "Overrides the NPC's max health. Health cannot exceed this amount."
            },
            {
                "name": "Squad Name",
                "key": "squadname",
                "type": "string",
                "default": "",
                "desc": "NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other."
            },
            {
                "name": "Hint Group",
                "key": "hintgroup",
                "type": "string",
                "default": "",
                "desc": "Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC."
            },
            {
                "name": "Hint Limit Nav",
                "key": "hintlimiting",
                "type": "boolean",
                "default": "No",
                "desc": "Limits NPC to using specified hint group for navigation requests, but does not limit local navigation."
            },
            {
                "name": "Weapon Held",
                "key": "additionalequipment",
                "type": "choices",
                "default": "Nothing (0)",
                "desc": "Gives the NPC a weapon. NPCs may attack oddly or not attack if they don't know how to use a particular weapon.",
                "choices": {
                    "Nothing": "0"
                }
            },
            {
                "name": "Relationship",
                "key": "relationship",
                "type": "string",
                "default": "",
                "desc": "Changes whether this NPC likes or dislikes certain others. Format is: <string|targetname or classname> <string|disposition> <integer|rank>. Values for disposition are: D_HT (Hate), D_FR (Fear), D_LI (Like), D_NU, (Neutral)."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Wait Till Seen": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Gag (No IDLE sounds until angry)": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Fall to ground (unchecked means *teleport* to ground)": {
                        "default": true,
                        "num": 4
                    },
                    "[8] Drop Healthkit": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Efficient - Don't acquire enemies or avoid obstacles": {
                        "default": false,
                        "num": 16
                    },
                    "[128] Wait For Script": {
                        "default": false,
                        "num": 128
                    },
                    "[256] Long Visibility/Shoot": {
                        "default": false,
                        "num": 256
                    },
                    "[512] Fade Corpse": {
                        "default": true,
                        "num": 512
                    },
                    "[1024] Think outside PVS": {
                        "default": false,
                        "num": 1024
                    },
                    "[2048] Template NPC (used by npc_maker, will not spawn)": {
                        "default": false,
                        "num": 2048
                    },
                    "[4096] Do Alternate collision/player avoidance for this NPC (largely obsolete, use Start/StopScripting)": {
                        "default": false,
                        "num": 4096
                    },
                    "[8192] Don't drop weapons": {
                        "default": false,
                        "num": 8192
                    },
                    "[16384] Ignore player push (dont give way to player)": {
                        "default": false,
                        "num": 16384
                    }
                }
            },
            {
                "name": "Sleep State",
                "key": "sleepstate",
                "type": "choices",
                "default": "None (0)",
                "desc": "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.",
                "choices": {
                    "None": "0",
                    "Waiting for threat": "1",
                    "Waiting for PVS": "2",
                    "Waiting for input, ignore PVS": "3",
                    "Auto PVS": "4",
                    "Auto PVS after PVS": "5"
                }
            },
            {
                "name": "Wake Radius",
                "key": "wakeradius",
                "type": "float",
                "default": "0",
                "desc": "Auto-wake if player within this distance"
            },
            {
                "name": "Wake Squad",
                "key": "wakesquad",
                "type": "boolean",
                "default": "No",
                "desc": "Wake all of the NPCs squadmates if the NPC is woken"
            },
            {
                "name": "Enemy Filter",
                "key": "enemyfilter",
                "type": "filterclass",
                "default": "",
                "desc": "Filter by which to filter potential enemies"
            },
            {
                "name": "Ignore unseen enemies",
                "key": "ignoreunseenenemies",
                "type": "boolean",
                "default": "No",
                "desc": "Prefer visible enemies, regardless of distance or relationship priority"
            },
            {
                "name": "Physics Impact Damage Scale",
                "key": "physdamagescale",
                "type": "float",
                "default": "1.0",
                "desc": "Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics."
            },
            {
                "name": "Local Velocity",
                "key": "velocity",
                "type": "vector",
                "default": "",
                "desc": "Velocity generated by the entity, can cause strange behavior if changed with AddOutput."
            },
            {
                "name": "Base Velocity",
                "key": "basevelocity",
                "type": "vector",
                "default": "",
                "desc": "Velocity to start with on spawn. Can be changed with AddOutput, where it will be immediately added."
            },
            {
                "name": "Angular Velocity",
                "key": "avelocity",
                "type": "vector",
                "default": "",
                "desc": "Angular velocity to start with on spawn. Can be changed with AddOutput, where it will be immediately added."
            },
            {
                "name": "Water Level",
                "key": "waterlevel",
                "type": "choices",
                "default": "Not in Water (0)",
                "desc": "Current water level of the entity, can cause strange behavior if changed with AddOutput.",
                "choices": {
                    "Not in Water": "0",
                    "Feet": "1",
                    "Waist": "2",
                    "Eyes": "3"
                }
            }
        ],
        "inputs": [
            {
                "name": "SetRelationship",
                "type": "string",
                "desc": "Changes this entity's relationship with another entity or class. Format: <entityname/classname> <D_HT/D_FR/D_LI/D_NU> <priority>"
            },
            {
                "name": "SetEnemyFilter",
                "type": "target_destination",
                "desc": "Changes this NPC's enemy filter to the named filter."
            },
            {
                "name": "SetHealth",
                "type": "integer",
                "desc": "Set this NPC's health."
            },
            {
                "name": "PhysDamageScale",
                "type": "float",
                "desc": "Sets the value that scales damage energy when this character is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility."
            },
            {
                "name": "Break",
                "type": "void",
                "desc": "Makes the NPC die and disappear."
            },
            {
                "name": "StartScripting",
                "type": "void",
                "desc": "Enter scripting state. In this state, NPCs ignore a variety of stimulus that would make them break out of their scripts: They ignore danger sounds, ignore +USE, don't idle speak or respond to other NPC's idle speech, and so on."
            },
            {
                "name": "StopScripting",
                "type": "void",
                "desc": "Exit scripting state."
            },
            {
                "name": "SetSquad",
                "type": "string",
                "desc": "Set the name of this NPC's squad. It will be removed from any existing squad automatically. Leaving the parameter blank will remove the NPC from any existing squad."
            },
            {
                "name": "Wake",
                "type": "void",
                "desc": "Wakes up the NPC if it is sleeping."
            },
            {
                "name": "ForgetEntity",
                "type": "target_destination",
                "desc": "Clears out the NPC's knowledge of a named entity."
            },
            {
                "name": "GagEnable",
                "type": "void",
                "desc": "Turn on the NPC Gag flag. NPC won't speak outside of choreographed scenes."
            },
            {
                "name": "GagDisable",
                "type": "void",
                "desc": "Turn off the NPC Gag flag."
            },
            {
                "name": "IgnoreDangerSounds",
                "type": "float",
                "desc": "Ignore danger sounds for the specified number of seconds."
            },
            {
                "name": "HolsterWeapon",
                "type": "void",
                "desc": "Force the NPC to holster their weapon. Ignored if the NPC is scripting, if the NPC's weapon is already holstered, or if the NPC doesn't use weapons."
            },
            {
                "name": "HolsterAndDestroyWeapon",
                "type": "void",
                "desc": "Identical to HolsterWeapon, except the weapon is destroyed once it has been holstered and concealed."
            },
            {
                "name": "UnholsterWeapon",
                "type": "void",
                "desc": "Force the NPC to draw their weapon. Ignored if the NPC is scripting, if the NPC's weapon is already drawn, or if the NPC doesn't use weapons."
            },
            {
                "name": "ForceInteractionWithNPC",
                "type": "string",
                "desc": "Force the NPC to use a dynamic interaction with another NPC. Parameter format: <target NPC name> <dynamic interaction name>"
            },
            {
                "name": "UpdateEnemyMemory",
                "type": "string",
                "desc": "Update (or Create) this NPC's memory of an enemy and its location"
            },
            {
                "name": "BecomeRagdoll",
                "type": "void",
                "desc": "This NPC will instantly become a ragdoll with ZERO force (just go limp). OnDeath, OnHalfHealth, etc. Outputs will **NOT** BE FIRED."
            }
        ],
        "outputs": [
            {
                "name": "OnDamaged",
                "type": "void",
                "desc": "Fired when this NPC takes damage."
            },
            {
                "name": "OnDeath",
                "type": "void",
                "desc": "Fired when this NPC is killed."
            },
            {
                "name": "OnHalfHealth",
                "type": "void",
                "desc": "Fired when this NPC reaches half of its maximum health."
            },
            {
                "name": "OnHearWorld",
                "type": "void",
                "desc": "Fired when this NPC hears a sound (other than combat or the player)."
            },
            {
                "name": "OnHearPlayer",
                "type": "void",
                "desc": "Fired when this NPC hears the player."
            },
            {
                "name": "OnHearCombat",
                "type": "void",
                "desc": "Fired when this NPC hears combat sounds."
            },
            {
                "name": "OnFoundEnemy",
                "type": "string",
                "desc": "Fired when this NPC establishes line of sight to its enemy (outputs entity)."
            },
            {
                "name": "OnLostEnemyLOS",
                "type": "void",
                "desc": "Fired when this NPC loses line of sight to its enemy."
            },
            {
                "name": "OnLostEnemy",
                "type": "void",
                "desc": "Fired when this NPC loses its enemy. Usually due to the enemy being killed/removed, or because this NPC has selected a newer, more dangerous enemy."
            },
            {
                "name": "OnFoundPlayer",
                "type": "string",
                "desc": "Fired when this NPC establishes line of sight to its enemy, and that enemy is a player (outputs player entity)."
            },
            {
                "name": "OnLostPlayerLOS",
                "type": "void",
                "desc": "Fired when this NPC loses line of sight to its enemy, and that enemy is a player."
            },
            {
                "name": "OnLostPlayer",
                "type": "void",
                "desc": "Fired when this NPC loses its enemy, and that enemy was a player. Usually due to the enemy being killed/removed, or because this NPC has selected a newer, more dangerous enemy."
            },
            {
                "name": "OnDamagedByPlayer",
                "type": "void",
                "desc": "Fired when this NPC is hurt by a player."
            },
            {
                "name": "OnDamagedByPlayerSquad",
                "type": "void",
                "desc": "Fired when this NPC is hurt by a player OR by one of the player's squadmates."
            },
            {
                "name": "OnDenyCommanderUse",
                "type": "void",
                "desc": "Fired when this NPC has refused to join the player's squad."
            },
            {
                "name": "OnSleep",
                "type": "void",
                "desc": "Fired when this NPC enters a sleep state."
            },
            {
                "name": "OnWake",
                "type": "void",
                "desc": "Fired when this NPC comes out of a sleep state."
            },
            {
                "name": "OnForcedInteractionStarted",
                "type": "void",
                "desc": "Fired when the NPC starts a forced interaction."
            },
            {
                "name": "OnForcedInteractionAborted",
                "type": "void",
                "desc": "Fired when the NPC aborts a forced interaction for some reason (target NPC died, couldn't be pathed to, etc)"
            },
            {
                "name": "OnForcedInteractionFinished",
                "type": "void",
                "desc": "NPCs in actbusies can no longer perform dynamic interactions."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "BasePedButton",
        "desc": "The base for the prop_button/prop_under_button.",
        "bases": [
            "BaseEntityAnimating",
            "SRCIndicator"
        ],
        "keyvalues": [
            {
                "name": "Delay Before Reset",
                "key": "delay",
                "type": "float",
                "default": "1",
                "desc": "Amount of time, in seconds, after the button has been pressed before it returns to the starting position. Once it has returned, it can be used again."
            },
            {
                "name": "Play timer sound?",
                "key": "istimer",
                "type": "boolean",
                "default": "No",
                "desc": "If set, this button will play timer sounds while button is depressed. This allows fast reset by default - use Prevent fast reset to stop this."
            },
            {
                "name": "Prevent fast reset?",
                "key": "preventfastreset",
                "type": "boolean",
                "default": "No",
                "desc": "Buttons that are timer's allow you to reset early - use this to make the button stick for the entire duration."
            },
            {
                "name": "Is Solid",
                "key": "solid",
                "type": "boolean",
                "default": "No",
                "desc": "Makes button able to be passed through."
            }
        ],
        "inputs": [
            {
                "name": "Press",
                "type": "void",
                "desc": "Cause the button to be pressed."
            },
            {
                "name": "Lock",
                "type": "void",
                "desc": "Locks the button."
            },
            {
                "name": "UnLock",
                "type": "void",
                "desc": "UnLocks the button."
            },
            {
                "name": "CancelPress",
                "type": "void",
                "desc": "Causes the button to reset quietly and without firing OnButtonReset outputs."
            }
        ],
        "outputs": [
            {
                "name": "OnPressed",
                "type": "void",
                "desc": "Called when the button has been pressed."
            },
            {
                "name": "OnPressedBlue",
                "type": "void",
                "desc": "Called in Coop when the button has been pressed by the Blue player."
            },
            {
                "name": "OnPressedOrange",
                "type": "void",
                "desc": "Called in Coop when the button has been pressed by the Orange player."
            },
            {
                "name": "OnButtonReset",
                "type": "void",
                "desc": "Called when the button has reset after being pressed."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "BasePortButton",
        "desc": "The base for the various floor buttons - weighted, cube, sphere and Antique weighted.",
        "bases": [
            "BaseEntityAnimating",
            "SRCIndicator"
        ],
        "keyvalues": [
            {
                "name": "Suppress Animation Sounds",
                "key": "suppressanimsounds",
                "type": "boolean",
                "default": "No",
                "desc": "Prevent the model from playing any sounds."
            },
            {
                "name": "Collisions",
                "key": "solid",
                "type": "choices",
                "default": "Solid (0)",
                "desc": "Determine if the button should be solid or not.",
                "choices": {
                    "Solid": "0",
                    "Non-Solid": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "PressIn",
                "type": "void",
                "desc": "Activate the button as if it was pressed, sending it to the bottom position."
            },
            {
                "name": "PressOut",
                "type": "void",
                "desc": "Release the button, sending it to the top position."
            }
        ],
        "outputs": [
            {
                "name": "OnPressed",
                "type": "void",
                "desc": "Called when the button has been pressed."
            },
            {
                "name": "OnUnPressed",
                "type": "void",
                "desc": "Called when the button has been released."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "BaseProjector",
        "desc": "The base for all the different projectors (wall & tractor beam).",
        "bases": [
            "BaseEntityAnimating"
        ],
        "keyvalues": [
            {
                "name": "Start Enabled",
                "key": "startenabled",
                "type": "boolean",
                "default": "No",
                "desc": "If the projector should start enabled."
            },
            {
                "name": "Disable Placement Helper",
                "key": "disablehelper",
                "type": "boolean",
                "default": "No",
                "desc": "Disable the automatically created placement helper to prevent it from fighting with a custom one."
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enables projection from this projector. This also updates the position of the bridge/funnel if the model was parented."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disables projection from this projector."
            },
            {
                "name": "SetParent",
                "type": "target_destination",
                "desc": "Sets the parent for the projector. This will only move the model properly, retrigger the enable input to correct the bridge/funnel position."
            },
            {
                "name": "SetParentAttachment",
                "type": "string",
                "desc": "Change this entity to attach to a specific attachment point on its parent. Entities must be parented before being sent this input. The parameter passed in should be the name of the attachment."
            },
            {
                "name": "SetParentAttachmentMaintainOffset",
                "type": "string",
                "desc": "Change this entity to attach to a specific attachment point on it's parent. Entities must be parented before being sent this input. The parameter passed in should be the name of the attachment. The entity will maintain it's position relative to the parent at the time it is attached."
            },
            {
                "name": "ClearParent",
                "type": "void",
                "desc": "Removes this entity from the the movement hierarchy, leaving it free to move independently."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "BasePropPhysics",
        "desc": "For prop_physics-like entities.",
        "bases": [
            "BaseEntityPhysics",
            "BreakableProp",
            "SystemLevelChoice",
            "BaseFadeProp"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start Asleep": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Don't take physics damage": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Debris - Don't collide with the player or other debris": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Motion Disabled": {
                        "default": false,
                        "num": 8
                    },
                    "[128] Not affected by rotor wash": {
                        "default": false,
                        "num": 128
                    },
                    "[256] Generate output on +USE ": {
                        "default": true,
                        "num": 256
                    },
                    "[512] Prevent pickup": {
                        "default": false,
                        "num": 512
                    },
                    "[1024] Prevent motion enable on player bump": {
                        "default": false,
                        "num": 1024
                    },
                    "[4096] Debris with trigger interaction": {
                        "default": false,
                        "num": 4096
                    },
                    "[16384] Radius pickup (easier to pickup)": {
                        "default": false,
                        "num": 16384
                    },
                    "[2097152] No collisions": {
                        "default": false,
                        "num": 2097152
                    }
                }
            },
            {
                "name": "Min Damage to Hurt",
                "key": "minhealthdmg",
                "type": "integer",
                "default": "0",
                "desc": "The prop will ignore any damage events if the damage is less than this amount."
            },
            {
                "name": "Shadow Cast Distance",
                "key": "shadowcastdist",
                "type": "integer",
                "default": "0",
                "desc": "Use this to override how far this object casts shadows. 0 = default distance."
            },
            {
                "name": "Physics Impact Damage Scale",
                "key": "physdamagescale",
                "type": "float",
                "default": "0.1",
                "desc": "Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials."
            },
            {
                "name": "Impact damage type",
                "key": "damagetype",
                "type": "choices",
                "default": "Blunt (0)",
                "desc": "",
                "choices": {
                    "Blunt": "0",
                    "Sharp": "1"
                }
            },
            {
                "name": "Damaging it Doesn't Push It",
                "key": "nodamageforces",
                "type": "boolean",
                "default": "No",
                "desc": "Used to determine whether or not damage should cause the brush to move."
            },
            {
                "name": "Scale Factor For Inertia",
                "key": "inertiascale",
                "type": "float",
                "default": "1.0",
                "desc": "Scales the angular mass of an object. Used to hack angular damage and collision response."
            },
            {
                "name": "Mass Scale",
                "key": "massscale",
                "type": "float",
                "default": "0",
                "desc": "A scale multiplier for the object's mass."
            },
            {
                "name": "Override Parameters",
                "key": "overridescript",
                "type": "string",
                "default": "",
                "desc": "A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'."
            },
            {
                "name": "Health Level to Override Motion",
                "key": "damagetoenablemotion",
                "type": "integer",
                "default": "0",
                "desc": "If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion."
            },
            {
                "name": "Physics Impact Force to Override Motion",
                "key": "forcetoenablemotion",
                "type": "float",
                "default": "0",
                "desc": "If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion."
            },
            {
                "name": "Sound to make when punted.",
                "key": "puntsound",
                "type": "sound",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "Wake",
                "type": "void",
                "desc": "Wake up this physics object, if it is sleeping."
            },
            {
                "name": "Sleep",
                "type": "void",
                "desc": "Put this physics object to sleep. It will wake if given the Wake input, or if force is applied to it. Note that physics objects go to sleep automatically after coming to rest for a while, so you don't really need to use this."
            },
            {
                "name": "EnableMotion",
                "type": "void",
                "desc": "Enable physics motion/collision response."
            },
            {
                "name": "DisableMotion",
                "type": "void",
                "desc": "Disable physics motion/collision response."
            },
            {
                "name": "DisableFloating",
                "type": "void",
                "desc": "Disable fluid/floating simulation to reduce cost."
            },
            {
                "name": "SetBodyGroup",
                "type": "integer",
                "desc": "Set this prop's body group (from 0 - n)."
            },
            {
                "name": "physdamagescale",
                "type": "float",
                "desc": "Set the Physics Impact Damage Scale for this character. NOTE: 0 means this feature is disabled for backwards compatibility."
            },
            {
                "name": "EnableDamageForces",
                "type": "void",
                "desc": "Damaging the entity applies physics forces to it."
            },
            {
                "name": "DisableDamageForces",
                "type": "void",
                "desc": "Damaging the entity does *not* apply physics forces to it."
            },
            {
                "name": "EnablePuntSound",
                "type": "void",
                "desc": "Allow this prop to play its own sound when punted."
            },
            {
                "name": "DisablePuntSound",
                "type": "void",
                "desc": "Prevent this prop from playing its own sound when punted."
            }
        ],
        "outputs": [
            {
                "name": "OnMotionEnabled",
                "type": "void",
                "desc": "Fired when motion is enabled on this prop, either via 'Health Level to Override Motion' or from the EnableMotion input."
            },
            {
                "name": "OnAwakened",
                "type": "void",
                "desc": "Fired when this entity becomes awake (collision/force is applied to it while it's asleep)."
            },
            {
                "name": "OnPhysGunPickup",
                "type": "void",
                "desc": "Fired when the player picks up the prop with the physcannon or +USE."
            },
            {
                "name": "OnPhysGunPunt",
                "type": "void",
                "desc": "Fired when a player punts this object with the physgun."
            },
            {
                "name": "OnPhysGunOnlyPickup",
                "type": "void",
                "desc": "Fired when a player picks this object up WITH THE PHYSGUN. +USE pickups do not fire this output."
            },
            {
                "name": "OnPhysGunDrop",
                "type": "void",
                "desc": "Fired when the player drops the prop with the physcannon or USE."
            },
            {
                "name": "OnPlayerUse",
                "type": "void",
                "desc": "Fired when the player tries to +USE the prop. This output will fire only if the Generate output on +USE spawnflag is set."
            },
            {
                "name": "OnPlayerPickup",
                "type": "void",
                "desc": "Fired whenever the player picks up this prop (with the physcannon or with +USE)."
            },
            {
                "name": "OnOutOfWorld",
                "type": "void",
                "desc": "Fired whenever the prop is out of the allowed world bounds."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "BaseTrain",
        "desc": "",
        "bases": [
            "BaseEntityVisBrush"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] No Pitch (X-rot)": {
                        "default": false,
                        "num": 1
                    },
                    "[2] No User Control": {
                        "default": false,
                        "num": 2
                    },
                    "[8] Passable": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Fixed Orientation": {
                        "default": false,
                        "num": 16
                    },
                    "[128] Ridable Train (HL1 Train)": {
                        "default": false,
                        "num": 128
                    },
                    "[256] Use max speed for pitch shifting move sound": {
                        "default": false,
                        "num": 256
                    },
                    "[512] Is unblockable by player": {
                        "default": false,
                        "num": 512
                    },
                    "[1024] Allow Roll (Z-rot)": {
                        "default": false,
                        "num": 1024
                    }
                }
            },
            {
                "name": "Spawn path_track",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The name of the first path_track in the train's path. The train will spawn at this path_track. It will also turn to face direction indicated by the 'Orientation Type' setting."
            },
            {
                "name": "Max Speed (units / second)",
                "key": "startspeed",
                "type": "integer",
                "default": "100",
                "desc": "The maximum speed that this train can move. Any speeds applied to this train, such as by path_tracks or SetSpeed inputs, will be clipped to this maximum value."
            },
            {
                "name": "Initial Speed (units / second)",
                "key": "speed",
                "type": "integer",
                "default": "0",
                "desc": "The speed that the train will move at after it spawns, 0 = stopped."
            },
            {
                "name": "Change Velocity",
                "key": "velocitytype",
                "type": "choices",
                "default": "Instantaneously (0)",
                "desc": "The method through which this train changes its velocity as it moves along the path.",
                "choices": {
                    "Instantaneously": "0",
                    "Linear blend": "1",
                    "Ease in/ease out": "2"
                }
            },
            {
                "name": "Change Orientation",
                "key": "orientationtype",
                "type": "choices",
                "default": "Near path_tracks (1)",
                "desc": "The method through which this train changes its orientation as it moves along the path.",
                "choices": {
                    "Never (fixed orientation)": "0",
                    "Near path_tracks": "1",
                    "Linear blend": "2",
                    "Ease in/ease out": "3"
                }
            },
            {
                "name": "Distance Between the Wheels",
                "key": "wheels",
                "type": "integer",
                "default": "50",
                "desc": "Used for turning and stopping."
            },
            {
                "name": "Height above track",
                "key": "height",
                "type": "integer",
                "default": "4",
                "desc": "The height above the track that this train moves."
            },
            {
                "name": "Bank Angle on Turns",
                "key": "bank",
                "type": "string",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Damage on Crush",
                "key": "dmg",
                "type": "integer",
                "default": "0",
                "desc": "The amount of damage this train does to entities that block it."
            },
            {
                "name": "----------------------------------------------------------------------------------------------------------",
                "key": "line_basetrain",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Move Sound",
                "key": "movesound",
                "type": "sound",
                "default": "",
                "desc": "A sound that is played (and looped) while the train is moving."
            },
            {
                "name": "Move Ping Sound",
                "key": "movepingsound",
                "type": "sound",
                "default": "",
                "desc": "A sound that is played more frequently as the train speeds up."
            },
            {
                "name": "Start Sound",
                "key": "startsound",
                "type": "sound",
                "default": "",
                "desc": "A sound played when the train starts moving."
            },
            {
                "name": "Stop Sound",
                "key": "stopsound",
                "type": "sound",
                "default": "",
                "desc": "A sound played when the train stops moving."
            },
            {
                "name": "Volume (10 = loudest)",
                "key": "volume",
                "type": "integer",
                "default": "10",
                "desc": ""
            },
            {
                "name": "Min pitch (1-255, > 100 = higher)",
                "key": "movesoundminpitch",
                "type": "integer",
                "default": "60",
                "desc": "The sound pitch value that the train will approach as it comes to a stop."
            },
            {
                "name": "Max pitch (1-255, > 100 = higher)",
                "key": "movesoundmaxpitch",
                "type": "integer",
                "default": "200",
                "desc": "The sound pitch value that the train will approach as it approaches its max speed  or 1000 units/second if the 'Use max speed for pitch shifting move sound' flag is not set."
            },
            {
                "name": "Min move sound interval",
                "key": "movesoundmintime",
                "type": "float",
                "default": "0",
                "desc": "Minimum interval at which to play the move ping sound."
            },
            {
                "name": "Max move sound interval",
                "key": "movesoundmaxtime",
                "type": "float",
                "default": "0",
                "desc": "Maximum interval at which to play the move ping sound."
            }
        ],
        "inputs": [
            {
                "name": "SetSpeed",
                "type": "float",
                "desc": "Set the speed of the train, as a ratio of max speed [0, 1]"
            },
            {
                "name": "SetSpeedDir",
                "type": "float",
                "desc": "Set the speed of the train, as a ratio of max speed. Negative values reverse the direction [-1, 1]"
            },
            {
                "name": "SetSpeedReal",
                "type": "float",
                "desc": "Set the speed of the train. Must be a positive value from 0 to max speed."
            },
            {
                "name": "Stop",
                "type": "void",
                "desc": "Stop the train."
            },
            {
                "name": "StartForward",
                "type": "void",
                "desc": "Start the train moving forward."
            },
            {
                "name": "StartBackward",
                "type": "void",
                "desc": "Start the train moving backward."
            },
            {
                "name": "Resume",
                "type": "void",
                "desc": "Resume the train moving in the current direction after it was stopped via the 'Stop' or 'Toggle' input."
            },
            {
                "name": "Reverse",
                "type": "void",
                "desc": "Reverse the direction of the train."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the train between start and stop."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "BreakableBrush",
        "desc": "",
        "bases": [
            "BaseEntityVisBrush",
            "_Breakable",
            "DamageFilter"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Only Break on Trigger": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Break on Touch": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Break on Pressure": {
                        "default": false,
                        "num": 4
                    },
                    "[512] Break immediately on Physics": {
                        "default": false,
                        "num": 512
                    },
                    "[1024] Don't take physics damage": {
                        "default": false,
                        "num": 1024
                    },
                    "[2048] Don't allow bullet penetration": {
                        "default": false,
                        "num": 2048
                    }
                }
            },
            {
                "name": "Prop Data",
                "key": "propdata",
                "type": "choices",
                "default": "None (0)",
                "desc": "Set to the best approximation of the size and material of this entity's brushes. If set, it will override this entity's health and damage taken from various weapons. See the propdata.txt file in the scripts directory of your MOD to get a detailed list of what each entry specifies.",
                "choices": {
                    "None": "0",
                    "Wooden.Tiny": "1",
                    "Wooden.Small": "2",
                    "Wooden.Medium": "3",
                    "Wooden.Large": "4",
                    "Wooden.Huge": "5",
                    "Metal.Small": "6",
                    "Metal.Medium": "7",
                    "Metal.Large": "8",
                    "Cardboard.Small": "9",
                    "Cardboard.Medium": "10",
                    "Cardboard.Large": "11",
                    "Stone.Small": "12",
                    "Stone.Medium": "13",
                    "Stone.Large": "14",
                    "Stone.Huge": "15",
                    "Glass.Small": "16",
                    "Plastic.Small": "17",
                    "Plastic.Medium": "18",
                    "Plastic.Large": "19",
                    "Pottery.Small": "20",
                    "Pottery.Medium": "21",
                    "Pottery.Large": "22",
                    "Pottery.Huge": "23",
                    "Glass.Window": "24"
                }
            },
            {
                "name": "Strength",
                "key": "health",
                "type": "integer",
                "default": "1",
                "desc": "Number of points of damage to take before breaking. 0 means don't break."
            },
            {
                "name": "Material Type",
                "key": "material",
                "type": "choices",
                "default": "Glass (0)",
                "desc": "Set to the material type of the brush. Used to decide what sounds to make when damaged, and what gibs to produce when broken.",
                "choices": {
                    "Glass": "0",
                    "Wood": "1",
                    "Metal": "2",
                    "Flesh": "3",
                    "CinderBlock": "4",
                    "Ceiling Tile": "5",
                    "Computer": "6",
                    "Unbreakable Glass": "7",
                    "Rocks": "8",
                    "Metal Panel": "9",
                    "None": "10"
                }
            },
            {
                "name": "Gibs Direction",
                "key": "explosion",
                "type": "choices",
                "default": "Random (0)",
                "desc": "Used to decide which direction to throw gibs when broken.",
                "choices": {
                    "Random": "0",
                    "Relative to Attack": "1",
                    "Use Precise Gib Dir": "2"
                }
            },
            {
                "name": "Precise Gib Direction",
                "key": "gibdir",
                "type": "angle",
                "default": "0 0 0",
                "desc": "Specifies the direction to throw gibs when this breakable breaks. Be sure to select Use Precise Gib Dir in the Gibs Direction field!"
            },
            {
                "name": "Damaging it Doesn't Push It",
                "key": "nodamageforces",
                "type": "boolean",
                "default": "No",
                "desc": "Used to determine whether or not damage should cause the brush to move."
            },
            {
                "name": "Spawn On Break",
                "key": "spawnobject",
                "type": "choices",
                "default": "0",
                "desc": "When broken, an entity of the selected type will be created.",
                "choices": {
                    "item_battery": "1",
                    "item_healthkit": "2",
                    "item_ammo_pistol": "3",
                    "item_ammo_pistol_large": "4",
                    "item_ammo_smg1": "5",
                    "item_ammo_smg1_large": "6",
                    "item_ammo_ar2": "7",
                    "item_ammo_ar2_large": "8",
                    "item_box_buckshot": "9",
                    "item_flare_round": "10",
                    "item_box_flare_rounds": "11",
                    "item_ml_grenade": "12",
                    "item_smg1_grenade": "13",
                    "item_box_sniper_rounds": "14",
                    "unused1": "15",
                    "weapon_stunstick": "16",
                    "weapon_ar1": "17",
                    "weapon_ar2": "18",
                    "unused2": "19",
                    "weapon_ml": "20",
                    "weapon_smg1": "21",
                    "weapon_smg2": "22",
                    "weapon_slam": "23",
                    "weapon_shotgun": "24",
                    "weapon_molotov": "25",
                    "item_dynamic_resupply": "26"
                }
            }
        ],
        "inputs": [
            {
                "name": "EnableDamageForces",
                "type": "void",
                "desc": "Damaging the entity applies physics forces to it."
            },
            {
                "name": "DisableDamageForces",
                "type": "void",
                "desc": "Damaging the entity does *not* apply physics forces to it."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "Door",
        "desc": "",
        "bases": [
            "BaseEntityVisBrush",
            "MasterEnt"
        ],
        "keyvalues": [
            {
                "name": "Speed",
                "key": "speed",
                "type": "float",
                "default": "100",
                "desc": "The speed at which the door moves."
            },
            {
                "name": "Start Sound",
                "key": "noise1",
                "type": "sound",
                "default": "",
                "desc": "Sound to play when the door starts moving."
            },
            {
                "name": "Stop Sound",
                "key": "noise2",
                "type": "sound",
                "default": "",
                "desc": "Sound to play when the door stops moving."
            },
            {
                "name": "Start Close Sound",
                "key": "startclosesound",
                "type": "sound",
                "default": "",
                "desc": "(Optional) Sound to play when the door starts closing. If not set, the Start Sound will be used instead."
            },
            {
                "name": "Stop Close Sound",
                "key": "closesound",
                "type": "sound",
                "default": "",
                "desc": "(Optional) Sound to play when the door stops closing. If not set, the Stop Sound will be used instead."
            },
            {
                "name": "Loop Moving Sound?",
                "key": "loopmovesound",
                "type": "boolean",
                "default": "No",
                "desc": "If set to true, the door's 'Start Sound' will be continually looped until the door finishes moving."
            },
            {
                "name": "Delay Before Reset (-1 stay)",
                "key": "wait",
                "type": "integer",
                "default": "-1",
                "desc": "Amount of time, in seconds, after the door has opened before it closes. Once it has closed, it can be used again. If the value is set to -1, the door never closes itself."
            },
            {
                "name": "Lip",
                "key": "lip",
                "type": "integer",
                "default": "0",
                "desc": "The amount the door will keep overlapping with the original position. The distance moved = the size of the brush on the movement axis - lip. Negative values cause the door to move even further."
            },
            {
                "name": "Blocking Damage",
                "key": "dmg",
                "type": "integer",
                "default": "0",
                "desc": "Amount of damage done to entities that block the movement of this door, per frame."
            },
            {
                "name": "Linked Door",
                "key": "chainstodoor",
                "type": "target_destination",
                "default": "",
                "desc": "Passes the door's +use inputs and touch events onto a different door, so it also is activated."
            },
            {
                "name": "Force Closed",
                "key": "forceclosed",
                "type": "boolean",
                "default": "No",
                "desc": "If set, this door will close no matter what. Useful for doors that have to close even if the player tries to block them with objects."
            },
            {
                "name": "Ignore Debris",
                "key": "ignoredebris",
                "type": "boolean",
                "default": "No",
                "desc": "If set this will change the door's collision group to one that ignore collisions with debris objects (note that this is not compatible with the non-solid-to-player spawnflag)."
            },
            {
                "name": "Solid Type",
                "key": "solidbsp",
                "type": "choices",
                "default": "BSP (1)",
                "desc": "How to calculate collisions. BSP is more rudimentarty but allows more stable collision with players.",
                "choices": {
                    "VPhysics": "0",
                    "BSP": "1"
                }
            },
            {
                "name": "Door Health",
                "key": "health",
                "type": "integer",
                "default": "",
                "desc": "The health of the door (allows someone to shoot it open). 0 means invincible."
            },
            {
                "name": "Locked Sound",
                "key": "locked_sound",
                "type": "sound",
                "default": "",
                "desc": "Sound played when the player tries to use the door, and fails because it's locked."
            },
            {
                "name": "Unlocked Sound",
                "key": "unlocked_sound",
                "type": "sound",
                "default": "",
                "desc": "Sound played when the door is unlocked."
            },
            {
                "name": "Spawn Position",
                "key": "spawnpos",
                "type": "choices",
                "default": "Closed (0)",
                "desc": "",
                "choices": {
                    "Closed": "0",
                    "Open": "1"
                }
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Starts Open - OBSOLETE, use 'Spawn Position' key instead": {
                        "default": false,
                        "num": 1
                    },
                    "[4] Non-solid to Player": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Passable": {
                        "default": false,
                        "num": 8
                    },
                    "[32] Toggle": {
                        "default": false,
                        "num": 32
                    },
                    "[256] Use Opens": {
                        "default": false,
                        "num": 256
                    },
                    "[512] NPCs Can't": {
                        "default": false,
                        "num": 512
                    },
                    "[1024] Touch Opens": {
                        "default": true,
                        "num": 1024
                    },
                    "[2048] Starts locked": {
                        "default": false,
                        "num": 2048
                    },
                    "[4096] Door Silent": {
                        "default": false,
                        "num": 4096
                    },
                    "[65536] New +USE rules - Allow +USE only when when the door is closed/closing or is open/opening and can be manually closed": {
                        "default": false,
                        "num": 65536
                    }
                }
            },
            {
                "name": "Locked Sentence",
                "key": "locked_sentence",
                "type": "choices",
                "default": "None (0)",
                "desc": "A sentence played when the player tries to use the door, and fails because it's locked.",
                "choices": {
                    "None": "0",
                    "[EA] Gen. Access Granted": "1",
                    "[ED] Security Disengaged": "2",
                    "[EF] Blast Door": "3",
                    "[EFIRE] Fire Door": "4",
                    "[ECHEM] Chemical Door": "5",
                    "[ERAD] Radiation Door": "6",
                    "[ECON] gen. Containment": "7",
                    "[EH] Maintenance area": "8"
                }
            },
            {
                "name": "Unlocked Sentence",
                "key": "unlocked_sentence",
                "type": "choices",
                "default": "None (0)",
                "desc": "A sentence played when the door is unlocked.",
                "choices": {
                    "None": "0",
                    "[EA] Gen. Access Granted": "1",
                    "[ED] Security Disengaged": "2",
                    "[EF] Blast Door": "3",
                    "[EFIRE] Fire Door": "4",
                    "[ECHEM] Chemical Door": "5",
                    "[ERAD] Radiation Door": "6",
                    "[ECON] gen. Containment": "7",
                    "[EH] Maintenance area": "8"
                }
            }
        ],
        "inputs": [
            {
                "name": "Open",
                "type": "void",
                "desc": "Open the door, if it is not fully open."
            },
            {
                "name": "Close",
                "type": "void",
                "desc": "Close the door, if it is not fully closed."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the door between open and closed."
            },
            {
                "name": "Lock",
                "type": "void",
                "desc": "Lock the door."
            },
            {
                "name": "Unlock",
                "type": "void",
                "desc": "Unlock the door."
            },
            {
                "name": "SetSpeed",
                "type": "float",
                "desc": "Set the door speed."
            },
            {
                "name": "SetToggleState",
                "type": "boolean",
                "desc": "Force the door instantly to currently open or closed."
            }
        ],
        "outputs": [
            {
                "name": "OnClose",
                "type": "void",
                "desc": "Fired when the door starts closing."
            },
            {
                "name": "OnOpen",
                "type": "void",
                "desc": "Fired when the door starts opening."
            },
            {
                "name": "OnFullyOpen",
                "type": "void",
                "desc": "Fired when the door reaches the fully open position. Reversed if 'Start Open' flag is set."
            },
            {
                "name": "OnFullyClosed",
                "type": "void",
                "desc": "Fired when the door reaches the fully closed position. Reversed if 'Start Open' flag is set."
            },
            {
                "name": "OnBlockedClosing",
                "type": "void",
                "desc": "Fired when the door is blocked while closing."
            },
            {
                "name": "OnBlockedOpening",
                "type": "void",
                "desc": "Fired when the door is blocked while opening."
            },
            {
                "name": "OnUnblockedClosing",
                "type": "void",
                "desc": "Fired when the door is unblocked while closing."
            },
            {
                "name": "OnUnblockedOpening",
                "type": "void",
                "desc": "Fired when the door is unblocked while opening."
            },
            {
                "name": "OnLockedUse",
                "type": "void",
                "desc": "Fired when the player uses the door, but it is locked."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "Item",
        "desc": "",
        "bases": [
            "BaseEntityPhysics",
            "EnableDisable",
            "Toggle",
            "FadeDistance"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start Constrained": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnPlayerTouch",
                "type": "void",
                "desc": "Fires when the player touches this object."
            },
            {
                "name": "OnCacheInteraction",
                "type": "void",
                "desc": "This output fires when the player proves they have 'found' this item. Fires on: Player Touch (whether or not player actually acquires the item), Picked up by +USE, Picked up by Physcannon, Punted by Physcannon."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "Trigger",
        "desc": "",
        "bases": [
            "TriggerOnce"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Clients/Players": {
                        "default": true,
                        "num": 1
                    },
                    "[2] NPCs": {
                        "default": false,
                        "num": 2
                    },
                    "[4] func_pushable": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Physics Objects": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Only player ally NPCs": {
                        "default": false,
                        "num": 16
                    },
                    "[64] Everything (not including physics debris)": {
                        "default": false,
                        "num": 64
                    },
                    "[1024] Physics debris": {
                        "default": false,
                        "num": 1024
                    },
                    "[4096] Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physobjs (car, blob...)": {
                        "default": true,
                        "num": 4096
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "EndTouch",
                "type": "void",
                "desc": "Fires the OnEndTouch output. If called by an entity inside the trigger, the OnEndTouch will be fired for them as the activator. Note that this input is passed even if the player is being treated as 'not' touching the trigger while outside it."
            }
        ],
        "outputs": [
            {
                "name": "OnStartTouchAll",
                "type": "void",
                "desc": "Fired when an entity starts touching this trigger, and no other entities are touching it. Only entities that passed this trigger's filters are considered."
            },
            {
                "name": "OnEndTouch",
                "type": "void",
                "desc": "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
            },
            {
                "name": "OnEndTouchAll",
                "type": "void",
                "desc": "Fires when an entity stops touching this trigger, and no other entities are touching it. Only entities that passed this trigger's filters are considered."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "ai_goal_follow",
        "desc": "AI Goal Follow",
        "bases": [
            "FollowGoal"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "ai_goal_injured_follow",
        "desc": "AI Goal Injured Follow",
        "bases": [
            "FollowGoal"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "ai_goal_lead",
        "desc": "AI Goal Lead",
        "bases": [
            "LeadGoalBase"
        ],
        "keyvalues": [
            {
                "name": "Search Type",
                "key": "searchtype",
                "type": "choices",
                "default": "Entity Name (0)",
                "desc": "How to search for the entities using the targetname.",
                "choices": {
                    "Entity Name": "0",
                    "Classname": "1"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "ai_goal_lead_weapon",
        "desc": "AI Goal Lead (Weapon). A version of the ai_goal_lead entity that requires the player to have the specified weapon before the Actor(s) will lead the player to their target.",
        "bases": [
            "LeadGoalBase"
        ],
        "keyvalues": [
            {
                "name": "Weapon",
                "key": "weaponname",
                "type": "choices",
                "default": "Bugbait (weapon_bugbait)",
                "desc": "The weapon the player must have in order for the actor to begin leading. If the player takes more than 60 seconds, they'll be silently given a Bug Bait.",
                "choices": {
                    "Bugbait": "weapon_bugbait",
                    "SMG1": "weapon_smg1",
                    "AR2": "weapon_ar2"
                }
            },
            {
                "name": "Missing weapon concept modifier",
                "key": "missingweaponconceptmodifier",
                "type": "string",
                "default": "",
                "desc": "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_MISSINGWEAPON' concept is spoken."
            },
            {
                "name": "Search Type",
                "key": "searchtype",
                "type": "choices",
                "default": "Entity Name (0)",
                "desc": "How to search for the entities using the targetname.",
                "choices": {
                    "Entity Name": "0",
                    "Classname": "1"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "cycler",
        "desc": "An entity used to display a model for testing purposes. Shooting it with cycle through the model's animations.",
        "bases": [
            "BaseEntityAnimating",
            "SetModel",
            "SetSkin"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Not Solid": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Sequence",
                "key": "sequence",
                "type": "integer",
                "default": "0",
                "desc": "Default animation sequence for the model to be playing after spawning."
            }
        ],
        "inputs": [
            {
                "name": "SetSequence",
                "type": "string",
                "desc": "Sets the cycler's sequence."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "ent_hover_turret_tether",
        "desc": "The ceiling tether for Hover Turrets. Generated automatically when the hover turret has an attachTarget set.",
        "bases": [
            "BaseEntityAnimating"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_beam",
        "desc": "An entity that creates a visible beam between two points. The points can be attached to entities to make the beam move around.",
        "bases": [
            "BaseBeam"
        ],
        "keyvalues": [
            {
                "name": "Radius",
                "key": "radius",
                "type": "integer",
                "default": "16",
                "desc": "If the 'Random Strike' spawnflag is set, this radius determines the area within which the endpoints will randomly strike."
            },
            {
                "name": "Life (seconds 0 = infinite)",
                "key": "life",
                "type": "float",
                "default": "0",
                "desc": "Amount of time before the beam dies. Setting to zero will make the beam stay forever."
            },
            {
                "name": "Width of beam",
                "key": "boltwidth",
                "type": "float",
                "default": "2",
                "desc": "Pixel width of the beam."
            },
            {
                "name": "Strike again time (secs)",
                "key": "striketime",
                "type": "float",
                "default": "1",
                "desc": "Refire time between random strikes of the beam. Only used if the 'Random Strike' spawnflag is set."
            },
            {
                "name": "Start Entity",
                "key": "lightningstart",
                "type": "target_destination",
                "default": "",
                "desc": "Entity that the beam starts at."
            },
            {
                "name": "Ending Entity",
                "key": "lightningend",
                "type": "target_destination",
                "default": "",
                "desc": "Entity that the beam ends at. If not set, the Ending Location will be used instead."
            },
            {
                "name": "Decal Name",
                "key": "decalname",
                "type": "string",
                "default": "Bigshot",
                "desc": "Decal to be applied at the end of the beam"
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start On": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Toggle": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Random Strike": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Ring": {
                        "default": false,
                        "num": 8
                    },
                    "[16] StartSparks": {
                        "default": false,
                        "num": 16
                    },
                    "[32] EndSparks": {
                        "default": false,
                        "num": 32
                    },
                    "[64] Decal End": {
                        "default": false,
                        "num": 64
                    },
                    "[128] Shade Start": {
                        "default": false,
                        "num": 128
                    },
                    "[256] Shade End": {
                        "default": false,
                        "num": 256
                    },
                    "[512] Taper Out": {
                        "default": false,
                        "num": 512
                    }
                }
            },
            {
                "name": "Touch Type (tripwire)",
                "key": "touchtype",
                "type": "choices",
                "default": "Not a tripwire (0)",
                "desc": "If you want the beam to fire an output when touched by entities, choose the entity type here.",
                "choices": {
                    "Not a tripwire": "0",
                    "Player Only": "1",
                    "NPC Only": "2",
                    "Player or NPC": "3",
                    "Player or NPC or Physprop": "4"
                }
            },
            {
                "name": "Filter Name",
                "key": "filtername",
                "type": "filterclass",
                "default": "",
                "desc": "Filter to use to determine what triggers the output."
            },
            {
                "name": "Ending Location",
                "key": "targetpoint",
                "type": "vecline",
                "default": "0 0 0",
                "desc": "If an Ending Entity is not specified, use this point as the destination instead.It is relative to the beam origin."
            },
            {
                "name": "Beam clipping",
                "key": "clipstyle",
                "type": "choices",
                "default": "Do not clip (default) (0)",
                "desc": "Select whether you want the beam to clip against geometry or characters, making it stop prematurely.",
                "choices": {
                    "Do not clip (default)": "0",
                    "Clip to geometry": "1",
                    "Clip to everything solid": "2"
                }
            }
        ],
        "inputs": [
            {
                "name": "StrikeOnce",
                "type": "void",
                "desc": "Causes the beam to strike once. It will stay on for its set Life and then turn off (it will never turn off if Life is set to zero)."
            },
            {
                "name": "Amplitude",
                "type": "float",
                "desc": "Set the amplitude of beam noise (0 - 255)."
            }
        ],
        "outputs": [
            {
                "name": "OnTouchedByEntity",
                "type": "void",
                "desc": "Fired when an entity touches the beam. Only fired if the entity passes the 'Touch Type' choice."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "env_effectscript",
        "desc": "An entity that allows you to script special visual effects via a script file.",
        "bases": [
            "BaseEntityAnimating",
            "Angles"
        ],
        "keyvalues": [
            {
                "name": "Script Model",
                "key": "model",
                "type": "studio",
                "default": "",
                "desc": "Model to use for animation sequences."
            },
            {
                "name": "Script File",
                "key": "scriptfile",
                "type": "string",
                "default": "scripts/effects/testeffect.txt",
                "desc": "Name of the script to use for this model."
            }
        ],
        "inputs": [
            {
                "name": "SetSequence",
                "type": "string",
                "desc": "Sets the script model's sequence."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_glow",
        "desc": "Obsolete older name for env_sprite.",
        "bases": [
            "env_sprite"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_laser",
        "desc": "An entity that creates a laser beam between itself and a given target.",
        "bases": [
            "BaseBeam"
        ],
        "keyvalues": [
            {
                "name": "Target of Laser",
                "key": "lasertarget",
                "type": "target_destination",
                "default": "",
                "desc": "Name of entity, or entities, to strike at. The target is randomly chosen if there are multiple entities matching the given name."
            },
            {
                "name": "Width of Beam",
                "key": "width",
                "type": "float",
                "default": "2",
                "desc": "The width of the laser beam, in pixels."
            },
            {
                "name": "End Sprite",
                "key": "endsprite",
                "type": "sprite",
                "default": "",
                "desc": "If specified, this sprite will be drawn at the end of the laser beam."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start On": {
                        "default": false,
                        "num": 1
                    },
                    "[16] StartSparks": {
                        "default": false,
                        "num": 16
                    },
                    "[32] EndSparks": {
                        "default": false,
                        "num": 32
                    },
                    "[64] Decal End": {
                        "default": false,
                        "num": 64
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_portal_laser",
        "desc": " A Thermal Discouragement Beam that will move through portals, redirect using Redirection Cubes and reflect off of Reflection Gel.",
        "bases": [
            "BaseEntityAnimating"
        ],
        "keyvalues": [
            {
                "name": "No placement helper",
                "key": "noplacementhelper",
                "type": "boolean",
                "default": "No",
                "desc": "Don't automatically create a portal placement helper at the end of the laser."
            },
            {
                "name": "Laser Position",
                "key": "model",
                "type": "choices",
                "default": "Centered (models/props/laser_emitter_center.mdl)",
                "desc": "Is the laser offset? (You can also add a custom model here.)",
                "choices": {
                    "Centered": "models/props/laser_emitter_center.mdl",
                    "Offset": "models/props/laser_emitter.mdl"
                }
            },
            {
                "name": "Start Disabled",
                "key": "startstate",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Lethal",
                "key": "lethaldamage",
                "type": "choices",
                "default": "Non-lethal (0)",
                "desc": "Instant kill on contact. Buggy when redirected through cubes/portals.",
                "choices": {
                    "Non-lethal": "0",
                    "Lethal": "1"
                }
            },
            {
                "name": "Should auto aim",
                "key": "autoaimenabled",
                "type": "boolean",
                "default": "No",
                "desc": "Allow the laser to bend to activate catchers or relays."
            },
            {
                "name": "Skin Type",
                "key": "skin",
                "type": "choices",
                "default": "Clean (0)",
                "desc": "",
                "choices": {
                    "Clean": "0",
                    "Rusted": "1"
                }
            },
            {
                "name": "Laser Beam Color",
                "key": "beamcolor",
                "type": "choices",
                "default": "Default Red (255 0 0 255)",
                "desc": "The color of the laser. You can also specify a custom RGBA color here.",
                "choices": {
                    "White": "255 255 255 255",
                    "Default Red": "255 0 0 255",
                    "Lethal Green": "100 255 100 255",
                    "Blue": "32 112 202 255",
                    "Yellow": "255 212 91 255",
                    "Pink": "212 60 146 255",
                    "Dark Green": "65 97 0 255"
                }
            },
            {
                "name": "Player Collision",
                "key": "disableplayercollision",
                "type": "choices",
                "default": "Default Behavior",
                "desc": "Override to disable player collision for this laser. If set to 0 (default), sv_player_collide_with_laser will determine whether or not to collide. If 1, laser collision will be disabled.",
                "choices": {
                    "Default Behavior": "0",
                    "Force Off": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the laser on and off."
            },
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turn the laser on."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Turn the laser off."
            },
            {
                "name": "SetBeamColor",
                "type": "color255",
                "desc": "Changes the laser colour."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_portal_path_track",
        "desc": "An unused variant of path_track, presumably intended for Unstationary Scaffolds. It produces a beam between each node, as well as (somewhat buggy) endpoint effects which are based on the entity's angles.",
        "bases": [
            "path_track"
        ],
        "keyvalues": [
            {
                "name": "Scale Track FX",
                "key": "track_beam_scale",
                "type": "float",
                "default": "0",
                "desc": "The amount to scale the track FX size. Appears non-functional."
            },
            {
                "name": "Scale Endpoint FX",
                "key": "end_point_scale",
                "type": "float",
                "default": "0",
                "desc": "The amount to scale the endpoint FX size. Appears non-functional."
            },
            {
                "name": "Fade Out Endpoint",
                "key": "end_point_fadeout",
                "type": "float",
                "default": "0",
                "desc": "Amount of time to fade out the endpoint FX. Appears non-functional."
            },
            {
                "name": "Fade In Endpoint",
                "key": "end_point_fadein",
                "type": "float",
                "default": "0",
                "desc": "Amount of time to fade in the endpoint FX. Appears non-functional."
            }
        ],
        "inputs": [
            {
                "name": "ActivateTrackFX",
                "type": "void",
                "desc": "Enable the track beam FX."
            },
            {
                "name": "ActivateEndPointFX",
                "type": "void",
                "desc": "Enable the endpoint FX. Appears non-functional."
            },
            {
                "name": "DeactivateTrackFX",
                "type": "void",
                "desc": "Disable the track beam FX."
            },
            {
                "name": "DeactivateEndPointFX",
                "type": "void",
                "desc": "Disable the endpoint FX. Appears non-functional."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_rotorshooter",
        "desc": "An entity that creates gibs when it's within the influence of a helicopter's rotor wash.",
        "bases": [
            "gibshooterbase"
        ],
        "keyvalues": [
            {
                "name": "Model",
                "key": "shootmodel",
                "type": "studio",
                "default": "",
                "desc": "Thing to shoot out.  Can be a .mdl or a .vmt."
            },
            {
                "name": "Material Sound",
                "key": "shootsounds",
                "type": "choices",
                "default": "None (-1)",
                "desc": "",
                "choices": {
                    "None": "-1",
                    "Glass": "0",
                    "Wood": "1",
                    "Metal": "2",
                    "Flesh": "3",
                    "Concrete": "4"
                }
            },
            {
                "name": "Simulation Type",
                "key": "simulation",
                "type": "choices",
                "default": "Point (0)",
                "desc": "",
                "choices": {
                    "Point": "0",
                    "Physics": "1",
                    "Ragdoll": "2"
                }
            },
            {
                "name": "Gib Skin",
                "key": "skin",
                "type": "integer",
                "default": "0",
                "desc": "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin on all gibs produced by this shooter."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[2] On fire": {
                        "default": false,
                        "num": 2
                    }
                }
            },
            {
                "name": "Time Under Rotor",
                "key": "rotortime",
                "type": "float",
                "default": "1",
                "desc": "The average time it has to be under the rotor before it shoots a gib."
            },
            {
                "name": "Time variance",
                "key": "rotortimevariance",
                "type": "float",
                "default": "0.3",
                "desc": "The random amount to vary the time it has to be under the rotor before it shoots a gib."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_shooter",
        "desc": "An entity that shoots models, or sprites, out of its origin.",
        "bases": [
            "gibshooterbase"
        ],
        "keyvalues": [
            {
                "name": "Model",
                "key": "shootmodel",
                "type": "studio",
                "default": "",
                "desc": "Thing to shoot out. Can be a .mdl or a .vmt."
            },
            {
                "name": "Material Sound",
                "key": "shootsounds",
                "type": "choices",
                "default": "None (-1)",
                "desc": "",
                "choices": {
                    "None": "-1",
                    "Glass": "0",
                    "Wood": "1",
                    "Metal": "2",
                    "Flesh": "3",
                    "Concrete": "4"
                }
            },
            {
                "name": "Gib Skin",
                "key": "skin",
                "type": "integer",
                "default": "0",
                "desc": "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin on all gibs produced by this shooter."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[2] On fire": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Strict remove after lifetime": {
                        "default": false,
                        "num": 4
                    }
                }
            },
            {
                "name": "Disable Shadows on Gibs",
                "key": "nogibshadows",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Gib gravity scale",
                "key": "gibgravityscale",
                "type": "float",
                "default": "1",
                "desc": "ONLY WORKS FOR POINT GIBS. This field allows you to scale gravity so that gibs fall faster, slower, or not at all."
            },
            {
                "name": "Mass override",
                "key": "massoverride",
                "type": "float",
                "default": "0",
                "desc": "EPISODIC ONLY. Specify an arbitrary mass for the gibs emitted by me."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_soundscape_triggerable",
        "desc": "An entity that works like env_soundscape except that it works in conjunction with trigger_soundscape to determine when a player hears it.",
        "bases": [
            "env_soundscape"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "Play",
                "type": "void",
                "desc": "Play the soundscape."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_sprite_clientside",
        "desc": "An entity that controls the drawing of a sprite in the world, created clientside so cannot be parented to moving things and will use up no network bandwidth or CPU.",
        "bases": [
            "env_sprite"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "env_sprite_oriented",
        "desc": "A env_sprite that allows orientation.",
        "bases": [
            "env_sprite"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_activator_class",
        "desc": "A filter that filters by the class name of the activator.",
        "bases": [
            "filter_base"
        ],
        "keyvalues": [
            {
                "name": "Filter Classname",
                "key": "filterclass",
                "type": "string",
                "default": "",
                "desc": "The class name to filter by. If the filter mode is Allow, only entities whose class name matches the given string will pass the filter. If the filter mode is Disallow, all entities EXCEPT those whose class name matches the given string will pass the filter."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_activator_context",
        "desc": "A filter that filters by a context on the activator.",
        "bases": [
            "filter_base"
        ],
        "keyvalues": [
            {
                "name": "Filter Context",
                "key": "responsecontext",
                "type": "string",
                "default": "",
                "desc": "The context(s) to filter by. Syntax is 'key:value,key:value'. Values in this field can use wilcards. For example, if this filter contains 'lastname:*', it will pass any entity with the context 'lastname', regardless of its value. Wildcards do not apply to context names and you cannot define the same context multiple times, but inputs like AddContext or RemoveContext can be used to add to the filter context."
            },
            {
                "name": "Pass if entity has any of these contexts",
                "key": "any",
                "type": "boolean",
                "default": "No",
                "desc": "Should this filter only pass if the entity contains all of these contexts or can it pass if the entity has at least one of them?"
            }
        ],
        "inputs": [
            {
                "name": "AddContext",
                "type": "string",
                "desc": "Adds a context to this fitler's list of response contexts. The format should be 'key:value'."
            },
            {
                "name": "RemoveContext",
                "type": "string",
                "desc": "Remove a context from this filter's list of response contexts. The name should match the 'key' of a previously added context."
            },
            {
                "name": "ClearContext",
                "type": "void",
                "desc": "Removes all contexts in this filter's list of response contexts."
            }
        ],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_activator_involume",
        "desc": "A filter that tests whether the activator is within a volume.",
        "bases": [
            "filter_base"
        ],
        "keyvalues": [
            {
                "name": "Volume",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The volume to be tested with. This filter passes if the activator is within this volume. Intended to be a brush entity. (e.g. a trigger)"
            },
            {
                "name": "Volume Tester",
                "key": "tester",
                "type": "target_destination",
                "default": "!activator",
                "desc": "Who should be in the volume for the filter to pass?"
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_activator_keyfield",
        "desc": "A filter that filters by the activator's keyfields.",
        "bases": [
            "filter_base"
        ],
        "keyvalues": [
            {
                "name": "Key",
                "key": "keyname",
                "type": "string",
                "default": "",
                "desc": "The key name to filter by. Please note that certain keyvalues, particularly targetnames and base values related to clientside rendering (e.g. render mode), cannot be found by this filter."
            },
            {
                "name": "Value (Optional)",
                "key": "value",
                "type": "string",
                "default": "",
                "desc": "The key value to filter by. If empty, the filter will pass if the entity just has the keyfield."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_activator_mass_greater",
        "desc": "A filter that filters by the mass of the activator.",
        "bases": [
            "filter_base"
        ],
        "keyvalues": [
            {
                "name": "Filter Mass",
                "key": "filtermass",
                "type": "float",
                "default": "",
                "desc": "The mass to filter by. If the filter mode is Allow, only entities whose mass is greater than the give float will pass the filter. If the filter mode is Disallow, all entities EXCEPT those whose mass is greater than the given float will pass the filter."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_activator_model",
        "desc": "A filter that filters by the model of the activator.",
        "bases": [
            "filter_base"
        ],
        "keyvalues": [
            {
                "name": "Filter Model",
                "key": "model",
                "type": "studio",
                "default": "",
                "desc": "The model to filter by. If the filter mode is Allow, only entities whose model matches the given string will pass the filter. If the filter mode is Disallow, all entities EXCEPT those whose model matches the string will pass the filter."
            },
            {
                "name": "Skin",
                "key": "skin",
                "type": "string",
                "default": "-1",
                "desc": "Some models have multiple versions of their textures, called skins. Use this if you want to filter by skins as well. If you want any skin to be allowed, be sure to leave this at -1! It might automatically change when you choose a model."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_activator_name",
        "desc": "A filter that filters by the name of the activator.",
        "bases": [
            "filter_base"
        ],
        "keyvalues": [
            {
                "name": "Filter Name",
                "key": "filtername",
                "type": "target_destination",
                "default": "",
                "desc": "The name to filter by. If the filter mode is Allow, only entities whose name matches the given string will pass the filter. If the filter mode is Disallow, all entities EXCEPT those whose name matches the string will pass the filter."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_activator_surfacedata",
        "desc": "A filter that tests the activator's surface data.",
        "bases": [
            "filter_base"
        ],
        "keyvalues": [
            {
                "name": "Surface",
                "key": "filtersurfaceprop",
                "type": "choices",
                "default": "",
                "desc": "The surface to test with.",
                "choices": {
                    "Metal": "metal",
                    "Metal Grate": "metalgrate",
                    "Metal Vent": "metalvent"
                }
            },
            {
                "name": "Type",
                "key": "surfacetype",
                "type": "choices",
                "default": "Game Material (1)",
                "desc": "What to actually filter by.",
                "choices": {
                    "Surface Prop": "0",
                    "Game Material": "1"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_activator_team",
        "desc": "A filter that filters by the team of the activator.",
        "bases": [
            "filter_base"
        ],
        "keyvalues": [
            {
                "name": "Filter Team Number",
                "key": "filterteam",
                "type": "integer",
                "default": "0",
                "desc": "The team number to filter by. If the filter mode is Allow, only entities whose team number matches the given team will pass the filter. If the filter mode is Disallow, all entities EXCEPT those whose team number matches the given team will pass the filter."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_damage_type",
        "desc": "A damage filter that filters by the type of damage inflicted. This can only be used as a damage filter, not as an activator filter.",
        "bases": [
            "filter_base"
        ],
        "keyvalues": [
            {
                "name": "Damage Type",
                "key": "damagetype",
                "type": "choices",
                "default": "Blast (64)",
                "desc": "The damage type to filter by. If the filter mode is Allow, only damage types that match will pass the filter. If the filter mode is Disallow, all damage types EXCEPT those who match will pass the filter.",
                "choices": {
                    "Generic": "0",
                    "Crush": "1",
                    "Bullet": "2",
                    "Slash": "4",
                    "Burn": "8",
                    "Fall": "32",
                    "Blast": "64",
                    "Club": "128",
                    "Shock": "256",
                    "Sonic": "512",
                    "Energy Beam": "1024",
                    "Drown": "16384",
                    "Paralyse": "32768",
                    "Nerve Gas": "65536",
                    "Poison": "131072",
                    "Radiation": "262144",
                    "Drown Recover": "524288",
                    "Acid": "1048576",
                    "Slow Burn": "2097152",
                    "Remove No Ragdoll": "4194304",
                    "Plasma": "16777216",
                    "Airboat (gun)": "33554432",
                    "Dissolve": "67108864",
                    "Blast Surface": "134217728",
                    "Direct": "268435456",
                    "Buckshot": "536870912"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_enemy",
        "desc": "A filter that filters a potential enemy entity by a set of criteria.",
        "bases": [
            "filter_base"
        ],
        "keyvalues": [
            {
                "name": "Name/Classname",
                "key": "filtername",
                "type": "string",
                "default": "",
                "desc": "The classname or entity name to filter by. If the filter mode is Allow, only entities whose class name matches the given string will pass the filter. If the filter mode is Disallow, all entities EXCEPT those whose class name matches the given string will pass the filter."
            },
            {
                "name": "Radius",
                "key": "filter_radius",
                "type": "float",
                "default": "0",
                "desc": "Radius by which to test the proximity of the enemy.  If the filter mode is Allow, only entities whose distance is equal to or closer than the radius will pass the filter. If the filter mode is Disallow, all entities outside the radius will pass the filter."
            },
            {
                "name": "Outer Radius",
                "key": "filter_outer_radius",
                "type": "float",
                "default": "0",
                "desc": "Enemies outside this radius are considered invalid if Allow is set and valid if Disallow is set."
            },
            {
                "name": "Max Squadmates Per Enemy",
                "key": "filter_max_per_enemy",
                "type": "integer",
                "default": "0",
                "desc": "Maximum number of squadmates allowed to target any given entity."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Do not lose target if already aquired but filter failed.": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_multi",
        "desc": "A filter that tests the activator against multiple filters. This allows you to build more complex filters, such as 'Allow anyone on Team 1 who is also class engineer', or 'Allow everyone except classes npc_zombie and npc_headcrab'.",
        "bases": [
            "filter_base"
        ],
        "keyvalues": [
            {
                "name": "Logic Type",
                "key": "filtertype",
                "type": "choices",
                "default": "AND (all filters must pass) (0)",
                "desc": "",
                "choices": {
                    "AND (all filters must pass)": "0",
                    "OR (any filter must pass)": "1"
                }
            },
            {
                "name": "Negate Outcome",
                "key": "negated",
                "type": "boolean",
                "default": "No",
                "desc": "Whether to negate the result of the subfilters, after combining them using the Logic Type chosen.\nNegating the outcome using the AND logic type means that any subfilter must fail for this filter to pass.\nNegating the outcome using the OR logic type means that all subfilters must fail for this filter to pass."
            },
            {
                "name": "Filter 1",
                "key": "filter01",
                "type": "filterclass",
                "default": "",
                "desc": "Activator filter to test."
            },
            {
                "name": "Filter 2",
                "key": "filter02",
                "type": "filterclass",
                "default": "",
                "desc": "Activator filter to test."
            },
            {
                "name": "Filter 3",
                "key": "filter03",
                "type": "filterclass",
                "default": "",
                "desc": "Activator filter to test."
            },
            {
                "name": "Filter 4",
                "key": "filter04",
                "type": "filterclass",
                "default": "",
                "desc": "Activator filter to test."
            },
            {
                "name": "Filter 5",
                "key": "filter05",
                "type": "filterclass",
                "default": "",
                "desc": "Activator filter to test."
            },
            {
                "name": "Filter 6",
                "key": "filter06",
                "type": "filterclass",
                "default": "",
                "desc": "Activator filter to test."
            },
            {
                "name": "Filter 7",
                "key": "filter07",
                "type": "filterclass",
                "default": "",
                "desc": "Activator filter to test."
            },
            {
                "name": "Filter 8",
                "key": "filter08",
                "type": "filterclass",
                "default": "",
                "desc": "Activator filter to test."
            },
            {
                "name": "Filter 9",
                "key": "filter09",
                "type": "filterclass",
                "default": "",
                "desc": "Activator filter to test."
            },
            {
                "name": "Filter 10",
                "key": "filter10",
                "type": "filterclass",
                "default": "",
                "desc": "Activator filter to test."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_paint_power",
        "desc": "A filter that filters based on the current paint power of the entity.",
        "bases": [
            "filter_base"
        ],
        "keyvalues": [
            {
                "name": "Paint Type",
                "key": "paint_type",
                "type": "choices",
                "default": "(1) Repulsion Gel (0)",
                "desc": "The type of Gel to filter by. Used only in Colour mode.",
                "choices": {
                    "(1) Repulsion Gel": "0",
                    "(2) Reflection Gel": "1",
                    "(3) Propulsion Gel": "2",
                    "(4) Conversion Gel": "3",
                    "(5) Cleansing Gel": "4",
                    "(6) Adhesion Gel": "5"
                }
            },
            {
                "name": "Filter Mode",
                "key": "paint_mode",
                "type": "choices",
                "default": "Colour (0)",
                "desc": "The filter mode to filter the painted power by.",
                "choices": {
                    "Colour": "0",
                    "Paintable": "1",
                    "Unpaintable": "2"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_player_held",
        "desc": "A filter that only accepts objects held by the player.",
        "bases": [
            "filter_base"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "FILTER",
        "classname": "filter_velocity",
        "desc": "Filter that checks the player's velocity",
        "bases": [
            "filter_base"
        ],
        "keyvalues": [
            {
                "name": "Mode",
                "key": "mode",
                "type": "choices",
                "default": "Total Velocity (0)",
                "desc": "Set which mode to use for velocity comparisons",
                "choices": {
                    "Total Velocity": "0",
                    "Per-axis": "1"
                }
            },
            {
                "name": "Above/Below",
                "key": "above",
                "type": "choices",
                "default": "Above (1)",
                "desc": "Sets whether to check if the player goes above or below the given velocity.",
                "choices": {
                    "Below": "0",
                    "Above": "1"
                }
            },
            {
                "name": "Enable Vertical",
                "key": "enablevertical",
                "type": "boolean",
                "default": "No",
                "desc": "Check vertical velocity (total velocity mode only)"
            },
            {
                "name": "Enable Horizontal",
                "key": "enablehorizontal",
                "type": "boolean",
                "default": "No",
                "desc": "Check horizontal velocity (total velocity mode only)"
            },
            {
                "name": "Vertical velocity",
                "key": "verticalvelocity",
                "type": "float",
                "default": "500",
                "desc": "The amount of units per second for vertical (Z axis) speed."
            },
            {
                "name": "Horizontal velocity",
                "key": "horizontalvelocity",
                "type": "float",
                "default": "1000",
                "desc": "The amount of units per second for horizontal (XY axis) speed."
            },
            {
                "name": "Use Absolute Value",
                "key": "ignoresign",
                "type": "boolean",
                "default": "No",
                "desc": "Whether to check the absolute value of the velocity components (per-axis mode only)"
            },
            {
                "name": "Per-axis Velocity",
                "key": "velocityvector",
                "type": "vector",
                "default": "0 0 0",
                "desc": "The velocity vector for per-axis mode"
            },
            {
                "name": "Per-axis Enable",
                "key": "velocityaxes",
                "type": "vector",
                "default": "0 0 0",
                "desc": "Which axes to use when checking velocity, zero means the corresponding axis is ignored (per-axis mode only)"
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_brush",
        "desc": "An brush built entity with various features.",
        "bases": [
            "BaseEntityVisBrush",
            "EnableDisable",
            "Toggle"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[2] Ignore player +USE": {
                        "default": true,
                        "num": 2
                    }
                }
            },
            {
                "name": "Solidity",
                "key": "solidity",
                "type": "choices",
                "default": "Toggle with Enable/Disable (0)",
                "desc": "How the solidity changes.",
                "choices": {
                    "Toggle with Enable/Disable": "0",
                    "Never Solid": "1",
                    "Always Solid": "2"
                }
            },
            {
                "name": "NPC class excluded from collisions",
                "key": "excludednpc",
                "type": "string",
                "default": "",
                "desc": "If an NPC classname is specified here, NPCs of that type won't collide with these brushes. In Episodic, you may also specify an individual entity's name."
            },
            {
                "name": "Invert NPC class exclusion",
                "key": "invert_exclusion",
                "type": "boolean",
                "default": "No",
                "desc": "If set, then the excluded NPC class will consider this brush solid, and all other NPC classes will consider it non-solid."
            },
            {
                "name": "Solid Type",
                "key": "solidbsp",
                "type": "choices",
                "default": "BSP (1)",
                "desc": "How to calculate collisions. BSP is more rudimentary but allows more stable collision with players.",
                "choices": {
                    "VPhysics": "0",
                    "BSP": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "SetExcluded",
                "type": "string",
                "desc": "Change the NPC class excluded from collisions."
            },
            {
                "name": "SetInvert",
                "type": "boolean",
                "desc": "Set the state of inversion for NPC class exclusion (0 or 1)."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle visibility/solidity of this brush."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_button",
        "desc": "A brush entity that's designed to be used for a player-useable button. When used by the player, it moves to a pressed position. Do not lock while pressed; it will not return when unlocked.",
        "bases": [
            "BaseEntityVisBrush",
            "Button"
        ],
        "keyvalues": [
            {
                "name": "Move Direction (Pitch Yaw Roll)",
                "key": "movedir",
                "type": "angle",
                "default": "0 0 0",
                "desc": "Specifies the direction of motion to move when the button is used."
            },
            {
                "name": "Speed",
                "key": "speed",
                "type": "float",
                "default": "5",
                "desc": "The speed that the button moves, in units per second."
            },
            {
                "name": "Health (Obsolete)",
                "key": "health",
                "type": "integer",
                "default": "0",
                "desc": "Legacy method of specifying whether or not the button can be shot to activate it. Use the 'Damage Activates' spawnflag instead."
            },
            {
                "name": "Lip",
                "key": "lip",
                "type": "float",
                "default": "0",
                "desc": "The amount the button will keep overlapping with the original position. The distance moved = the size of the brush on the movement axis - lip."
            },
            {
                "name": "Delay Before Reset (-1 stay)",
                "key": "wait",
                "type": "float",
                "default": "3",
                "desc": "Amount of time, in seconds, after the button has been pressed before it returns to the starting position. Once it has returned, it can be used again. If the value is set to -1, the button never returns."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Don't move": {
                        "default": false,
                        "num": 1
                    },
                    "[32] Toggle": {
                        "default": false,
                        "num": 32
                    },
                    "[256] Touch Activates": {
                        "default": false,
                        "num": 256
                    },
                    "[512] Damage Activates": {
                        "default": false,
                        "num": 512
                    },
                    "[1024] Use Activates": {
                        "default": true,
                        "num": 1024
                    },
                    "[2048] Starts locked": {
                        "default": false,
                        "num": 2048
                    },
                    "[4096] Sparks": {
                        "default": false,
                        "num": 4096
                    },
                    "[16384] Non-solid": {
                        "default": false,
                        "num": 16384
                    }
                }
            },
            {
                "name": "Sound Name",
                "key": "customsound",
                "type": "sound",
                "default": "",
                "desc": "The .wav(!!) sound file to use. (Only used when old 'sounds' keyvalue isn't set)"
            },
            {
                "name": "Use Look-At Limit",
                "key": "min_use_angle",
                "type": "float",
                "default": "0.8",
                "desc": "Limit the usable look-at-angle. -1 is looking directly away, 0 is looking perpendicular, 1 is looking directly at."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_conveyor",
        "desc": "A brush entity that functions as a conveyor belt, with a moving surface. The surface material should have a ConveyorScroll Material Proxy, to synchronize the material movement and push effect.",
        "bases": [
            "BaseEntityVisBrush"
        ],
        "keyvalues": [
            {
                "name": "Move Direction (Pitch Yaw Roll)",
                "key": "movedir",
                "type": "angle",
                "default": "0 0 0",
                "desc": "The direction conveyor moves."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] No Push": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Not Solid": {
                        "default": false,
                        "num": 2
                    }
                }
            },
            {
                "name": "Conveyor Speed",
                "key": "speed",
                "type": "float",
                "default": "100",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "ToggleDirection",
                "type": "void",
                "desc": "Change direction of conveyor."
            },
            {
                "name": "SetSpeed",
                "type": "float",
                "desc": "Sets Conveyor Speed."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_dustcloud",
        "desc": "A brush entity that spawns a translucent dust cloud within its volume.",
        "bases": [
            "BaseDustParticleSpawner"
        ],
        "keyvalues": [
            {
                "name": "Minimum Particle Size",
                "key": "sizemin",
                "type": "string",
                "default": "100",
                "desc": "This value determines the minimum size the particles can be."
            },
            {
                "name": "Maximum Particle Size",
                "key": "sizemax",
                "type": "string",
                "default": "200",
                "desc": "This value determines the maximum size the particles can be."
            },
            {
                "name": "Particle Translucency (0 - 255)",
                "key": "alpha",
                "type": "integer",
                "default": "30",
                "desc": "Translucency of the particles."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_dustmotes",
        "desc": "A brush entity that spawns sparkling dust motes within its volume.",
        "bases": [
            "BaseDustParticleSpawner"
        ],
        "keyvalues": [
            {
                "name": "Minimum Particle Size",
                "key": "sizemin",
                "type": "string",
                "default": "10",
                "desc": "This value determines the minimum size the particles can be."
            },
            {
                "name": "Maximum Particle Size",
                "key": "sizemax",
                "type": "string",
                "default": "20",
                "desc": "This value determines the maximum size the particles can be."
            },
            {
                "name": "Particle Translucency (0 - 255)",
                "key": "alpha",
                "type": "integer",
                "default": "255",
                "desc": "Translucency of the particles."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_guntarget",
        "desc": "This is a moving target that moves along a path of path_tracks. It can be shot and killed.",
        "bases": [
            "BaseEntityVisBrush"
        ],
        "keyvalues": [
            {
                "name": "Speed (units per second)",
                "key": "speed",
                "type": "integer",
                "default": "100",
                "desc": "The speed at which the target moves along its path."
            },
            {
                "name": "Spawn Track",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The name of the first path_track entity in the path that this target should follow."
            },
            {
                "name": "Damage to Take",
                "key": "health",
                "type": "integer",
                "default": "0",
                "desc": "The amount of damage taken before this target is killed."
            }
        ],
        "inputs": [
            {
                "name": "Start",
                "type": "void",
                "desc": "Start the target moving."
            },
            {
                "name": "Stop",
                "type": "void",
                "desc": "Stop the target from moving."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the target between moving and stopped."
            }
        ],
        "outputs": [
            {
                "name": "OnDeath",
                "type": "void",
                "desc": "Fires when the target is killed."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "func_illusionary",
        "desc": "A brush that is always non-solid. Legacy support, see func_brush. However, if func_brush's added features are not needed this can be used for small memory savings.",
        "bases": [
            "BaseEntityVisBrush"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_lod",
        "desc": "Brush-built model that fades out over a specified distance. Useful for creating world detail that doesn't need to be drawn far away, for performance reasons.",
        "bases": [
            "BaseEntityVisBrush"
        ],
        "keyvalues": [
            {
                "name": "Solid",
                "key": "solid",
                "type": "choices",
                "default": "Solid (0)",
                "desc": "Set whether or not these brushes should collide with other entities.",
                "choices": {
                    "Solid": "0",
                    "Nonsolid": "1"
                }
            },
            {
                "name": "Disappear Min Distance",
                "key": "disappearmindist",
                "type": "integer",
                "default": "2000",
                "desc": "Distance at which these brushes should starting fade out."
            },
            {
                "name": "Disappear Max Distance",
                "key": "disappearmaxdist",
                "type": "integer",
                "default": "2200",
                "desc": "Distance at which these brushes should be completely faded out."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_movelinear",
        "desc": "A brush entity that moves linearly along a given distance, in a given direction.",
        "bases": [
            "BaseEntityVisBrush",
            "Angles"
        ],
        "keyvalues": [
            {
                "name": "Move Direction (Pitch Yaw Roll)",
                "key": "movedir",
                "type": "angle",
                "default": "0 0 0",
                "desc": "The direction the brushes will move, when told to open or passed a positive SetPosition value."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[8] Not Solid": {
                        "default": false,
                        "num": 8
                    }
                }
            },
            {
                "name": "Start Position",
                "key": "startposition",
                "type": "float",
                "default": "0",
                "desc": "Position of brush when spawned, where 0 is the starting position and 1 is the opened position. Negatives will position it in the opposite direction."
            },
            {
                "name": "Speed",
                "key": "speed",
                "type": "float",
                "default": "100",
                "desc": "The speed that the brush moves, in units per second."
            },
            {
                "name": "Move Distance",
                "key": "movedistance",
                "type": "float",
                "default": "100",
                "desc": "The distance from the starting point that the brush should move."
            },
            {
                "name": "Block Damage",
                "key": "blockdamage",
                "type": "float",
                "default": "0",
                "desc": "The amount of damage to do to any entity that blocks the brushes, per frame."
            },
            {
                "name": "Start Sound",
                "key": "startsound",
                "type": "sound",
                "default": "",
                "desc": "Sound played when the brush starts moving."
            },
            {
                "name": "Stop Sound",
                "key": "stopsound",
                "type": "sound",
                "default": "",
                "desc": "Sound played when the brush stops moving."
            },
            {
                "name": "Solid Type",
                "key": "solidbsp",
                "type": "choices",
                "default": "BSP (1)",
                "desc": "How to calculate collisions. BSP is more rudimentarty but allows more stable collision with players.",
                "choices": {
                    "VPhysics": "0",
                    "BSP": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "Open",
                "type": "void",
                "desc": "Move the brush to the end position (starting position + (move direction * move distance))."
            },
            {
                "name": "Close",
                "type": "void",
                "desc": "Move the brush to the starting position."
            },
            {
                "name": "SetPosition",
                "type": "string",
                "desc": "Move the brush to a specific position, where 0 is the starting position and 1 is the opened position. Accepts any value, with negatives moving in the opposite direction."
            },
            {
                "name": "SetSpeed",
                "type": "float",
                "desc": "Set the speed and update immediately."
            }
        ],
        "outputs": [
            {
                "name": "OnFullyOpen",
                "type": "void",
                "desc": "Fired when the brush reaches the end position (starting position + (move direction * move distance))."
            },
            {
                "name": "OnFullyClosed",
                "type": "void",
                "desc": "Fired when the brush reaches the starting position."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "func_platrot",
        "desc": "A brush entity that moves vertically, and can rotate while doing so.",
        "bases": [
            "BaseEntityVisBrush"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Toggle": {
                        "default": true,
                        "num": 1
                    },
                    "[64] X Axis": {
                        "default": false,
                        "num": 64
                    },
                    "[128] Y Axis": {
                        "default": false,
                        "num": 128
                    }
                }
            },
            {
                "name": "Movement Sound",
                "key": "noise1",
                "type": "sound",
                "default": "",
                "desc": "The sound to play when the brush moves."
            },
            {
                "name": "Stop Sound",
                "key": "noise2",
                "type": "sound",
                "default": "",
                "desc": "The sound to play when the brush stops moving."
            },
            {
                "name": "Speed of Rotation",
                "key": "speed",
                "type": "integer",
                "default": "50",
                "desc": "Speed at which the brush rotates, in degrees per second."
            },
            {
                "name": "Travel Altitude",
                "key": "height",
                "type": "integer",
                "default": "0",
                "desc": "The vertical distance from the starting position that this platform moves. If negative, the platform will lower."
            },
            {
                "name": "Spin amount",
                "key": "rotation",
                "type": "integer",
                "default": "0",
                "desc": "The amount this platform should rotate as it moves, in degrees."
            }
        ],
        "inputs": [
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggles the platform's state."
            },
            {
                "name": "GoUp",
                "type": "void",
                "desc": "Tells the platform to go up."
            },
            {
                "name": "GoDown",
                "type": "void",
                "desc": "Tells the platform to go down."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_portalled",
        "desc": "Fires outputs when the player teleports through a portal in its volume.",
        "bases": [
            "func_portal_detector"
        ],
        "keyvalues": [
            {
                "name": "Fire On Departure",
                "key": "fireondeparture",
                "type": "boolean",
                "default": "No",
                "desc": "Fire when the entity is entering this portal."
            },
            {
                "name": "Fire On Arrival",
                "key": "fireonarrival",
                "type": "boolean",
                "default": "No",
                "desc": "Fire when the entity is exiting this portal."
            },
            {
                "name": "Player",
                "key": "fireonplayer",
                "type": "boolean",
                "default": "No",
                "desc": "Fire when a player has portalled. Entities don't get checked, so this is useless to change."
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnEntityPrePortalled",
                "type": "void",
                "desc": "Fires when the entity is about to portal."
            },
            {
                "name": "OnEntityPostPortalled",
                "type": "void",
                "desc": "Fires when the entity is done portalling."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "func_rot_button",
        "desc": "A brush entity that's designed to be used for a rotating player-useable button. When used by the player, it rotates to a pressed position.",
        "bases": [
            "BaseEntityVisBrush",
            "MasterEnt",
            "Button"
        ],
        "keyvalues": [
            {
                "name": "Speed",
                "key": "speed",
                "type": "integer",
                "default": "50",
                "desc": "The speed that the button rotates, in degrees per second."
            },
            {
                "name": "Health (Obsolete)",
                "key": "health",
                "type": "integer",
                "default": "0",
                "desc": "Legacy method of specifying whether or not the button can be shot to activate it. Use the 'Damage Activates' spawnflag instead."
            },
            {
                "name": "Delay Before Reset (-1 stay)",
                "key": "wait",
                "type": "integer",
                "default": "3",
                "desc": "Amount of time, in seconds, after the button has been pressed before it returns to the starting position. Once it has returned, it can be used again. If the value is set to -1, the button never returns."
            },
            {
                "name": "Distance (deg)",
                "key": "distance",
                "type": "integer",
                "default": "90",
                "desc": "The amount, in degrees, that the button should rotate when it's pressed."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Not solid": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Reverse Direction (Clockwise)": {
                        "default": false,
                        "num": 2
                    },
                    "[32] Toggle": {
                        "default": false,
                        "num": 32
                    },
                    "[64] X Axis": {
                        "default": false,
                        "num": 64
                    },
                    "[128] Y Axis": {
                        "default": false,
                        "num": 128
                    },
                    "[256] Touch Activates": {
                        "default": false,
                        "num": 256
                    },
                    "[512] Damage Activates": {
                        "default": false,
                        "num": 512
                    },
                    "[1024] Use Activates": {
                        "default": false,
                        "num": 1024
                    },
                    "[2048] Starts locked": {
                        "default": false,
                        "num": 2048
                    },
                    "[4096] Sparks": {
                        "default": false,
                        "num": 4096
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_rotating",
        "desc": "A rotating brush entity.",
        "bases": [
            "BaseEntityVisBrush",
            "Origin",
            "Angles"
        ],
        "keyvalues": [
            {
                "name": "Max Rotation Speed",
                "key": "maxspeed",
                "type": "integer",
                "default": "100",
                "desc": "The maximum rotation speed of the brushes, in degrees per second."
            },
            {
                "name": "Friction (0 - 100%)",
                "key": "fanfriction",
                "type": "integer",
                "default": "20",
                "desc": "The amount of rotational friction. Value must be between 0 and 100 %. Lower values make the brush speed up and slow down faster."
            },
            {
                "name": "Rotating sound WAV",
                "key": "message",
                "type": "sound",
                "default": "",
                "desc": "Sound to play while rotating."
            },
            {
                "name": "Volume (10 = loudest)",
                "key": "volume",
                "type": "integer",
                "default": "10",
                "desc": "The volume of the rotation sound."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start ON": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Reverse Direction": {
                        "default": false,
                        "num": 2
                    },
                    "[4] X Axis": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Y Axis": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Acc/Dcc": {
                        "default": false,
                        "num": 16
                    },
                    "[32] Fan Pain": {
                        "default": false,
                        "num": 32
                    },
                    "[64] Not Solid": {
                        "default": false,
                        "num": 64
                    },
                    "[128] Small Sound Radius": {
                        "default": false,
                        "num": 128
                    },
                    "[256] Medium Sound Radius": {
                        "default": false,
                        "num": 256
                    },
                    "[512] Large Sound Radius": {
                        "default": true,
                        "num": 512
                    },
                    "[1024] Client-side Animation": {
                        "default": false,
                        "num": 1024
                    }
                }
            },
            {
                "name": "Blocking Damage",
                "key": "dmg",
                "type": "integer",
                "default": "0",
                "desc": "Damage done to any entity that blocks the rotation, per frame."
            },
            {
                "name": "Solid Type",
                "key": "solidbsp",
                "type": "choices",
                "default": "BSP (1)",
                "desc": "How to calculate collisions. BSP is more rudimentarty but allows more stable collision with players.",
                "choices": {
                    "VPhysics": "0",
                    "BSP": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "SetSpeed",
                "type": "float",
                "desc": "Set the speed as a ratio of the specified Max Rotation Speed, where 0 is stopped and 1 is the Max Rotation Speed.."
            },
            {
                "name": "Start",
                "type": "void",
                "desc": "Start the rotator rotating."
            },
            {
                "name": "Stop",
                "type": "void",
                "desc": "Stop the rotator from rotating."
            },
            {
                "name": "StopAtStartPos",
                "type": "void",
                "desc": "Stop the rotator from rotating when it gets around to the start position again (on its rotation axis)."
            },
            {
                "name": "StartForward",
                "type": "void",
                "desc": "Start the rotator rotating forward at maximum speed."
            },
            {
                "name": "StartBackward",
                "type": "void",
                "desc": "Start the rotator rotating backward at maximum speed."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the rotator between rotating and not rotating."
            },
            {
                "name": "Reverse",
                "type": "void",
                "desc": "Reverse the direction of rotation of the rotator, preserving the current speed."
            },
            {
                "name": "GetSpeed",
                "type": "void",
                "desc": "Causes the func_rotating to fire its OnGetSpeed output with its current speed."
            }
        ],
        "outputs": [
            {
                "name": "OnGetSpeed",
                "type": "integer",
                "desc": "Fired when the GetSpeed input is called.  The current speed of the func_rotating is passed with this output."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "func_tank",
        "desc": "Brush Gun Turret",
        "bases": [
            "BaseTank"
        ],
        "keyvalues": [
            {
                "name": "Ammo Type",
                "key": "ammotype",
                "type": "choices",
                "default": "None ()",
                "desc": "",
                "choices": {
                    "None": "",
                    "Pistol": "Pistol",
                    "SMG1": "SMG1",
                    "AR2": "AR2",
                    "Combine Heavy Cannon": "CombineHeavyCannon",
                    "Strider Minigun": "StriderMinigun"
                }
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[8192] Ignore range when making viewcone checks": {
                        "default": false,
                        "num": 8192
                    },
                    "[256] Aiming Assistance (Player Only)": {
                        "default": false,
                        "num": 256
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_tanklaser",
        "desc": "Brush Laser Turret",
        "bases": [
            "BaseTank"
        ],
        "keyvalues": [
            {
                "name": "env_laser Entity",
                "key": "laserentity",
                "type": "target_destination",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_tankmortar",
        "desc": "Brush Mortar Turret",
        "bases": [
            "BaseTank"
        ],
        "keyvalues": [
            {
                "name": "Explosion Magnitude",
                "key": "imagnitude",
                "type": "integer",
                "default": "100",
                "desc": ""
            },
            {
                "name": "Shell travel time",
                "key": "firedelay",
                "type": "string",
                "default": "2",
                "desc": "How long after the turret fires before the shell impacts"
            },
            {
                "name": "Firing start sound",
                "key": "firestartsound",
                "type": "sound",
                "default": "",
                "desc": "Sound of the mortar firing"
            },
            {
                "name": "Firing end sound",
                "key": "fireendsound",
                "type": "sound",
                "default": "",
                "desc": ""
            },
            {
                "name": "Incoming Shell Sound",
                "key": "incomingsound",
                "type": "sound",
                "default": "",
                "desc": "Sound of the shell falling on the target"
            },
            {
                "name": "Incoming warning time",
                "key": "warningtime",
                "type": "float",
                "default": "1",
                "desc": "How long before the shell impacts to play the warning sound"
            },
            {
                "name": "Fire time variance",
                "key": "firevariance",
                "type": "float",
                "default": "0",
                "desc": "How much variability to add to fire rate (time +-)"
            }
        ],
        "inputs": [
            {
                "name": "FireAtWill",
                "type": "void",
                "desc": "Allow tank to fire next shot as soon as ready."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_tankphyscannister",
        "desc": "PhysCannister Turret",
        "bases": [
            "BaseTank"
        ],
        "keyvalues": [
            {
                "name": "Barrel Volume",
                "key": "barrel_volume",
                "type": "target_destination",
                "default": "",
                "desc": "Name of a trigger the specifies the volume in which cannisters must be placed."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_tankpulselaser",
        "desc": "Brush Pulse Laser",
        "bases": [
            "BaseTank"
        ],
        "keyvalues": [
            {
                "name": "Pulse Speed",
                "key": "pulsespeed",
                "type": "float",
                "default": "1000",
                "desc": "How fast does pulse travel"
            },
            {
                "name": "Pulse Color",
                "key": "pulsecolor",
                "type": "color255",
                "default": "255 0 0",
                "desc": "Color of the pulse"
            },
            {
                "name": "Pulse Width",
                "key": "pulsewidth",
                "type": "float",
                "default": "20",
                "desc": "Width of the pulse"
            },
            {
                "name": "Pulse Life",
                "key": "pulselife",
                "type": "float",
                "default": "2",
                "desc": "(Seconds)  How long the pulse lasts"
            },
            {
                "name": "Pulse Lag",
                "key": "pulselag",
                "type": "float",
                "default": "0.05",
                "desc": "(Seconds)  How far behind is pulse tail"
            },
            {
                "name": "Pulse Fire Sound",
                "key": "pulsefiresound",
                "type": "sound",
                "default": "",
                "desc": "Sound played when pulse fires"
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_trackchange",
        "desc": "An entity that works as a rotating/moving platform that will carry a train to a new track. It must be larger in X-Y planar area than the train, since it must contain the train within these dimensions in order to operate when the train is near it. The track will rotate around its own origin. Similar variant to this entity is func_trackautochange, however you can't trigger func_trackautochange unless the path_track is a dead end. If Auto Activate Train flag is ticked, train isn't paused at the top/bottom of the path after func_trackchange has finished it's movement. Instead, it will continue moving forward and doesn't need to be reactivated by trigger. If selected, the platform only rotates in place of it's origin without travelling specified altitude. The top and the bottom path_tracks should have their origin positioned in the same coordinates.",
        "bases": [
            "BaseEntityVisBrush"
        ],
        "keyvalues": [
            {
                "name": "Travel Altitude",
                "key": "height",
                "type": "integer",
                "default": "0",
                "desc": "Travel distance, from top to bottom. If Start at Bottom flag is selected, the travel distance won't change from bottom to top, it will only make the platform start at bottom and awaits for func_tracktrain to arrive."
            },
            {
                "name": "Spin amount",
                "key": "rotation",
                "type": "integer",
                "default": "0",
                "desc": "The amount this platform should rotate as it moves, in degrees."
            },
            {
                "name": "Train to Switch",
                "key": "train",
                "type": "target_destination",
                "default": "",
                "desc": "Name of func_tracktrain this platform will transport to top/bottom track."
            },
            {
                "name": "Top Track",
                "key": "toptrack",
                "type": "target_destination",
                "default": "",
                "desc": "Name of last path_track of the top path (if Start at Bottom flag is selected, this is the name of the first path_track at the top path)."
            },
            {
                "name": "Bottom Track",
                "key": "bottomtrack",
                "type": "target_destination",
                "default": "",
                "desc": "Name of first path_track of the bottom track (if Start at Bottom flag is selected, this is the name of the last path_track at the bottom path)."
            },
            {
                "name": "Move/Rotate Speed",
                "key": "speed",
                "type": "integer",
                "default": "0",
                "desc": "Speed in which func_trackchange travel the whole way up/down (units per seconds)."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Auto Activate Train - see description": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Relink Track": {
                        "default": false,
                        "num": 2
                    },
                    "[8] Start at Bottom - Platform starts at the bottom instead at the top path_track if this flag is ticked": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Rotate Only - see description": {
                        "default": false,
                        "num": 16
                    },
                    "[64] X Axis - Train rotates around X axis instead of Z axis. Can be combined with Y Axis": {
                        "default": false,
                        "num": 64
                    },
                    "[128] Y Axis - Train rotates around Y axis instead of Z axis. Can be combined with X Axis": {
                        "default": false,
                        "num": 128
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Trigger",
                "type": "void",
                "desc": "Trigger the track change."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_train",
        "desc": "An old entity leftover from Quake. It follows a series of path_corner entities. While mostly made obsolete by func_tracktrain, this entity is not affected by the turning inaccuracy issues that that entity has, and may be more suitable for fast-moving objects.",
        "bases": [
            "BaseEntityVisBrush"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[8] Non-solid": {
                        "default": false,
                        "num": 8
                    }
                }
            },
            {
                "name": "Spawn path_corner",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The name of the first path_corner in the train's path. The train will spawn at this path_corner."
            },
            {
                "name": "Speed",
                "key": "speed",
                "type": "float",
                "default": "50",
                "desc": "Speed at which the train moves."
            },
            {
                "name": "Movement Sound",
                "key": "noise1",
                "type": "sound",
                "default": "Default.Null",
                "desc": "The sound to play when the train moves. This must be specified, but can be set to 'Default.Null' to play no sound."
            },
            {
                "name": "Stop Sound",
                "key": "noise2",
                "type": "sound",
                "default": "Default.Null",
                "desc": "The sound to play when the train stops moving. This must be specified, but can be set to 'Default.Null' to play no sound."
            },
            {
                "name": "Sound volume (0-10)",
                "key": "volume",
                "type": "float",
                "default": "10",
                "desc": "Volume of the sounds emitted when moving and stopping."
            },
            {
                "name": "Crush Damage",
                "key": "dmg",
                "type": "float",
                "default": "0",
                "desc": "Amount of damage to deal to entities blocking the train."
            }
        ],
        "inputs": [
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle movement"
            },
            {
                "name": "Start",
                "type": "void",
                "desc": "Start movement"
            },
            {
                "name": "Stop",
                "type": "void",
                "desc": "Stop movement"
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_traincontrols",
        "desc": "When used by the player, this entity overrides the player's controls to let them drive a train.",
        "bases": [
            "BaseEntityVisBrush"
        ],
        "keyvalues": [
            {
                "name": "Train Name",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The target train to control when the player uses these controls."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_wall_toggle",
        "desc": "Legacy Support for Half-Life. Use func_brush instead. A general brush entity which can be toggled on/off When off, the brush will be non-solid and invisible. Does not cast lightmap shadows.",
        "bases": [
            "func_wall"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Starts Invisible": {
                        "default": false,
                        "num": 1
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the brush on/off. When off, the brush will be non-solid and invisible."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_weight_button",
        "desc": "A button which activates after a specified amount of weight is applied.",
        "bases": [
            "BaseEntityVisBrush"
        ],
        "keyvalues": [
            {
                "name": "Amount of weight required before this button activates, in KG.",
                "key": "weighttoactivate",
                "type": "float",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnPressed",
                "type": "void",
                "desc": "Fired when the button is touching enough weight."
            },
            {
                "name": "OnReleased",
                "type": "void",
                "desc": "Fired when the button was pressed, but weight was removed."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "gibshooter",
        "desc": "An entity that shoots out gibs. Style of body part depends on language type.",
        "bases": [
            "gibshooterbase"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "hot_potato_catcher",
        "desc": "Catches 'hot potatos' and fires an output.",
        "bases": [
            "prop_glass_futbol_socket"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "hot_potato_socket",
        "desc": "Catches (bombs?) and fires an output.",
        "bases": [
            "prop_glass_futbol_socket"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "hot_potato_spawner",
        "desc": "Catches 'hot potatos' and fires an output.",
        "bases": [
            "prop_glass_futbol_spawner"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "info_hint",
        "desc": "A hint that is not used for navigation. They don't go into the nodegraph, nor do they fall to the ground. Use these to provide some spatial context for NPCs, such as 'look here if you can't find the player' or 'throw rocks at this spot'.",
        "bases": [
            "BaseEntityPoint",
            "HintNode"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "item_nugget",
        "desc": "Aperture Incentivizing Nugget. Useless.",
        "bases": [
            "BaseEntityAnimating"
        ],
        "keyvalues": [
            {
                "name": "Group Name",
                "key": "groupname",
                "type": "string",
                "default": "",
                "desc": "Giving nuggets a group name hints the game that they are intended to be a group"
            },
            {
                "name": "Respawn Time",
                "key": "respawntime",
                "type": "float",
                "default": "30",
                "desc": "Number of seconds between when a nugget is collected and when it respawns"
            },
            {
                "name": "Point Value",
                "key": "pointvalue",
                "type": "choices",
                "default": "1 (1)",
                "desc": "",
                "choices": {
                    "1": "1",
                    "5": "5",
                    "10": "10",
                    "25": "25"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "item_paint_power_pickup",
        "desc": "Paint Ammo",
        "bases": [
            "BaseEntityAnimating"
        ],
        "keyvalues": [
            {
                "name": "Paint Type",
                "key": "painttype",
                "type": "choices",
                "default": "Bounce (0)",
                "desc": "The paint power of the pickup.",
                "choices": {
                    "Bounce": "0",
                    "Reflect": "1",
                    "Speed": "2",
                    "Portal": "3",
                    "Stick": "5"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "TRACK",
        "classname": "keyframe_rope",
        "desc": "A node entity that marks a point in a rope. Traditionally, one move_rope is used to start the chain and then is followed by one or more keyframe_rope entities. However they are freely interchangeable.",
        "bases": [
            "BaseEntityPoint",
            "RopeKeyFrame"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "logic_measure_direction",
        "desc": "An entity that can measure the direction of an entity relative to another entity and apply that movement to a third entity.",
        "bases": [
            "logic_measure_movement"
        ],
        "keyvalues": [
            {
                "name": "Entity to Measure",
                "key": "measuretarget",
                "type": "target_destination",
                "default": "",
                "desc": "Entity whose direction you want to measure."
            },
            {
                "name": "Measure Reference",
                "key": "measurereference",
                "type": "target_destination",
                "default": "",
                "desc": "The direction of Entity to Measure will be measured from this entity."
            },
            {
                "name": "Entity to Move",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "This entity will be moved in the direction of the Entity to Measure."
            },
            {
                "name": "Movement Reference",
                "key": "targetreference",
                "type": "target_destination",
                "default": "",
                "desc": "The Entity to Move will move relative to this entity."
            },
            {
                "name": "Trace scale",
                "key": "targetscale",
                "type": "float",
                "default": "1",
                "desc": "A scale to *divide* the distance between the Entity to Measure and the trace's endpoint by before applying those movements to the Entity to Move. 1 = target entity moves to the end of the trace, 2 = target entity moves to the middle of the trace (half as far), and 0.5 = target entity moves twice as far as the trace."
            },
            {
                "name": "Measurement Type",
                "key": "measuretype",
                "type": "choices",
                "default": "Angles (0)",
                "desc": "How should the direction be measured?",
                "choices": {
                    "Angles": "0",
                    "Eye angles": "1",
                    "Attachment point angles": "2"
                }
            },
            {
                "name": "Trace distance",
                "key": "tracedistance",
                "type": "float",
                "default": "8192",
                "desc": "The maximum distance that the trace can go. 0 = no limit."
            },
            {
                "name": "Trace Mask",
                "key": "mask",
                "type": "choices",
                "default": "MASK_SHOT (Anything that would be hit by a bullet) (1174421507)",
                "desc": "How the measurement tracing should act in regards to what it should collide with.",
                "choices": {
                    "MASK_SOLID (Anything solid)": "33570827",
                    "MASK_PLAYERSOLID (Anything solid + player clip)": "33636363",
                    "MASK_NPCSOLID (Anything solid + NPC clip)": "33701899",
                    "MASK_WATER (Water volumes)": "16432",
                    "MASK_OPAQUE (Anything opaque, e.g. windows)": "16513",
                    "MASK_BLOCKLOS (Anything that blocks line of sight)": "16449",
                    "MASK_SHOT (Anything that would be hit by a bullet)": "1174421507"
                }
            },
            {
                "name": "Collision Group",
                "key": "collisiongroup",
                "type": "choices",
                "default": "None (0)",
                "desc": "The collision group the measurement tracing should use.",
                "choices": {
                    "None": "0"
                }
            },
            {
                "name": "Trace Filter",
                "key": "damagefilter",
                "type": "filterclass",
                "default": "",
                "desc": "A filter to use for tracing."
            },
            {
                "name": "Trace Filter behavior",
                "key": "hitifpassed",
                "type": "choices",
                "default": "If pass, don't hit (0)",
                "desc": "What the filter should actually be used for.",
                "choices": {
                    "If pass, don't hit": "0",
                    "If pass, hit": "1"
                }
            },
            {
                "name": "Additional trace from movement reference",
                "key": "tracetargetreference",
                "type": "boolean",
                "default": "No",
                "desc": "Initiates another trace from the Movement Reference using the existing properties and adjusts the position to its end point. Only use this if the Movement Reference is different from the Measure Reference."
            }
        ],
        "inputs": [
            {
                "name": "SetMeasureTarget",
                "type": "target_destination",
                "desc": "Set the Entity to Measure, whose movement should be measured."
            },
            {
                "name": "SetMeasureReference",
                "type": "target_destination",
                "desc": "Set the Measure Reference entity."
            },
            {
                "name": "SetTarget",
                "type": "target_destination",
                "desc": "Set the Entity to Move, which will be moved to mimic the measured entity."
            },
            {
                "name": "SetTargetReference",
                "type": "target_destination",
                "desc": "Set the Movement Reference entity."
            },
            {
                "name": "SetTargetScale",
                "type": "float",
                "desc": "Set the scale to divide the measured movements by."
            },
            {
                "name": "SetMeasureType",
                "type": "integer",
                "desc": "Sets the measurement type."
            },
            {
                "name": "SetMeasureAttachment",
                "type": "string",
                "desc": "Sets the measurement attachment."
            },
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable the logic_measure_direction."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable the logic_measure_direction."
            },
            {
                "name": "SetTraceFilter",
                "type": "target_destination",
                "desc": "Sets the entity to use as the trace filter. Pass in an empty string to clear the trace filter."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "math_counter_advanced",
        "desc": "A special version of math_counter with the ability to perform advanced calculations. Otherwise functions identically to math_counter.",
        "bases": [
            "BaseEntityPoint",
            "EnableDisable",
            "math_counter"
        ],
        "keyvalues": [
            {
                "name": "Preserve Value?",
                "key": "preservevalue",
                "type": "boolean",
                "default": "No",
                "desc": "If set to 'Yes', calculations will fire OutValue with the resulting value, but the actual value stored in this entity will stay the same, allowing future calculations to use a constant value. If you want to change the value, you must use SetValueNoFire to set the counter's value or the PreserveValue input to toggle this feature. This also disables min/max functionality."
            },
            {
                "name": "Always Output As Int",
                "key": "alwaysoutputasint",
                "type": "boolean",
                "default": "No",
                "desc": "If set to 'Yes', the stored value (and OutValue) will always be rounded to an integer before firing."
            },
            {
                "name": "Lerp Percent",
                "key": "setlerppercent",
                "type": "float",
                "default": "0.5",
                "desc": "The percentage used by the LerpTo input."
            }
        ],
        "inputs": [
            {
                "name": "PreserveValue",
                "type": "boolean",
                "desc": "Sets whether this counter's value should be preserved after calculations. 1 = Yes, 0 = No"
            },
            {
                "name": "AlwaysOutputAsInt",
                "type": "boolean",
                "desc": "Sets whether this counter's value should always output as an integer. 1 = Yes, 0 = No"
            },
            {
                "name": "SetValueToPi",
                "type": "void",
                "desc": "Sets the counter's value to 3.14159265358979323846 and fires the OutValue output with it."
            },
            {
                "name": "SquareRoot",
                "type": "void",
                "desc": "Calculates the square root of the counter's current value. Fires the OutValue output with the result."
            },
            {
                "name": "Power",
                "type": "integer",
                "desc": "Raises the power of the counter's current value to this value. Fires the OutValue output with the result."
            },
            {
                "name": "Round",
                "type": "integer",
                "desc": "Rounds the counter's current value to the specified number place. For example, rounding 256 to 100 will round it to 300 and rounding 256 to 10 will round it to 260. Use 0 to round decimals to integers. Fires the OutValue output with the result."
            },
            {
                "name": "Floor",
                "type": "integer",
                "desc": "Floors, or rounds down, the counter's current value to the specified number place. Fires the OutValue output with the result."
            },
            {
                "name": "Ceil",
                "type": "integer",
                "desc": "Ceils, or rounds up, the counter's current value to the specified number place. Fires the OutValue output with the result."
            },
            {
                "name": "Trunc",
                "type": "integer",
                "desc": "Truncates, or rounds toward zero, the counter's current value to the specified number place. Fires the OutValue output with the result."
            },
            {
                "name": "Sin",
                "type": "void",
                "desc": "Applies sine to the counter's current value. Fires the OutValue output with the result."
            },
            {
                "name": "Cos",
                "type": "void",
                "desc": "Applies cosine to the counter's current value. Fires the OutValue output with the result."
            },
            {
                "name": "Tan",
                "type": "void",
                "desc": "Applies tangent to the counter's current value. Fires the OutValue output with the result."
            },
            {
                "name": "RandomInt",
                "type": "string",
                "desc": "Generates a random integer between the specified bounds. Format = 'lowerbound upperbound', like '22 65'. Fires the OutValue output with the result."
            },
            {
                "name": "RandomFloat",
                "type": "string",
                "desc": "Generates a random float between the specified bounds. Format = 'lowerbound upperbound', like '22.5 48.721'. Fires the OutValue output with the result."
            },
            {
                "name": "LerpTo",
                "type": "float",
                "desc": "Lerps this counter's value to the specified value based on the lerp percent."
            },
            {
                "name": "SetLerpPercent",
                "type": "float",
                "desc": "Sets the lerp percent."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "momentary_rot_button",
        "desc": "A brush entity that's designed to be used for rotating wheels, where the player can rotate them to arbitrary positions before stopping.",
        "bases": [
            "BaseEntityVisBrush",
            "Angles",
            "MasterEnt"
        ],
        "keyvalues": [
            {
                "name": "Speed (deg/sec)",
                "key": "speed",
                "type": "float",
                "default": "50",
                "desc": "The amount, in degrees, that the wheel turns per second."
            },
            {
                "name": "Sounds",
                "key": "sounds",
                "type": "choices",
                "default": "None (Silent) (0)",
                "desc": "Sound played when pressed. Choose from sounds in the Buttons.snd* category.",
                "choices": {
                    "None (Silent)": "0",
                    "Buttons.snd1: Big zap & Warmup": "1",
                    "Buttons.snd2: Access Denied": "2",
                    "Buttons.snd3: Access Granted": "3",
                    "Buttons.snd4: Quick Combolock": "4",
                    "Buttons.snd5: Power Deadbolt 1": "5",
                    "Buttons.snd6: Power Deadbolt 2": "6",
                    "Buttons.snd7: Plunger": "7",
                    "Buttons.snd8: Small zap": "8",
                    "Buttons.snd9: Keycard Sound": "9",
                    "Buttons.snd10: Buzz": "10",
                    "Buttons.snd11: Buzz Off": "11",
                    "Buttons.snd12: Latch locked": "12",
                    "Buttons.snd13: Latch Unlocked": "13",
                    "Buttons.snd14: Lightswitch": "14",
                    "Buttons.snd15: Small bleek": "15",
                    "Buttons.snd16: Small deny": "16",
                    "Buttons.snd17: Small doop": "17",
                    "Buttons.snd18: Small tech deny": "18",
                    "Buttons.snd19: Click and combine screen fuzz": "19",
                    "Buttons.snd20: Roomy beep": "20",
                    "Buttons.snd21: Lever or Wheel: turn + move sqeek": "21",
                    "Buttons.snd22: Lever or Wheel: latch + release gas": "22",
                    "Buttons.snd23: Lever or Wheel: ratchet + sqeek": "23",
                    "Buttons.snd24: Lever or Wheel: large ratchet": "24",
                    "Buttons.snd25: Lever or Wheel: clanky + gas release": "25",
                    "Buttons.snd26: Lever or Wheel: latch + large metal thud": "26",
                    "Buttons.snd27: Lever or Wheel: smaller ratchet": "27",
                    "Buttons.snd28: Lever or Wheel: smaller lever move": "28",
                    "Buttons.snd31: Shock buzz": "31",
                    "Buttons.snd32: Clickbeep": "32",
                    "Buttons.snd33: Tech blip": "33",
                    "Buttons.snd34: Clickbeepbeep open": "34",
                    "Buttons.snd35: Small high blip": "35",
                    "Buttons.snd36: Small tech fuzz blip": "36",
                    "Buttons.snd37: Small click bleep (change to lightswitch)": "37",
                    "Buttons.snd40: Combine door lock - locked": "40",
                    "Buttons.snd41: Combine blip growl": "41",
                    "Buttons.snd42: Combine squick growl": "42",
                    "Buttons.snd43: Combine whine purr": "43",
                    "Buttons.snd44: Combine click talk": "44",
                    "Buttons.snd45: Combine click growl fizz": "45",
                    "Buttons.snd46: Combine click fizz (deny)": "46",
                    "Buttons.snd47: Combine click talker": "47"
                }
            },
            {
                "name": "Distance",
                "key": "distance",
                "type": "float",
                "default": "90",
                "desc": "The maximum amount, in degrees, that the wheel is allowed to rotate."
            },
            {
                "name": "Auto-return speed",
                "key": "returnspeed",
                "type": "float",
                "default": "0",
                "desc": "If the 'Toggle' spawnflag is not set, the speed at which the wheel auto-returns when left alone, in degrees per second."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Not Solid": {
                        "default": true,
                        "num": 1
                    },
                    "[32] Toggle (Disable Auto Return)": {
                        "default": true,
                        "num": 32
                    },
                    "[64] X Axis": {
                        "default": false,
                        "num": 64
                    },
                    "[128] Y Axis": {
                        "default": false,
                        "num": 128
                    },
                    "[1024] Use Activates": {
                        "default": true,
                        "num": 1024
                    },
                    "[2048] Starts locked": {
                        "default": false,
                        "num": 2048
                    },
                    "[8192] Jiggle when used while locked": {
                        "default": false,
                        "num": 8192
                    }
                }
            },
            {
                "name": "Start Position",
                "key": "startposition",
                "type": "float",
                "default": "0",
                "desc": "Postion when spawned. The value is a range between 0.0 and 1.0, where 0 is the unrotated position and 1 is the rotated position + 'Distance'."
            },
            {
                "name": "Start Direction",
                "key": "startdirection",
                "type": "choices",
                "default": "Forward (-1)",
                "desc": "Specify the direction the button will move when first used. Ignored if Start Position is 0 or 1.",
                "choices": {
                    "Forward": "-1",
                    "Backward": "1"
                }
            },
            {
                "name": "Solid Type",
                "key": "solidbsp",
                "type": "choices",
                "default": "BSP (1)",
                "desc": "How to calculate collisions. BSP is more rudimentarty but allows more stable collision with players.",
                "choices": {
                    "VPhysics": "0",
                    "BSP": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "Lock",
                "type": "void",
                "desc": "Lock the button, preventing it from functioning."
            },
            {
                "name": "Unlock",
                "type": "void",
                "desc": "Unlock the button, allowing it to function."
            },
            {
                "name": "SetPosition",
                "type": "string",
                "desc": "Move to a position. The parameter must be a value between 0 and 1, where 0 is the unrotated position and 1 is the rotated position + 'Distance'."
            },
            {
                "name": "SetPositionImmediately",
                "type": "string",
                "desc": "Immediately teleport to a position. The parameter must be a value between 0 and 1, where 0 is the unrotated position and 1 is the rotated position + 'Distance'."
            },
            {
                "name": "_DisableUpdateTarget",
                "type": "void",
                "desc": "Prevent the Position output from firing. Used when lock jiggling is triggered."
            },
            {
                "name": "_EnableUpdateTarget",
                "type": "void",
                "desc": "Allow the Position output to fire again. Used when lock jiggling is triggered."
            }
        ],
        "outputs": [
            {
                "name": "Position",
                "type": "integer",
                "desc": "Fired whenever the button moves. The output is the position of button from 0 to 1, where 0 is the unrotated position and 1 is the rotated position + 'Distance'."
            },
            {
                "name": "OnPressed",
                "type": "integer",
                "desc": "Fired when the button is first pressed."
            },
            {
                "name": "OnUnpressed",
                "type": "integer",
                "desc": "Fired when the button is first released from being pressed."
            },
            {
                "name": "OnFullyClosed",
                "type": "void",
                "desc": "Fired when the button has reached position 1, the rotated position + 'Distance'."
            },
            {
                "name": "OnFullyOpen",
                "type": "void",
                "desc": "Fired when the button has reached position 0, the unrotated starting position."
            },
            {
                "name": "OnReachedPosition",
                "type": "void",
                "desc": "Fired whenever the button reaches a goal position: i.e. when it becomes open, becomes closed, or reaches the point specified by a 'SetPosition' input."
            }
        ]
    },
    {
        "type": "TRACK",
        "classname": "move_rope",
        "desc": "A node entity that marks a point in a rope. Traditionally, one move_rope is used to start the chain and then is followed by one or more keyframe_rope entities. However they are freely interchangeable.",
        "bases": [
            "BaseEntityPoint",
            "RopeKeyFrame"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "npc_maker",
        "desc": "NPC Maker",
        "bases": [
            "Angles",
            "BaseNPCMaker"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[16] Fade Corpse": {
                        "default": false,
                        "num": 16
                    }
                }
            },
            {
                "name": "Class name of spawned NPC",
                "key": "npctype",
                "type": "npcclass",
                "default": "",
                "desc": ""
            },
            {
                "name": "Childrens' Name",
                "key": "npctargetname",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Childrens' Squad Name",
                "key": "npcsquadname",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Childrens' Hint Group",
                "key": "npchintgroup",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Weapons",
                "key": "additionalequipment",
                "type": "choices",
                "default": "Nothing (0)",
                "desc": "",
                "choices": {
                    "Nothing": "0"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "npc_template_maker",
        "desc": "An entity that creates NPCs. The NPCs it creates are clones of a template NPC. NPCs are spawned around this maker's origin, or at specified destination points.",
        "bases": [
            "BaseNPCMaker"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[256] Always use radius spawn": {
                        "default": false,
                        "num": 256
                    },
                    "[512] Don't preload template models": {
                        "default": false,
                        "num": 512
                    }
                }
            },
            {
                "name": "Name of template NPC",
                "key": "templatename",
                "type": "target_destination",
                "default": "",
                "desc": "Template NPC that this maker should be creating clones of."
            },
            {
                "name": "Radius",
                "key": "radius",
                "type": "float",
                "default": "256",
                "desc": "Radius around this maker within which NPCs are to be placed. Spawned NPCs will try and find empty space within this radius to spawn."
            },
            {
                "name": "Name of Destination Group",
                "key": "destinationgroup",
                "type": "target_destination",
                "default": "",
                "desc": "If you'd like spawned NPCs to be created at an info_npc_spawn_destination entity, enter the name of that entity here. If you have more than one destination entity by that name, the Destination Criteria will be used to select one from the group."
            },
            {
                "name": "Dest. Criterion: Visible to player?",
                "key": "criterionvisibility",
                "type": "choices",
                "default": "Don't Care (2)",
                "desc": "Should the NPC try to spawn at a destination that the player can see? Only applicable if a Destination Group is being used.",
                "choices": {
                    "Yes": "0",
                    "No": "1",
                    "Don't Care": "2"
                }
            },
            {
                "name": "Dest. Criterion: Distance to player?",
                "key": "criteriondistance",
                "type": "choices",
                "default": "Don't Care (2)",
                "desc": "Should the NPC try to spawn nearest to or farthest from the player's current location? Only applicable if a Destination Group is being used.",
                "choices": {
                    "Nearest": "0",
                    "Farthest": "1",
                    "Don't Care": "2"
                }
            },
            {
                "name": "Minimum spawn distance from player",
                "key": "minspawndistance",
                "type": "integer",
                "default": "0",
                "desc": "The spawn destination node distance to the player will have to be further or equal than this value."
            }
        ],
        "inputs": [
            {
                "name": "SpawnNPCInRadius",
                "type": "void",
                "desc": "Spawn an NPC somewhere within the maker's radius."
            },
            {
                "name": "SpawnNPCInLine",
                "type": "void",
                "desc": "Spawn an NPC somewhere within a line behind the maker."
            },
            {
                "name": "SpawnMultiple",
                "type": "integer",
                "desc": "Spawn multiple NPCs (uses destination group, else radius)."
            },
            {
                "name": "ChangeDestinationGroup",
                "type": "target_destination",
                "desc": "Switch to a different set of Destination entities."
            },
            {
                "name": "SetMinimumSpawnDistance",
                "type": "integer",
                "desc": "Set the minimum spawn distance from player to destination node."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "phys_ballsocket",
        "desc": "A constraint that keeps the position of two objects fixed, relative to the constraint's origin. It does not affect rotation.",
        "bases": [
            "TwoObjectPhysics"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "phys_constraint",
        "desc": "A constraint that keeps the relative position and orientation of two objects fixed.",
        "bases": [
            "TwoObjectPhysics"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "phys_hinge",
        "desc": "A physically simulated hinge. Use the helper to define the axis of rotation.",
        "bases": [
            "TwoObjectPhysics"
        ],
        "keyvalues": [
            {
                "name": "Friction",
                "key": "hingefriction",
                "type": "float",
                "default": "0",
                "desc": "Resistance/friction in the hinge"
            },
            {
                "name": "Hinge Axis",
                "key": "hingeaxis",
                "type": "vecline",
                "default": "",
                "desc": ""
            },
            {
                "name": "Load Scale",
                "key": "systemloadscale",
                "type": "float",
                "default": "1",
                "desc": "Scale of the load connected to this hinge (1=just the objects directly connected)"
            },
            {
                "name": "Minimum Sound Velocity",
                "key": "minsoundthreshold",
                "type": "float",
                "default": "6",
                "desc": "When travelling below this many units/sec, will not play any sound."
            },
            {
                "name": "Full Sound Velocity",
                "key": "maxsoundthreshold",
                "type": "float",
                "default": "80",
                "desc": "When travelling at this speed or above, will play sound at full volume."
            },
            {
                "name": "Travel sound (forward)",
                "key": "slidesoundfwd",
                "type": "sound",
                "default": "",
                "desc": "Play this sound when travelling forward on helper axis"
            },
            {
                "name": "Travel sound (backward)",
                "key": "slidesoundback",
                "type": "sound",
                "default": "",
                "desc": "Play this sound when travelling backward on helper axis"
            },
            {
                "name": "Reversal sound threshold (small)",
                "key": "reversalsoundthresholdsmall",
                "type": "float",
                "default": "0",
                "desc": "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the small reversal sound."
            },
            {
                "name": "Reversal sound threshold (medium)",
                "key": "reversalsoundthresholdmedium",
                "type": "float",
                "default": "0",
                "desc": "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the medium reversal sound."
            },
            {
                "name": "Reversal sound threshold (large)",
                "key": "reversalsoundthresholdlarge",
                "type": "float",
                "default": "0",
                "desc": "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the large reversal sound."
            },
            {
                "name": "Reversal sound (small)",
                "key": "reversalsoundsmall",
                "type": "sound",
                "default": "",
                "desc": "Play this sound when making a hard reverse over the small threshold but less than medium"
            },
            {
                "name": "Reversal sound (medium)",
                "key": "reversalsoundmedium",
                "type": "sound",
                "default": "",
                "desc": "Play this sound when making a hard reverse over the medium threshold but less than large"
            },
            {
                "name": "Reversal sound (large)",
                "key": "reversalsoundlarge",
                "type": "sound",
                "default": "",
                "desc": "Play this sound when making a hard reverse over the large threshold"
            }
        ],
        "inputs": [
            {
                "name": "SetAngularVelocity",
                "type": "float",
                "desc": "Set angular velocity around the hinge (motor) in deg/sec"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "phys_lengthconstraint",
        "desc": "A constraint that preserves the distance between two entities. If the 'Keep Rigid' flag is set, think of it as a rod. If not, think off it as a virtual rope.",
        "bases": [
            "TwoObjectPhysics"
        ],
        "keyvalues": [
            {
                "name": "Additional Length",
                "key": "addlength",
                "type": "float",
                "default": "0",
                "desc": "Add (or subtract) this amount to the rest length of the rope."
            },
            {
                "name": "Minimum Length",
                "key": "minlength",
                "type": "float",
                "default": "0",
                "desc": "If the constraint is not rigid, this is the minimum length it can be."
            },
            {
                "name": "Attached object 2 point",
                "key": "attachpoint",
                "type": "vecline",
                "default": "The position the rope attaches to object 2",
                "desc": ""
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] No Collision until break": {
                        "default": true,
                        "num": 1
                    },
                    "[2] Keep Rigid": {
                        "default": false,
                        "num": 2
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "phys_magnet",
        "desc": "An entity that acts like a magnet, attaching metallic physics objects to itself when they touch it.",
        "bases": [
            "BaseEntityAnimating",
            "SetModel"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start Asleep": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Motion Disabled": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Suck On Touch": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Allow Attached Rotation": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Coast jeep pickup hack": {
                        "default": false,
                        "num": 16
                    }
                }
            },
            {
                "name": "Force Limit to Break (lbs)",
                "key": "forcelimit",
                "type": "float",
                "default": "0",
                "desc": "The amount of force necessary to break a stuck object off the magnet. A way of calculating this is to set it to the mass of an object that would break this constraint if it were resting on the magnet."
            },
            {
                "name": "Torque Limit to Break (lbs * distance)",
                "key": "torquelimit",
                "type": "float",
                "default": "0",
                "desc": "The amount of torque necessary to break a stuck object off the magnet. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint."
            },
            {
                "name": "Mass Scale",
                "key": "massscale",
                "type": "float",
                "default": "0",
                "desc": "A scale multiplier for the object's mass."
            },
            {
                "name": "Override parameters",
                "key": "overridescript",
                "type": "string",
                "default": "",
                "desc": "A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'."
            },
            {
                "name": "Maximum Attached Objects",
                "key": "maxobjects",
                "type": "integer",
                "default": "0",
                "desc": "The maximum number of physics objects that can be stuck to the magnet at once. 0 = no limit."
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turn the magnet on."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "The the magnet off. This will detach anything current stuck to the magnet."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the magnet on or off."
            }
        ],
        "outputs": [
            {
                "name": "OnAttach",
                "type": "void",
                "desc": "Fired when an entity is grabbed by the magnet."
            },
            {
                "name": "OnDetach",
                "type": "void",
                "desc": "Fired when an entity is released by the magnet."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "phys_pulleyconstraint",
        "desc": "A constraint that is essentially two length constraints and two points. Imagine it as a virtual rope connected to two objects, each suspended from a pulley above them. The constraint keeps the sum of the distances between the pulley points and their suspended objects constant.",
        "bases": [
            "TwoObjectPhysics"
        ],
        "keyvalues": [
            {
                "name": "Additional Length",
                "key": "addlength",
                "type": "float",
                "default": "0",
                "desc": "Add (or subtract) this amount to the rest length of the pulley rope."
            },
            {
                "name": "Pulley Gear Ratio",
                "key": "gearratio",
                "type": "float",
                "default": "1",
                "desc": "Add (or subtract) this amount to the rest length of the pulley rope."
            },
            {
                "name": "Pulley Position 2",
                "key": "position2",
                "type": "vecline",
                "default": "",
                "desc": "The position of the pulley for Entity 2. The pulley for Entity 1 is the origin of this constraint entity. Entity 1 is always suspended from pulley point 1, and Entity 2 is always suspended from pulley point 2."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] No Collision until break": {
                        "default": true,
                        "num": 1
                    },
                    "[2] Keep Rigid": {
                        "default": false,
                        "num": 2
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "phys_ragdollconstraint",
        "desc": "A constraint that fixes the position of two entities, relative to this constraint's origin. Also allows for limits on the rotation around each axis, in the space of this constraint.",
        "bases": [
            "TwoObjectPhysics"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] No Collision until break": {
                        "default": true,
                        "num": 1
                    },
                    "[2] Only limit rotation (free movement)": {
                        "default": false,
                        "num": 2
                    }
                }
            },
            {
                "name": "X axis min limit",
                "key": "xmin",
                "type": "float",
                "default": "-90",
                "desc": "-180 min and 180 max = no constraint on this axis."
            },
            {
                "name": "X axis max limit",
                "key": "xmax",
                "type": "float",
                "default": "90",
                "desc": "-180 min and 180 max = no constraint on this axis."
            },
            {
                "name": "Y axis min limit",
                "key": "ymin",
                "type": "float",
                "default": "0",
                "desc": "-180 min and 180 max = no constraint on this axis."
            },
            {
                "name": "Y axis max limit",
                "key": "ymax",
                "type": "float",
                "default": "0",
                "desc": "-180 min and 180 max = no constraint on this axis."
            },
            {
                "name": "Z axis min limit",
                "key": "zmin",
                "type": "float",
                "default": "0",
                "desc": "-180 min and 180 max = no constraint on this axis."
            },
            {
                "name": "Z axis max limit",
                "key": "zmax",
                "type": "float",
                "default": "0",
                "desc": "-180 min and 180 max = no constraint on this axis."
            },
            {
                "name": "X axis friction",
                "key": "xfriction",
                "type": "float",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Y axis friction",
                "key": "yfriction",
                "type": "float",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Z axis friction",
                "key": "zfriction",
                "type": "float",
                "default": "0",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "phys_slideconstraint",
        "desc": "A constraint that constrains an entity along a line segment.",
        "bases": [
            "TwoObjectPhysics"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] No Collision until break": {
                        "default": true,
                        "num": 1
                    },
                    "[2] Limit Endpoints": {
                        "default": false,
                        "num": 2
                    }
                }
            },
            {
                "name": "Sliding Axis",
                "key": "slideaxis",
                "type": "vecline",
                "default": "",
                "desc": ""
            },
            {
                "name": "Friction",
                "key": "slidefriction",
                "type": "float",
                "default": "0",
                "desc": "Resistance/friction in the constraint"
            },
            {
                "name": "Load Scale",
                "key": "systemloadscale",
                "type": "float",
                "default": "1",
                "desc": "Scale of the mass load connected to this constraint (1=just the objects directly connected)"
            },
            {
                "name": "Minimum Sound Velocity",
                "key": "minsoundthreshold",
                "type": "float",
                "default": "6",
                "desc": "When travelling below this many units/sec, will not play any sound."
            },
            {
                "name": "Full Sound Velocity",
                "key": "maxsoundthreshold",
                "type": "float",
                "default": "80",
                "desc": "When travelling at this speed or above, will play sound at full volume."
            },
            {
                "name": "Travel sound (forward)",
                "key": "slidesoundfwd",
                "type": "sound",
                "default": "",
                "desc": "Play this sound when travelling forward on helper axis"
            },
            {
                "name": "Travel sound (backward)",
                "key": "slidesoundback",
                "type": "sound",
                "default": "",
                "desc": "Play this sound when travelling backward on helper axis"
            },
            {
                "name": "Reversal sound threshold (small)",
                "key": "reversalsoundthresholdsmall",
                "type": "float",
                "default": "0",
                "desc": "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the small reversal sound."
            },
            {
                "name": "Reversal sound threshold (medium)",
                "key": "reversalsoundthresholdmedium",
                "type": "float",
                "default": "0",
                "desc": "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the medium reversal sound."
            },
            {
                "name": "Reversal sound threshold (large)",
                "key": "reversalsoundthresholdlarge",
                "type": "float",
                "default": "0",
                "desc": "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the large reversal sound."
            },
            {
                "name": "Reversal sound (small)",
                "key": "reversalsoundsmall",
                "type": "sound",
                "default": "",
                "desc": "Play this sound when making a hard reverse over the small threshold but less than medium"
            },
            {
                "name": "Reversal sound (medium)",
                "key": "reversalsoundmedium",
                "type": "sound",
                "default": "",
                "desc": "Play this sound when making a hard reverse over the medium threshold but less than large"
            },
            {
                "name": "Reversal sound (large)",
                "key": "reversalsoundlarge",
                "type": "sound",
                "default": "",
                "desc": "Play this sound when making a hard reverse over the large threshold"
            }
        ],
        "inputs": [
            {
                "name": "SetVelocity",
                "type": "float",
                "desc": "Set linear velocity along the constraint"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "phys_thruster",
        "desc": "An entity used to apply constant acceleration to a physics object. The force and torque is calculated using the position and direction of the thruster as an impulse. So moving those off the object's center will cause torque as well. Torque can be removed by unchecking the 'apply torque' flag. The position of the thruster can be forced to be at the object's center by checking to 'ignore pos' flag.",
        "bases": [
            "Angles",
            "ForceController"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[32] Ignore Pos": {
                        "default": false,
                        "num": 32
                    }
                }
            },
            {
                "name": "Force",
                "key": "force",
                "type": "string",
                "default": "0",
                "desc": "Force (will be integrated, units are force kg*in/s^2)"
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "phys_torque",
        "desc": "An angular thruster. Use it to apply angular force to an entity.",
        "bases": [
            "ForceController"
        ],
        "keyvalues": [
            {
                "name": "Angular Acceleration",
                "key": "force",
                "type": "string",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Rotation Axis",
                "key": "axis",
                "type": "vecline",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "physics_cannister",
        "desc": "A physically simulated gas cannister that can have its cap shot off, at which point gas will start escaping and cause the cannister to fly around. If it takes enough damage, it will explode. The model should have a 'nozzle' attachment point, which is where gas will escape and thrust will be produced from.",
        "bases": [
            "BaseEntityPhysics"
        ],
        "keyvalues": [
            {
                "name": "World model",
                "key": "model",
                "type": "studio",
                "default": "",
                "desc": "The model used for the cannister. The original model is fire_equipment/w_weldtank.mdl."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start Asleep": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Explodes": {
                        "default": true,
                        "num": 2
                    }
                }
            },
            {
                "name": "Explosion Damage",
                "key": "expdamage",
                "type": "float",
                "default": "200.0",
                "desc": "The amount of damage done by the explosion created when the cannister blows up."
            },
            {
                "name": "Explosion Radius",
                "key": "expradius",
                "type": "float",
                "default": "250.0",
                "desc": "The radius of the explosion to create when the cannister blows up."
            },
            {
                "name": "Health",
                "key": "health",
                "type": "integer",
                "default": "25",
                "desc": "The amount of damage the cannister takes before exploding."
            },
            {
                "name": "Thrust",
                "key": "thrust",
                "type": "float",
                "default": "3000.0",
                "desc": "When the cap has been blown off, and the escaping gas is thrusting the cannister about, this is the amount of thrust generated."
            },
            {
                "name": "Fuel Seconds",
                "key": "fuel",
                "type": "float",
                "default": "12.0",
                "desc": "The amount of time that gas leaks from the cannister before being considered empty."
            },
            {
                "name": "Smoke Color (R G B)",
                "key": "rendercolor",
                "type": "color255",
                "default": "255 255 255",
                "desc": ""
            },
            {
                "name": "Smoke Alpha (0 - 255)",
                "key": "renderamt",
                "type": "integer",
                "default": "128",
                "desc": ""
            },
            {
                "name": "Thruster Sound",
                "key": "gassound",
                "type": "sound",
                "default": "ambient/objects/cannister_loop.wav",
                "desc": "The sound played when the gas is escaping from the cannister."
            }
        ],
        "inputs": [
            {
                "name": "Activate",
                "type": "string",
                "desc": "Start gas escaping from the cannister."
            },
            {
                "name": "Deactivate",
                "type": "string",
                "desc": "Stop gas escaping from the cannister."
            },
            {
                "name": "Explode",
                "type": "string",
                "desc": "Force the cannister to explode."
            },
            {
                "name": "Wake",
                "type": "void",
                "desc": "Wakes up the cannister, if it is sleeping."
            }
        ],
        "outputs": [
            {
                "name": "OnActivate",
                "type": "void",
                "desc": "Fired when gas starts to escape from the cannister."
            },
            {
                "name": "OnAwakened",
                "type": "void",
                "desc": "Fired when this entity becomes awake (collision/force is applied)."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_commentary_node",
        "desc": "Commentary node for the developer commentary. Usually added after-the-fact by the commentary system, but can also be placed manually.",
        "bases": [
            "BaseEntityAnimating",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Commentary File",
                "key": "commentaryfile",
                "type": "sound",
                "default": "",
                "desc": "The sound that will play when this is triggered."
            },
            {
                "name": "Commentary File (no HDR)",
                "key": "commentaryfile_nohdr",
                "type": "sound",
                "default": "",
                "desc": "If HDR is off and this exists it will be played instead."
            },
            {
                "name": "Speaker(s)",
                "key": "speakers",
                "type": "string",
                "default": "",
                "desc": "The characters/people who are saying the commentary."
            },
            {
                "name": "Start Disabled",
                "key": "startdisabled",
                "type": "boolean",
                "default": "No",
                "desc": "Should it be disabled or not?"
            },
            {
                "name": "Prevent Movement?",
                "key": "prevent_movement",
                "type": "boolean",
                "default": "No",
                "desc": "If enabled players won't be able to move while the commentary is playing."
            },
            {
                "name": "Pre-Command",
                "key": "precommands",
                "type": "string",
                "default": "",
                "desc": "Command that will fire before the sound file is played. Use semicolons to delimit multiple commands."
            },
            {
                "name": "Post-Command",
                "key": "postcommands",
                "type": "string",
                "default": "",
                "desc": "Command that will fire after the sound file is played. Also accepts semicolons."
            },
            {
                "name": "View Position",
                "key": "viewposition",
                "type": "target_destination",
                "default": "",
                "desc": "Targetname of the entity the player's view will move to."
            },
            {
                "name": "View Target",
                "key": "viewtarget",
                "type": "target_destination",
                "default": "",
                "desc": "Targetname of the entity the player's view will track. If set, the player cannot move their camera."
            }
        ],
        "inputs": [
            {
                "name": "StartCommentary",
                "type": "void",
                "desc": "Start the commentary, just like if the player +USEd this."
            },
            {
                "name": "StopCommentary",
                "type": "void",
                "desc": "Force the commentary node to stop."
            },
            {
                "name": "StartUnstoppableCommentary",
                "type": "void",
                "desc": "Start the commentary but don't let the player cancel it."
            }
        ],
        "outputs": [
            {
                "name": "OnCommentaryStarted",
                "type": "void",
                "desc": "Triggered when the commentary starts."
            },
            {
                "name": "OnCommentaryStopped",
                "type": "void",
                "desc": "Triggered when the commentary stops. If viewposition is set, this triggers after the player's returns to their regular view."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "point_energy_ball_launcher",
        "desc": "Launches Aperture Science High Energy Pellets. ",
        "bases": [
            "CombineBallSpawners"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Override ball material": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Ball count",
                "key": "ballcount",
                "type": "integer",
                "default": "1",
                "desc": "The number of Pellets that are alive at once."
            },
            {
                "name": "Max ball speed",
                "key": "maxspeed",
                "type": "float",
                "default": "150.0",
                "desc": "The maximum starting speed."
            },
            {
                "name": "Min ball speed",
                "key": "minspeed",
                "type": "float",
                "default": "150.0",
                "desc": "The minimum starting speed."
            },
            {
                "name": "Ball Type",
                "key": "balltype",
                "type": "choices",
                "default": "HEP (0)",
                "desc": "Has no effect.",
                "choices": {
                    "HEP": "0"
                }
            },
            {
                "name": "Ball Bounces",
                "key": "maxballbounces",
                "type": "integer",
                "default": "-1",
                "desc": "Sets on which bounce the ball should explode. For example, if set to 4, the ball will explode on the 4th bounce."
            },
            {
                "name": "Ball Lifetime",
                "key": "balllifetime",
                "type": "float",
                "default": "12",
                "desc": "The time in seconds the ball will live before self-destructing. A negative value will give infinite life, appearing green."
            },
            {
                "name": "Ball Damage",
                "key": "balldamage",
                "type": "float",
                "default": "1500",
                "desc": "The amount of damage to deal to the player on contact"
            },
            {
                "name": "Ball explodes on player contact",
                "key": "ballexplodeplayer",
                "type": "boolean",
                "default": "No",
                "desc": "Whether or not the ball should interact with the player."
            },
            {
                "name": "Ball body material override",
                "key": "ballmaterial1",
                "type": "material",
                "default": "effects/eball_infinite_life",
                "desc": "Override the main ball material. Remember to enable the flag! Default material behavior is used if the flag is not set!!!"
            },
            {
                "name": "Ball flicker material override",
                "key": "ballmaterial2",
                "type": "material",
                "default": "effects/combinemuzzle1",
                "desc": "Override the other ball material. Remember to enable the flag! Default material behavior is used if the flag is not set!!!"
            },
            {
                "name": "Ball knockback multiplier",
                "key": "ballknockback",
                "type": "float",
                "default": "0",
                "desc": "The ball's velocity is multiplied by this value to determine how strongly to knockback hit objects. Use 1 for 1:1 speed = knockback radio."
            },
            {
                "name": "Min life after portal transition",
                "key": "minlifeafterportal",
                "type": "float",
                "default": "6",
                "desc": "When energy balls created by this launcher pass through a portal their life is refreshed to be this number at minimum."
            }
        ],
        "inputs": [
            {
                "name": "LaunchBall",
                "type": "void",
                "desc": "Launch a ball from the spawner."
            },
            {
                "name": "BallCaught",
                "type": "void",
                "desc": "Ball this launcher created was 'caught'."
            }
        ],
        "outputs": [
            {
                "name": "OnPostSpawnBall",
                "type": "void",
                "desc": "Fired after the ball has spawned."
            },
            {
                "name": "OnBallCaught",
                "type": "void",
                "desc": "Fired when a ball this entity has launched has been 'caught'."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "portal_race_checkpoint",
        "desc": "Checkpoint for race maps. When touched, lights up and ticks down like a pedestal button.",
        "bases": [
            "BaseEntityAnimating"
        ],
        "keyvalues": [
            {
                "name": "Reset Time",
                "key": "resettime",
                "type": "float",
                "default": "5.0",
                "desc": "The time it takes for the checkpoint to reset after activation."
            }
        ],
        "inputs": [
            {
                "name": "Activate",
                "type": "void",
                "desc": "Activates the checkpoint."
            },
            {
                "name": "CancelActivate",
                "type": "void",
                "desc": "Cancels the checkpoint's activated state."
            },
            {
                "name": "Lock",
                "type": "void",
                "desc": "Locks the checkpoint from being activated."
            },
            {
                "name": "Unlock",
                "type": "void",
                "desc": "The checkpoint can be activated."
            }
        ],
        "outputs": [
            {
                "name": "OnCheckpointActivated",
                "type": "void",
                "desc": "Fired when the checkpoint is activated by the player."
            },
            {
                "name": "OnCheckpointReset",
                "type": "void",
                "desc": "Fired when the checkpoint is reset after being activated by the player."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_door_rotating",
        "desc": "An entity used to place a door in the world.",
        "bases": [
            "BaseEntityAnimating",
            "SetModel"
        ],
        "keyvalues": [
            {
                "name": "Slave Name",
                "key": "slavename",
                "type": "target_destination",
                "default": "",
                "desc": "The name of any doors that should be slaved to this door (i.e. should open when this one opens, and close when this one closes)."
            },
            {
                "name": "Hardware Type",
                "key": "hardware",
                "type": "choices",
                "default": "Lever (1)",
                "desc": "",
                "choices": {
                    "<None>": "0",
                    "Lever": "1",
                    "Push bar": "2",
                    "Keypad": "3"
                }
            },
            {
                "name": "Ajar Angles (Pitch Yaw Roll)",
                "key": "ajarangles",
                "type": "angle",
                "default": "0 0 0",
                "desc": "If the door 'Spawn Position' is set to Ajar, these are the angles to spawn at, instead of being open or closed."
            },
            {
                "name": "Spawn Position",
                "key": "spawnpos",
                "type": "choices",
                "default": "Closed (0)",
                "desc": "",
                "choices": {
                    "Closed": "0",
                    "Open clockwise": "1",
                    "Open counter-clockwise": "2",
                    "Ajar (use Ajar Angles)": "3"
                }
            },
            {
                "name": "Hinge Axis",
                "key": "axis",
                "type": "axis",
                "default": "",
                "desc": ""
            },
            {
                "name": "Rotation Distance (deg)",
                "key": "distance",
                "type": "float",
                "default": "90",
                "desc": "The amount, in degrees, that the door should rotate when opened."
            },
            {
                "name": "Speed",
                "key": "speed",
                "type": "float",
                "default": "100",
                "desc": "The speed at which the door moves."
            },
            {
                "name": "Fully Open Sound",
                "key": "soundopenoverride",
                "type": "sound",
                "default": "",
                "desc": "Sound played when the door has finished opening."
            },
            {
                "name": "Fully Closed Sound",
                "key": "soundcloseoverride",
                "type": "sound",
                "default": "",
                "desc": "Sound played when the door has finished closing."
            },
            {
                "name": "Moving Sound",
                "key": "soundmoveoverride",
                "type": "sound",
                "default": "",
                "desc": "Sound played when the door starts to move."
            },
            {
                "name": "Delay Before close (-1 stay open)",
                "key": "returndelay",
                "type": "integer",
                "default": "-1",
                "desc": "Amount of time, in seconds, after the door has opened before it closes. If the value is set to -1, the door never closes itself."
            },
            {
                "name": "Damage Inflicted When Blocked",
                "key": "dmg",
                "type": "integer",
                "default": "0",
                "desc": "Amount of damage done to entities that block the movement of this door, per frame."
            },
            {
                "name": "Health (0 = Unbreakable)",
                "key": "health",
                "type": "integer",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Locked Sound",
                "key": "soundlockedoverride",
                "type": "sound",
                "default": "",
                "desc": "Sound played when the player tries to open the door, and fails because it's locked."
            },
            {
                "name": "Unlocked Sound",
                "key": "soundunlockedoverride",
                "type": "sound",
                "default": "",
                "desc": "Sound played when the door is unlocked."
            },
            {
                "name": "Force Closed",
                "key": "forceclosed",
                "type": "boolean",
                "default": "No",
                "desc": "If set, this door will close no matter what. Useful for doors that have to close even if the player tries to block them with objects."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[2048] Starts locked": {
                        "default": false,
                        "num": 2048
                    },
                    "[4096] Door silent (No sound, and does not alert NPCs)": {
                        "default": false,
                        "num": 4096
                    },
                    "[8192] Use closes": {
                        "default": true,
                        "num": 8192
                    },
                    "[16384] Door silent to NPCS (Does not alert NPCs)": {
                        "default": false,
                        "num": 16384
                    },
                    "[32768] Ignore player +USE": {
                        "default": false,
                        "num": 32768
                    },
                    "[524288] Start Breakable": {
                        "default": false,
                        "num": 524288
                    }
                }
            },
            {
                "name": "Open Direction",
                "key": "opendir",
                "type": "choices",
                "default": "Open Both Directions (0)",
                "desc": "Force the door to open only forwards or only backwards. Both directions is the standard door behavior.",
                "choices": {
                    "Open Both Directions": "0",
                    "Open Clockwise Only": "1",
                    "Open Counter-Clockwise Only": "2"
                }
            },
            {
                "name": "Glow Distance",
                "key": "glowdist",
                "type": "integer",
                "default": "1024",
                "desc": ""
            },
            {
                "name": "Does the prop glow by default?",
                "key": "glowenabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Glow Color (R G B)",
                "key": "glowcolor",
                "type": "color255",
                "default": "255 255 255",
                "desc": "The color of the glow (if enabled)."
            }
        ],
        "inputs": [
            {
                "name": "Open",
                "type": "void",
                "desc": "Open the door, if it is not fully open."
            },
            {
                "name": "OpenAwayFrom",
                "type": "string",
                "desc": "Open the door away from the specified entity."
            },
            {
                "name": "Close",
                "type": "void",
                "desc": "Close the door, if it is not fully closed."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle the door between open and closed."
            },
            {
                "name": "Lock",
                "type": "void",
                "desc": "Lock the door."
            },
            {
                "name": "Unlock",
                "type": "void",
                "desc": "Unlock the door."
            },
            {
                "name": "SetRotationDistance",
                "type": "float",
                "desc": "Set the distance (in degrees) between Open and Closed."
            },
            {
                "name": "SetSpeed",
                "type": "float",
                "desc": "Set the speed at which the door rotates. 100 is default."
            },
            {
                "name": "MoveToRotationDistance",
                "type": "float",
                "desc": "Sets the open distance (in degrees) and moves there."
            },
            {
                "name": "SetGlowEnabled",
                "type": "void",
                "desc": "Starts the glow."
            },
            {
                "name": "SetGlowDisabled",
                "type": "void",
                "desc": "Stops the glow."
            },
            {
                "name": "SetUnbreakable",
                "type": "void",
                "desc": "The door can't be broken."
            },
            {
                "name": "SetBreakable",
                "type": "void",
                "desc": "The door can be broken."
            }
        ],
        "outputs": [
            {
                "name": "OnClose",
                "type": "void",
                "desc": "Fired when the door is told to close."
            },
            {
                "name": "OnOpen",
                "type": "void",
                "desc": "Fired when the door is told to open."
            },
            {
                "name": "OnFullyOpen",
                "type": "void",
                "desc": "Fired when the door reaches the fully open position."
            },
            {
                "name": "OnFullyClosed",
                "type": "void",
                "desc": "Fired when the door reaches the fully closed position."
            },
            {
                "name": "OnBlockedClosing",
                "type": "void",
                "desc": "Fired when the door is blocked while closing."
            },
            {
                "name": "OnBlockedOpening",
                "type": "void",
                "desc": "Fired when the door is blocked while opening."
            },
            {
                "name": "OnUnblockedClosing",
                "type": "void",
                "desc": "Fired when the door is unblocked while closing."
            },
            {
                "name": "OnUnblockedOpening",
                "type": "void",
                "desc": "Fired when the door is unblocked while opening."
            },
            {
                "name": "OnLockedUse",
                "type": "void",
                "desc": "Fired when the player uses the door, but it is locked."
            },
            {
                "name": "OnRotationDone",
                "type": "void",
                "desc": "Fired when the door arrives at it's goal angle."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "prop_dynamic_base",
        "desc": "",
        "bases": [
            "BaseEntityAnimating",
            "SetModel",
            "BreakableProp"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[64] Use Hitboxes for Renderbox": {
                        "default": false,
                        "num": 64
                    },
                    "[256] Start with collision disabled": {
                        "default": false,
                        "num": 256
                    }
                }
            },
            {
                "name": "Default Animation",
                "key": "defaultanim",
                "type": "string",
                "default": "",
                "desc": "The name of the idle animation that this prop will revert to whenever it finishes a random or forced animation."
            },
            {
                "name": "Randomly Animate",
                "key": "randomanimation",
                "type": "boolean",
                "default": "No",
                "desc": "If set, this prop will randomly choose and play animations, based upon the times specified in 'Min/Max Random Anim Time'. Inbetween the random animations, it will revert to playing the 'Default Animation'."
            },
            {
                "name": "Min Random Anim Time",
                "key": "minanimtime",
                "type": "float",
                "default": "5",
                "desc": "Minimum time between random animations."
            },
            {
                "name": "Max Random Anim Time",
                "key": "maxanimtime",
                "type": "float",
                "default": "10",
                "desc": "Maximum time between random animations."
            },
            {
                "name": "Disable Bone Followers",
                "key": "disablebonefollowers",
                "type": "boolean",
                "default": "No",
                "desc": "If set, the prop will not use bone followers, even if it has them defined."
            },
            {
                "name": "Hold Animation",
                "key": "holdanimation",
                "type": "boolean",
                "default": "No",
                "desc": "If set, the prop will not loop its animation, but hold the last frame."
            },
            {
                "name": "Suppress Anim Sounds",
                "key": "suppressanimsounds",
                "type": "boolean",
                "default": "No",
                "desc": "If set, the prop will not play any sounds that are embedded in animations it plays."
            },
            {
                "name": "Animate Every Frame",
                "key": "animateeveryframe",
                "type": "boolean",
                "default": "No",
                "desc": "Force this prop to animate every frame. This ensures it immediately transitions to the next animation, but means it's contantly checking this."
            }
        ],
        "inputs": [
            {
                "name": "SetAnimation",
                "type": "string",
                "desc": "Force the prop to play an animation. The parameter should be the name of the animation."
            },
            {
                "name": "SetDefaultAnimation",
                "type": "string",
                "desc": "Set the Default Animation to the one specified in the parameter."
            },
            {
                "name": "SetPlaybackRate",
                "type": "float",
                "desc": "Set the playback rate for the animation."
            },
            {
                "name": "SetBodyGroup",
                "type": "integer",
                "desc": "Set the visible bodygroup, by index."
            },
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Make the prop visible."
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Make the prop invisible."
            },
            {
                "name": "EnableCollision",
                "type": "void",
                "desc": "Enable collision on the prop."
            },
            {
                "name": "DisableCollision",
                "type": "void",
                "desc": "Disable collision on the prop."
            },
            {
                "name": "SetAnimationNoReset",
                "type": "string",
                "desc": "Force the prop to play an animation unless the prop is already playing the animation. The parameter should be the name of the animation."
            },
            {
                "name": "BecomeRagdoll",
                "type": "void",
                "desc": "Change into a ragdoll immediately."
            },
            {
                "name": "FadeAndKill",
                "type": "void",
                "desc": "Fade out then remove this prop."
            }
        ],
        "outputs": [
            {
                "name": "OnAnimationBegun",
                "type": "void",
                "desc": "Fired whenever a new animation has begun playing."
            },
            {
                "name": "OnAnimationDone",
                "type": "void",
                "desc": "Fired whenever an animation is complete."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_exploding_futbol",
        "desc": "The bombs used by Wheatley.",
        "bases": [
            "BaseEntityPhysics"
        ],
        "keyvalues": [
            {
                "name": "Explode on touch",
                "key": "explodeontouch",
                "type": "boolean",
                "default": "No",
                "desc": "If the bomb should explode when it touches something."
            }
        ],
        "inputs": [
            {
                "name": "Explode",
                "type": "void",
                "desc": "Explodes the bomb."
            }
        ],
        "outputs": [
            {
                "name": "OnExplode",
                "type": "void",
                "desc": "Called when the bomb explodes."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_hallucination",
        "desc": "A prop that players can't get a good look at, hopefully making them unsure if it's there at all",
        "bases": [
            "BaseEntityAnimating",
            "SetModel"
        ],
        "keyvalues": [
            {
                "name": "Enabled Chance",
                "key": "enabledchance",
                "type": "float",
                "default": "100.0",
                "desc": "Percentage chance the hallucination starts enabled. 0 is always off, 100 is always on"
            },
            {
                "name": "Visible Time",
                "key": "visibletime",
                "type": "float",
                "default": "0.215",
                "desc": "Number of seconds the hallucination stays visible from the first frame it can be seen"
            },
            {
                "name": "Recharge Time",
                "key": "rechargetime",
                "type": "float",
                "default": "0.0",
                "desc": "Number of seconds the hallucination stays invisible before it can be seen again. 0 to disable recharging"
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable the hallucination algorithm"
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable the hallucination algorithm"
            },
            {
                "name": "SetVisibleTime",
                "type": "float",
                "desc": "Set Visible Time"
            },
            {
                "name": "SetRechargeTime",
                "type": "float",
                "desc": "Set Recharge Time"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_laser_catcher",
        "desc": "Discouragement Beam Catcher that detects a laser, absorbing the beam. The entity will fire outputs when struck and unstruck.",
        "bases": [
            "BaseEntityAnimating",
            "SRCIndicator"
        ],
        "keyvalues": [
            {
                "name": "Skin Type",
                "key": "skintype",
                "type": "choices",
                "default": "Clean (0)",
                "desc": "Set the type of catcher to use.",
                "choices": {
                    "Clean": "0",
                    "Rusted": "1"
                }
            },
            {
                "name": "[H] Skin Type",
                "key": "skin",
                "type": "choices",
                "default": "Clean  - Off (0)",
                "desc": "The skin to show in Hammer.",
                "choices": {
                    "Clean  - Off": "0",
                    "Clean  - On": "1",
                    "Rusted - Off": "2",
                    "Rusted - On": "3"
                }
            },
            {
                "name": "Laser Catcher Model",
                "key": "model",
                "type": "choices",
                "default": "Centered (models/props/laser_catcher_center.mdl)",
                "desc": "Is the catcher offset? (You can also add a custom model here.)",
                "choices": {
                    "Centered": "models/props/laser_catcher_center.mdl",
                    "Offset": "models/props/laser_catcher.mdl"
                }
            },
            {
                "name": "Fix Skins Logic",
                "key": "src_fix_skins",
                "type": "boolean",
                "default": "No",
                "desc": "If set, add extra outputs to fix the bug with skins not changing after a reload from save."
            },
            {
                "name": "Use Laser Filter",
                "key": "uselaserfilter",
                "type": "boolean",
                "default": "No",
                "desc": "If enabled, this catcher can only be activated by the specified laser color."
            },
            {
                "name": "Laser Filter Color",
                "key": "filtercolor",
                "type": "choices",
                "default": "White (255 255 255 255)",
                "desc": "Filter lasers by this color. You can also specify a custom RGBA color here.",
                "choices": {
                    "White": "255 255 255 255",
                    "Default Red": "255 0 0 255",
                    "Lethal Green": "100 255 100 255",
                    "Blue": "32 112 202 255",
                    "Yellow": "255 212 91 255",
                    "Pink": "212 60 146 255",
                    "Dark Green": "65 97 0 255"
                }
            }
        ],
        "inputs": [
            {
                "name": "Skin",
                "type": "integer",
                "desc": "Set the skin of the catcher manually."
            },
            {
                "name": "SetFilterColor",
                "type": "color255",
                "desc": "Changes the laser filter colour."
            }
        ],
        "outputs": [
            {
                "name": "OnPowered",
                "type": "void",
                "desc": "Fired when a laser hits the target."
            },
            {
                "name": "OnUnpowered",
                "type": "void",
                "desc": "Fired when a laser has stopped hitting the target."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_laser_relay",
        "desc": "Discouragement Beam Relay that detects lasers, whilst allowing it to pass through and hit other Relays. The entity will fire outputs when struck and unstruck.",
        "bases": [
            "BaseEntityAnimating",
            "SRCIndicator"
        ],
        "keyvalues": [
            {
                "name": "Skin Type",
                "key": "skintype",
                "type": "choices",
                "default": "Clean (0)",
                "desc": "Set the type of catcher to use.",
                "choices": {
                    "Clean": "0",
                    "Rusted": "1"
                }
            },
            {
                "name": "Laser Relay Model",
                "key": "model",
                "type": "studio",
                "default": "models/props/laser_receptacle.mdl",
                "desc": "Choose a custom model for the relay."
            },
            {
                "name": "[H] Skin Type",
                "key": "skin",
                "type": "choices",
                "default": "Clean  - Off (0)",
                "desc": "The skin to show in Hammer.",
                "choices": {
                    "Clean  - Off": "0",
                    "Rusted  - On": "1"
                }
            },
            {
                "name": "Use Laser Filter",
                "key": "uselaserfilter",
                "type": "boolean",
                "default": "No",
                "desc": "If enabled, this relay can only be activated by the specified laser color."
            },
            {
                "name": "Laser Filter Color",
                "key": "filtercolor",
                "type": "choices",
                "default": "White (255 255 255 255)",
                "desc": "Filter lasers by this color. You can also specify a custom RGBA color here.",
                "choices": {
                    "White": "255 255 255 255",
                    "Default Red": "255 0 0 255",
                    "Lethal Green": "100 255 100 255",
                    "Blue": "32 112 202 255",
                    "Yellow": "255 212 91 255",
                    "Pink": "212 60 146 255",
                    "Dark Green": "65 97 0 255"
                }
            }
        ],
        "inputs": [
            {
                "name": "SetFilterColor",
                "type": "color255",
                "desc": "Changes the laser filter colour."
            }
        ],
        "outputs": [
            {
                "name": "OnPowered",
                "type": "void",
                "desc": "Fired when a laser hits the target."
            },
            {
                "name": "OnUnpowered",
                "type": "void",
                "desc": "Fired when a laser has stopped hitting the target."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_mirror",
        "desc": "A basic mirror model",
        "bases": [
            "BaseEntityAnimating",
            "SetModel"
        ],
        "keyvalues": [
            {
                "name": "Width",
                "key": "width",
                "type": "float",
                "default": "64.0",
                "desc": "The width of the mirror when there's no model"
            },
            {
                "name": "Height",
                "key": "height",
                "type": "float",
                "default": "108.0",
                "desc": "The height of the mirror when there's no model"
            },
            {
                "name": "Physics",
                "key": "physicsenabled",
                "type": "boolean",
                "default": "No",
                "desc": "Move physically"
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_monster_box",
        "desc": "FrankenCubes, they walk about when oriented correctly but otherwise behave like normal Storage Cubes.",
        "bases": [
            "BaseEntityPhysics"
        ],
        "keyvalues": [
            {
                "name": "Start As Box",
                "key": "startasbox",
                "type": "boolean",
                "default": "No",
                "desc": "Start the FrankenTurret in cube form."
            },
            {
                "name": "Box Switch Speed",
                "key": "boxswitchspeed",
                "type": "float",
                "default": "400",
                "desc": "Speed to force switch to a box."
            },
            {
                "name": "Allow SilentDissolve input",
                "key": "allowsilentdissolve",
                "type": "boolean",
                "default": "No",
                "desc": "Allow the SilentDissolve input to dissolve this FrankenCube."
            },
            {
                "name": "[H] Pose",
                "key": "model",
                "type": "choices",
                "default": "Extended (models/npcs/monsters/monster_a.mdl)",
                "desc": "What pose to show in Hammer.",
                "choices": {
                    "Extended": "models/npcs/monsters/monster_a.mdl",
                    "Cube": "models/npcs/monsters/monster_a_box.mdl"
                }
            }
        ],
        "inputs": [
            {
                "name": "BecomeBox",
                "type": "string",
                "desc": "Force the FrankenTurret to switch to cube form."
            },
            {
                "name": "BecomeMonster",
                "type": "void",
                "desc": "Return the FrankenCube to extended form."
            },
            {
                "name": "BecomeShortcircuit",
                "type": "void",
                "desc": "Short circuit this FrankenCube and permanently switch to cube form. Creates arc particles randomly across the cube, and the turret's eyes flicker randomly."
            },
            {
                "name": "Dissolve",
                "type": "void",
                "desc": "Fizzles the FrankenCube."
            },
            {
                "name": "SilentDissolve",
                "type": "void",
                "desc": "Kills the FrankenCube and fires its OnFizzled output, if the relevant setting is on."
            }
        ],
        "outputs": [
            {
                "name": "OnFizzled",
                "type": "void",
                "desc": "Fired when a cube is fizzled."
            },
            {
                "name": "OnPlayerUse",
                "type": "void",
                "desc": "Any player +USEd the cube."
            },
            {
                "name": "OnPlayerPickup",
                "type": "void",
                "desc": "Any player picked up the cube."
            },
            {
                "name": "OnPhysGunDrop",
                "type": "void",
                "desc": "Any player dropped the cube."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_paint_bomb",
        "desc": "Large blob of gel which explodes on impact. Respawn with a point_template.",
        "bases": [
            "BaseEntityPhysics",
            "BasePaintType"
        ],
        "keyvalues": [
            {
                "name": "Bomb Type",
                "key": "bombtype",
                "type": "choices",
                "default": "Dry Bomb (0)",
                "desc": "The type of explosion.",
                "choices": {
                    "Dry Bomb": "0",
                    "Wet Bomb": "1"
                }
            },
            {
                "name": "Allow Portal Funneling",
                "key": "allowfunnel",
                "type": "boolean",
                "default": "No",
                "desc": "Whether or not this object should auto-funnel into a portal."
            },
            {
                "name": "Allow SilentDissolve input",
                "key": "allowsilentdissolve",
                "type": "boolean",
                "default": "No",
                "desc": "Allow the SilentDissolve input to dissolve this bomb."
            },
            {
                "name": "Play Spawn Sound",
                "key": "playspawnsound",
                "type": "boolean",
                "default": "No",
                "desc": "Whether or not this bomb should play a sound on spawn (PaintBlob.Inception)."
            },
            {
                "name": "Model",
                "key": "model",
                "type": "studio",
                "default": "models/error.mdl",
                "desc": "Paint bombs need a model set to suppress a warning message. This model would be loaded already."
            }
        ],
        "inputs": [
            {
                "name": "Dissolve",
                "type": "void",
                "desc": "Dissolves the paint bomb."
            },
            {
                "name": "SilentDissolve",
                "type": "void",
                "desc": "Kills the paint bomb and fires its OnFizzled output."
            },
            {
                "name": "EnablePortalFunnel",
                "type": "void",
                "desc": "Enable portal funneling behavior."
            },
            {
                "name": "DisablePortalFunnel",
                "type": "void",
                "desc": "Disable portal funneling behavior."
            }
        ],
        "outputs": [
            {
                "name": "OnFizzled",
                "type": "void",
                "desc": "Fired when a paint bomb is fizzled (by trigger_paint_cleanser?)."
            },
            {
                "name": "OnExploded",
                "type": "void",
                "desc": "Fired when a paint bomb explodes."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_portal_stats_display",
        "desc": "Portal Stats Display, for P1's challenge mode.",
        "bases": [
            "BaseEntityAnimating"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Turn on and display the current stats"
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Turn off stats display"
            },
            {
                "name": "UpdateStats",
                "type": "void",
                "desc": "Updates the stats to the player's current level stats"
            },
            {
                "name": "ResetPlayerStats",
                "type": "void",
                "desc": "Resets the curret level stats of the player"
            }
        ],
        "outputs": [
            {
                "name": "OnMetPortalObjective",
                "type": "void",
                "desc": "Fired when enabled and player met the number of portal placements."
            },
            {
                "name": "OnMetStepsObjective",
                "type": "void",
                "desc": "Fired when enabled and player met the number of foot steps."
            },
            {
                "name": "OnMetSecondsObjective",
                "type": "void",
                "desc": "Fired when enabled and player met the number of seconds."
            },
            {
                "name": "OnFailedAllObjectives",
                "type": "void",
                "desc": "Fired when enabled and player met no objectives."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_ragdoll",
        "desc": "A prop that physically simulates and can be articulated with internal joints. The joint constraints are part of the physics model.",
        "bases": [
            "BaseEntityPhysics",
            "EnableDisable",
            "SystemLevelChoice",
            "SetModel"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[4] Debris - Don't collide with the player or other debris": {
                        "default": true,
                        "num": 4
                    },
                    "[4096] Use LRU Retirement": {
                        "default": false,
                        "num": 4096
                    },
                    "[8192] Allow Dissolve": {
                        "default": false,
                        "num": 8192
                    },
                    "[16384] Motion Disabled": {
                        "default": false,
                        "num": 16384
                    },
                    "[32768] Allow stretch": {
                        "default": false,
                        "num": 32768
                    },
                    "[65536] Start asleep": {
                        "default": false,
                        "num": 65536
                    }
                }
            },
            {
                "name": "Override Animation",
                "key": "angleoverride",
                "type": "string",
                "default": "",
                "desc": "Filled in by the engine via hammer_update_entity, do not edit by hand except to clear."
            }
        ],
        "inputs": [
            {
                "name": "StartRagdollBoogie",
                "type": "float",
                "desc": "Begins ragdoll boogie effect. Parameter override = number of seconds to boogie."
            },
            {
                "name": "EnableMotion",
                "type": "void",
                "desc": "Enable physics motion/collision response."
            },
            {
                "name": "DisableMotion",
                "type": "void",
                "desc": "Disable physics motion/collision response."
            },
            {
                "name": "FadeAndRemove",
                "type": "float",
                "desc": "Fade out then remove (kill) self. Parameter override = duration of fade"
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_rocket_tripwire",
        "desc": "A stationary rocket turret that fires a rocket when players walk in front of it.",
        "bases": [
            "BaseEntityAnimating"
        ],
        "keyvalues": [
            {
                "name": "Rocket Speed",
                "key": "rocketspeed",
                "type": "float",
                "default": "450",
                "desc": "Speed the rocket will travel at."
            },
            {
                "name": "Rocket Lifetime",
                "key": "rocketlifetime",
                "type": "float",
                "default": "20",
                "desc": "The rocket will automatically detonate after this number of seconds."
            },
            {
                "name": "Initial State",
                "key": "startdisabled",
                "type": "choices",
                "default": "Enabled (0)",
                "desc": "",
                "choices": {
                    "Enabled": "0",
                    "Disabled": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "ForceFire",
                "type": "void",
                "desc": "Forces the rocket turret to fire."
            },
            {
                "name": "EnableTripwire",
                "type": "void",
                "desc": "Enables the rocket turret."
            },
            {
                "name": "DisableTripwire",
                "type": "void",
                "desc": "Disables the rocket turret."
            }
        ],
        "outputs": [
            {
                "name": "OnTripped",
                "type": "void",
                "desc": "Fires when the laser has been tripped"
            },
            {
                "name": "OnRocketExplode",
                "type": "void",
                "desc": "Fires when the rocket explodes."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_telescopic_arm",
        "desc": "Telescopic Arm. Useless.",
        "bases": [
            "BaseEntityAnimating"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable Thumper"
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable Thumper"
            },
            {
                "name": "SetTarget",
                "type": "target_destination",
                "desc": "Set the entity to target."
            },
            {
                "name": "TargetPlayer",
                "type": "void",
                "desc": "Set the player as the entity to target."
            }
        ],
        "outputs": [
            {
                "name": "OnFoundTarget",
                "type": "void",
                "desc": "Arm has direct LOS to target entity."
            },
            {
                "name": "OnLostTarget",
                "type": "void",
                "desc": "Arm has lost direct LOS to target entity."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_testchamber_door",
        "desc": "Portal Door.",
        "bases": [
            "BaseEntityAnimating"
        ],
        "keyvalues": [
            {
                "name": "Lighting Origin",
                "key": "lightingorigin",
                "type": "target_destination",
                "default": "",
                "desc": "Select an info_lighting to specify a location to sample lighting from for this door, instead of the origins."
            },
            {
                "name": "Area Portal Window Name",
                "key": "areaportalwindow",
                "type": "target_destination",
                "default": "",
                "desc": "The name of an area portal window that is controlled by the door. When closed, the window will be forced shut"
            },
            {
                "name": "Fade Area Portal?",
                "key": "useareaportalfade",
                "type": "boolean",
                "default": "No",
                "desc": "If the area portal should use the specified fade distances to fade out. Otherwise, it will be set to a distance of 10000 (effectively infinite)."
            },
            {
                "name": "Fade Start Distance",
                "key": "areaportalfadestart",
                "type": "float",
                "default": "0",
                "desc": "The distance at which the area portal starts fading out."
            },
            {
                "name": "Fade End Distance",
                "key": "areaportalfadeend",
                "type": "float",
                "default": "0",
                "desc": "The distance at which the area portal turns completely opaque."
            },
            {
                "name": "Start Open",
                "key": "open",
                "type": "boolean",
                "default": "No",
                "desc": "If set, the door starts in the open state."
            },
            {
                "name": "Start Locked",
                "key": "locked",
                "type": "boolean",
                "default": "No",
                "desc": "If set, the door starts locked and can no longer change open or closed state."
            },
            {
                "name": "Use New Model",
                "key": "isnewmodel",
                "type": "boolean",
                "default": "No",
                "desc": "Use the new model for Portal: Revolution"
            },
            {
                "name": "Dirty",
                "key": "isdirty",
                "type": "boolean",
                "default": "No",
                "desc": "Whether this is a dirty door. Requires new model!!"
            },
            {
                "name": "======== Old ========",
                "key": "separator50",
                "type": "string",
                "default": "",
                "desc": "=================="
            },
            {
                "name": "Skin",
                "key": "skin",
                "type": "integer",
                "default": "0",
                "desc": "Skin to use in game."
            },
            {
                "name": "Model",
                "key": "model",
                "type": "studio",
                "default": "models/props/portal_door_combined_new.mdl",
                "desc": "Model to use in-game"
            }
        ],
        "inputs": [
            {
                "name": "Open",
                "type": "void",
                "desc": "Open the door and cause the areaportal to return to fading."
            },
            {
                "name": "Close",
                "type": "void",
                "desc": "Close the door and cause the areaportal to close."
            },
            {
                "name": "LockOpen",
                "type": "void",
                "desc": "Open the door and lock it in that state, so it will ignore further inputs."
            },
            {
                "name": "Lock",
                "type": "void",
                "desc": "Locking a door will prevent the Open or Close inputs from doing anything."
            },
            {
                "name": "Unlock",
                "type": "void",
                "desc": "If locked, unlocking a door will allow the Open or Close inputs to function."
            }
        ],
        "outputs": [
            {
                "name": "OnOpen",
                "type": "void",
                "desc": "Called when the door has started its open animation."
            },
            {
                "name": "OnClose",
                "type": "void",
                "desc": "Called when the door has started its close animation."
            },
            {
                "name": "OnFullyOpen",
                "type": "void",
                "desc": "Called when the door has finished its open animation."
            },
            {
                "name": "OnFullyClosed",
                "type": "void",
                "desc": "Called when the door has finished its close animation."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "scripted_scene",
        "desc": "Alternate name for logic_choreographed_scene.",
        "bases": [
            "logic_choreographed_scene"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "simple_physics_brush",
        "desc": "A simple physics brush with no unique properties. Brush-based entities converted by phys_convert are turned into this entity. Use func_physbox instead for more options.",
        "bases": [
            "BaseEntityVisBrush"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_autosave",
        "desc": "A trigger volume that autosaves when the player touches it.",
        "bases": [
            "TriggerOnce"
        ],
        "keyvalues": [
            {
                "name": "Force New Level Unit",
                "key": "newlevelunit",
                "type": "boolean",
                "default": "No",
                "desc": "If set, the save will discard any savedata from previous levels, for the purpose of keeping savegame filesizes down. Can only be safely used if there is no way for the player to return to previous levels."
            },
            {
                "name": "Dangerous Timer",
                "key": "dangeroustimer",
                "type": "float",
                "default": "0",
                "desc": "The number of seconds the player must survive before this autosave takes effect."
            },
            {
                "name": "Minumum Hit Points",
                "key": "minimumhitpoints",
                "type": "integer",
                "default": "0",
                "desc": "Don't save dangerous when player has less than this many hitpoints."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_once",
        "desc": "A trigger volume that removes itself after it is triggered once.",
        "bases": [
            "TriggerOnce"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "weapon_cubemap",
        "desc": "Debugging weapon used to show cubemaps in a region.",
        "bases": [
            "Weapon"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "weapon_paintgun",
        "desc": "Aperture Science Handheld Gel Accelerator",
        "bases": [
            "Weapon"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "weapon_portalgun",
        "desc": "Aperture Science Handheld Portal Device",
        "bases": [
            "Weapon"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[8] Disable pickup sounds": {
                        "default": false,
                        "num": 8
                    }
                }
            },
            {
                "name": "Can Fire Blue Portals",
                "key": "canfireportal1",
                "type": "boolean",
                "default": "No",
                "desc": "Can this portalgun create blue portals?"
            },
            {
                "name": "Can Fire Orange Portals",
                "key": "canfireportal2",
                "type": "boolean",
                "default": "No",
                "desc": "Can this portalgun create orange portals?"
            },
            {
                "name": "Show PoTaToS",
                "key": "showingpotatos",
                "type": "boolean",
                "default": "No",
                "desc": "Show PoTaToS on the portal gun."
            },
            {
                "name": "Player",
                "key": "startingteamnum",
                "type": "choices",
                "default": "Chell/Bendy (0)",
                "desc": "Which player this gun belongs to.  Will decide which portals it fires before being picked up, as well as the skin.",
                "choices": {
                    "Chell/Bendy": "0",
                    "P-Body": "2",
                    "ATLAS": "3"
                }
            },
            {
                "name": "[H] Stripes",
                "key": "skin",
                "type": "choices",
                "default": "None (0)",
                "desc": "Which stripes to show in Hammer.",
                "choices": {
                    "None": "0",
                    "Blue": "1",
                    "Orange": "2"
                }
            },
            {
                "name": "World Model",
                "key": "model",
                "type": "studio",
                "default": "models/weapons/w_portalgun.mdl",
                "desc": "The model shown for the portalgun entity and in the player's hand in third-person view."
            },
            {
                "name": "View Model",
                "key": "viewmodel",
                "type": "studio",
                "default": "models/weapons/v_portalgun.mdl",
                "desc": "The model shown in the player's first-person view."
            },
            {
                "name": "Custom Portal Colors",
                "key": "customportalcolors",
                "type": "boolean",
                "default": "No",
                "desc": "Use custom portal colors."
            },
            {
                "name": "Primary Portal Color",
                "key": "portal1color",
                "type": "color255",
                "default": "64 160 255",
                "desc": "Color to use for the primary (Left/Blue) portal."
            },
            {
                "name": "Secondary Portal Color",
                "key": "portal2color",
                "type": "color255",
                "default": "255 160 32",
                "desc": "Color to use for the primary (Right/Orange) portal."
            }
        ],
        "inputs": [
            {
                "name": "ChargePortal1",
                "type": "void",
                "desc": "Does charge up effect for mounted portalgun. Missing particles and sounds."
            },
            {
                "name": "ChargePortal2",
                "type": "void",
                "desc": "Does charge up effect for mounted portalgun. Missing particles and sounds."
            },
            {
                "name": "FirePortal1",
                "type": "void",
                "desc": "Projects the\t'blue' portal onto a wall in the facing direction of the gun."
            },
            {
                "name": "FirePortal2",
                "type": "void",
                "desc": "Projects the 'orange' portal onto a wall in the facing direction of the gun."
            },
            {
                "name": "FirePortalDirection1",
                "type": "vector",
                "desc": "Fires the 'blue' portal in the specified direction."
            },
            {
                "name": "FirePortalDirection2",
                "type": "vector",
                "desc": "Fires the 'orange' portal in the specified direction."
            }
        ],
        "outputs": [
            {
                "name": "OnFiredPortal1",
                "type": "void",
                "desc": "Fires when the 'blue' portal is fired."
            },
            {
                "name": "OnFiredPortal2",
                "type": "void",
                "desc": "Fires when the 'orange' portal is fired."
            }
        ]
    },
    {
        "type": "BASE",
        "classname": "BaseNPC",
        "desc": "Behaviour only applicable to visible NPCs.",
        "bases": [
            "BaseLogicalNPC",
            "ToggleDraw"
        ],
        "keyvalues": [
            {
                "name": "Target Path Corner",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "If set, the name of a path corner entity that this NPC will walk to, after spawning."
            },
            {
                "name": "Expression Override",
                "key": "expressionoverride",
                "type": "sound",
                "default": "",
                "desc": "Enter a VCD file to override facial expressions on this NPC."
            },
            {
                "name": "Don't Use Speech Semaphore?",
                "key": "dontusespeechsemaphore",
                "type": "choices",
                "default": "No (Use speech semaphore) (0)",
                "desc": "Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks.",
                "choices": {
                    "No (Use speech semaphore)": "0",
                    "Yes (Don't use speech semaphore)": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "SetBodyGroup",
                "type": "integer",
                "desc": "HACK: Sets this NPC's body group (from 0 - n). You'd better know what you are doing!"
            },
            {
                "name": "SetExpressionOverride",
                "type": "string",
                "desc": "Set a VCD file to override facial expressions on this NPC."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "TeleTrigger",
        "desc": "",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[32] Preserve angles even when a local landmark is not specified": {
                        "default": false,
                        "num": 32
                    },
                    "[8388608] Teleport the player on leaving the trigger instead of entering it": {
                        "default": false,
                        "num": 8388608
                    },
                    "[1] Clients/Players": {
                        "default": true,
                        "num": 1
                    },
                    "[2] NPCs": {
                        "default": false,
                        "num": 2
                    },
                    "[4] func_pushable": {
                        "default": false,
                        "num": 4
                    },
                    "[8] Physics Objects": {
                        "default": false,
                        "num": 8
                    },
                    "[16] Only player ally NPCs": {
                        "default": false,
                        "num": 16
                    },
                    "[64] Everything (not including physics debris)": {
                        "default": false,
                        "num": 64
                    },
                    "[1024] Physics debris": {
                        "default": false,
                        "num": 1024
                    },
                    "[4096] Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physobjs (car, blob...)": {
                        "default": true,
                        "num": 4096
                    }
                }
            },
            {
                "name": "Remote Destination",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The entity specifying the point to which the player should be teleported."
            },
            {
                "name": "Local Destination Landmark",
                "key": "landmark",
                "type": "target_destination",
                "default": "",
                "desc": "In landmark mode, teleported entities are offset from the target by their initial offset from the landmark. Angles and velocity are also reoriented to the destination if enabled."
            },
            {
                "name": "Velocity Scale Factor (X Y Z)",
                "key": "velocityscale",
                "type": "vector",
                "default": "1 1 1",
                "desc": "Scale the player's velocity per-axis"
            },
            {
                "name": "Teleport mode",
                "key": "mode",
                "type": "choices",
                "default": "Reset velocity (1)",
                "desc": "",
                "choices": {
                    "Default (do nothing)": "0",
                    "Reset velocity": "1",
                    "Keep negative Z (downwards) velocity only": "2",
                    "Redirect velocity to destination angles": "3",
                    "Landmark teleport": "4",
                    "Set speed": "5"
                }
            },
            {
                "name": "Reorient Landmark",
                "key": "reorient_landmark",
                "type": "boolean",
                "default": "No",
                "desc": "(Landmark mode only) Reorient origin, angles and velocity from the landmark'slocal space to the destination's. This means the destination room does not have to face the same way."
            },
            {
                "name": "Reset the player angles on teleport",
                "key": "resetang",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Use Landmark Angles",
                "key": "uselandmarkangles",
                "type": "boolean",
                "default": "No",
                "desc": "(Landmark mode only) Forces the teleported object to snap to the angles of the destination landmark."
            },
            {
                "name": "Set Custom Speed",
                "key": "setspeed",
                "type": "float",
                "default": "400",
                "desc": "(Set speed mode only) Forces the player to this speed on teleport."
            },
            {
                "name": "Only Spawn-Valid Destinations",
                "key": "checkdestifclearforplayer",
                "type": "boolean",
                "default": "No",
                "desc": "Only teleport if there is a clear teleport destination."
            }
        ],
        "inputs": [
            {
                "name": "SetRemoteDestination",
                "type": "string",
                "desc": "Set a new remote teleport destination."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_breakable",
        "desc": "A brush entity that can be broken from damage, or an input.",
        "bases": [
            "BreakableBrush"
        ],
        "keyvalues": [
            {
                "name": "Min Damage to Hurt",
                "key": "minhealthdmg",
                "type": "integer",
                "default": "0",
                "desc": "The prop will ignore any damage events if the damage is less than this amount."
            },
            {
                "name": "Physics Impact Damage Scale",
                "key": "physdamagescale",
                "type": "float",
                "default": "1.0",
                "desc": "Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_breakable_surf",
        "desc": "A breakable surface, for partially breakable glass / tile / etc. All faces but the desired visible one must be marked as NODRAW and that face must be 4 sided. The material applied to the visible face must be set up to be breakable.",
        "bases": [
            "BreakableBrush"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Physics damage decals": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Take damage from held objects": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Play break sound": {
                        "default": false,
                        "num": 4
                    }
                }
            },
            {
                "name": "Health",
                "key": "health",
                "type": "integer",
                "default": "5",
                "desc": "The amount of damage the surface takes before breaking."
            },
            {
                "name": "Fragility",
                "key": "fragility",
                "type": "integer",
                "default": "100",
                "desc": "If the 'Surface Type' is set to Glass, this value sets how fragile the glass pieces are after the surface has been broken. Lower values make glass pieces tend to stay more."
            },
            {
                "name": "Surface Type",
                "key": "surfacetype",
                "type": "choices",
                "default": "Glass (0)",
                "desc": "Sets the behaviour of the brush. Glass shatters in multiple sizes, and easily breaks. Tile only breaks along edges, and is still strong after being shattered.",
                "choices": {
                    "Glass": "0",
                    "Tile": "1"
                }
            },
            {
                "name": "Lower Left Corner (readonly)",
                "key": "lowerleft",
                "type": "vecline",
                "default": "",
                "desc": "This is set automatically by Hammer when saving."
            },
            {
                "name": "Lower Right Corner (readonly)",
                "key": "lowerright",
                "type": "vecline",
                "default": "",
                "desc": "This is set automatically by Hammer when saving."
            },
            {
                "name": "Upper Left Corner (readonly)",
                "key": "upperleft",
                "type": "vecline",
                "default": "",
                "desc": "This is set automatically by Hammer when saving."
            },
            {
                "name": "Upper Right Corner (readonly)",
                "key": "upperright",
                "type": "vecline",
                "default": "",
                "desc": "This is set automatically by Hammer when saving."
            },
            {
                "name": "Face Error",
                "key": "error",
                "type": "choices",
                "default": "No Error (0)",
                "desc": "Set by Hammer to indicate an invalid glass/tile surface.",
                "choices": {
                    "No Error": "0",
                    "Multiple Textured Faces": "1",
                    "Non-Square Face": "2"
                }
            }
        ],
        "inputs": [
            {
                "name": "Shatter",
                "type": "vector",
                "desc": "Shatter the window. Input a vector. First two coordinates are the X,Y center of the shattering (as values from from 0-1). The third coordinate is the radius of the shatter, in units."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_door",
        "desc": "A brush entity for use as a player-useable door that linearly moves.",
        "bases": [
            "Door",
            "Angles",
            "Origin"
        ],
        "keyvalues": [
            {
                "name": "Move Direction (Pitch Yaw Roll)",
                "key": "movedir",
                "type": "angle",
                "default": "0 0 0",
                "desc": "The direction the door will move, when it opens."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_door_rotating",
        "desc": "A brush entity for use as a rotating player-useable door.",
        "bases": [
            "Door",
            "Angles",
            "Origin"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[2] Reverse Dir": {
                        "default": false,
                        "num": 2
                    },
                    "[16] One-way": {
                        "default": false,
                        "num": 16
                    },
                    "[64] X Axis": {
                        "default": false,
                        "num": 64
                    },
                    "[128] Y Axis": {
                        "default": false,
                        "num": 128
                    },
                    "[65536] New func_door +USE rules (NOT for prop_doors!!)": {
                        "default": false,
                        "num": 65536
                    }
                }
            },
            {
                "name": "Distance",
                "key": "distance",
                "type": "float",
                "default": "90",
                "desc": "The amount, in degrees, that the door should rotate when opened."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_lookdoor",
        "desc": "A door that moves either when looked by a targeted object or when a target object comes near the door.  Behavior can be either based on viewing direction or proximity alone, or on a combination of both.  If inverted the doors behavior will be the opposite.",
        "bases": [
            "func_movelinear"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[8192] LookDoor Threshold": {
                        "default": false,
                        "num": 8192
                    },
                    "[16384] LookDoor Invert": {
                        "default": false,
                        "num": 16384
                    },
                    "[32768] LookDoor From Open": {
                        "default": false,
                        "num": 32768
                    }
                }
            },
            {
                "name": "Proximity Distance",
                "key": "proximitydistance",
                "type": "string",
                "default": "0.0",
                "desc": "If non-zero, proximity range over which door will move"
            },
            {
                "name": "Proximity Offset",
                "key": "proximityoffset",
                "type": "string",
                "default": "0.0",
                "desc": "Offset from the target object"
            },
            {
                "name": "FieldOfView",
                "key": "fieldofview",
                "type": "string",
                "default": "0.0",
                "desc": "If non-zero, field of view over which door will move. The target must then be a NPC/player!"
            }
        ],
        "inputs": [
            {
                "name": "InvertOn",
                "type": "void",
                "desc": "InvertOn - when set behavior of door is inverted."
            },
            {
                "name": "InvertOff",
                "type": "void",
                "desc": "InvertOff - when set behavior of door is normal."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_monitor",
        "desc": "A monitor that renders the view from a given point_camera entity.",
        "bases": [
            "func_brush"
        ],
        "keyvalues": [
            {
                "name": "Camera name",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle - If on, turn off, if off, turn on."
            },
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable."
            },
            {
                "name": "SetCamera",
                "type": "target_destination",
                "desc": "Sets the camera to use for this monitor. Takes the name of a point_camera entity in the map."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_physbox",
        "desc": "A brush entity that's physically simulated.",
        "bases": [
            "BreakableBrush"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[4096] Start Asleep": {
                        "default": false,
                        "num": 4096
                    },
                    "[8192] Ignore +USE for Pickup": {
                        "default": false,
                        "num": 8192
                    },
                    "[16384] Debris - Don't collide with the player or other debris": {
                        "default": false,
                        "num": 16384
                    },
                    "[32768] Motion Disabled": {
                        "default": false,
                        "num": 32768
                    },
                    "[65536] Use Preferred Carry Angles": {
                        "default": false,
                        "num": 65536
                    },
                    "[131072] Enable motion on Physcannon grab": {
                        "default": false,
                        "num": 131072
                    },
                    "[262144] Not affected by rotor wash": {
                        "default": false,
                        "num": 262144
                    },
                    "[524288] Generate output on +USE ": {
                        "default": true,
                        "num": 524288
                    },
                    "[1048576] Physgun can ALWAYS pick up. No matter what.": {
                        "default": false,
                        "num": 1048576
                    },
                    "[2097152] Physgun is NOT allowed to pick this up.": {
                        "default": false,
                        "num": 2097152
                    },
                    "[4194304] Physgun is NOT allowed to punt this object.": {
                        "default": false,
                        "num": 4194304
                    },
                    "[8388608] Prevent motion enable on player bump": {
                        "default": false,
                        "num": 8388608
                    }
                }
            },
            {
                "name": "Impact Damage Type",
                "key": "damagetype",
                "type": "choices",
                "default": "Blunt (0)",
                "desc": "",
                "choices": {
                    "Blunt": "0",
                    "Sharp": "1"
                }
            },
            {
                "name": "Mass Scale",
                "key": "massscale",
                "type": "float",
                "default": "0",
                "desc": "A scale multiplier for the object's mass."
            },
            {
                "name": "Override Parameters",
                "key": "overridescript",
                "type": "string",
                "default": "",
                "desc": "A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'."
            },
            {
                "name": "Health Level to Override Motion",
                "key": "damagetoenablemotion",
                "type": "integer",
                "default": "0",
                "desc": "If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion."
            },
            {
                "name": "Physics Impact Force to Override Motion",
                "key": "forcetoenablemotion",
                "type": "float",
                "default": "0",
                "desc": "If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion."
            },
            {
                "name": "Strength",
                "key": "health",
                "type": "integer",
                "default": "0",
                "desc": "Number of points of damage to take before breaking.  0 means don't break."
            },
            {
                "name": "Preferred Player-carry Angles",
                "key": "preferredcarryangles",
                "type": "vector",
                "default": "0 0 0",
                "desc": "If the 'Use Preferred Carry Angles' spawnflag is set, this angle is the angle which the object should orient to when the player picks it up, with the physgun or +USE."
            },
            {
                "name": "Not solid to world",
                "key": "notsolid",
                "type": "choices",
                "default": "Solid to World (0)",
                "desc": "",
                "choices": {
                    "Solid to World": "0",
                    "Passes through World": "1"
                }
            },
            {
                "name": "Exploitable by Player",
                "key": "exploitablebyplayer",
                "type": "choices",
                "default": "Default (0)",
                "desc": "",
                "choices": {
                    "Default": "0",
                    "Explosive": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "Wake",
                "type": "void",
                "desc": "Wake up this physics object, if it is sleeping."
            },
            {
                "name": "Sleep",
                "type": "void",
                "desc": "Put this physics object to sleep. It will wake if given the Wake input, or if force is applied to it. Note that physics objects go to sleep automatically after coming to rest for a while, so you don't really need to use this."
            },
            {
                "name": "EnableMotion",
                "type": "void",
                "desc": "Enable physics motion/collision response."
            },
            {
                "name": "DisableMotion",
                "type": "void",
                "desc": "Disable physics motion/collision response."
            },
            {
                "name": "ForceDrop",
                "type": "void",
                "desc": "If this object is being carried by a player, with the physgun or +USE, force it to be dropped."
            },
            {
                "name": "Enable",
                "type": "void",
                "desc": "Show this object and allow it to collide, doesn't override notsolid."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Hide this object and stop collisions."
            },
            {
                "name": "BecomeDebris",
                "type": "void",
                "desc": "Change the collision to act like debris"
            }
        ],
        "outputs": [
            {
                "name": "OnDamaged",
                "type": "void",
                "desc": "Fired when this entity is damaged."
            },
            {
                "name": "OnAwakened",
                "type": "void",
                "desc": "Fired when this entity becomes awake (collision/force is applied)."
            },
            {
                "name": "OnMotionEnabled",
                "type": "void",
                "desc": "Fired when motion is enabled due to damage/physcannon/force."
            },
            {
                "name": "OnPhysGunPickup",
                "type": "void",
                "desc": "Fired when a player picks this object up, either with the physgun or +USE."
            },
            {
                "name": "OnPhysGunPunt",
                "type": "void",
                "desc": "Fired when a player punts this object with the physgun."
            },
            {
                "name": "OnPhysGunOnlyPickup",
                "type": "void",
                "desc": "Fired when a player picks this object up WITH THE PHYSGUN. +USE pickups do not fire this output."
            },
            {
                "name": "OnPhysGunDrop",
                "type": "void",
                "desc": "Fired when a player drops this object."
            },
            {
                "name": "OnPlayerUse",
                "type": "void",
                "desc": "Fired when the player tries to +USE the physbox. This output will fire only if the Generate output on +USE spawnflag is set."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "func_placement_clip",
        "desc": "Specifies a region where things cannot be built.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_reflective_glass",
        "desc": "Used to produce perfectly reflective glass that renders world + entities. Typically, you want your glass brush to have nodraw on all non-reflective surfaces and you want to use a shader like lightmappedreflective in your material applied to the non-nodraw surfaces. See hl2/materials/glass/reflectiveglass001.vmt for an example. NOTE: currently, you cannot use reflective glass in scenes with water, and you can only have 1 reflective glass in your view frustum ( + pvs ) at a time. Players will not see their own reflection unless they are in thirdperson mode.",
        "bases": [
            "func_brush"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_tanktrain",
        "desc": "A moving train that follows a path of path_track entities, shoots at the player, and can be killed.\nNOTE: Build your train so that the front of the train is facing down the X axis. When it spawns it will automatically rotate to face the next path_track on the path.",
        "bases": [
            "BaseTrain"
        ],
        "keyvalues": [
            {
                "name": "Health",
                "key": "health",
                "type": "integer",
                "default": "100",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnDeath",
                "type": "void",
                "desc": "Fired when the tank is killed."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "func_trackautochange",
        "desc": "An entity that works as a rotating/moving platform that will carry a train to a new track. It must be larger in X-Y planar area than the train, since it must contain the train within these dimensions in order to operate when the train is near it. The track will rotate around its own origin. This entity will only allowed to be triggered if the train is on a path_track which is a dead end. If Auto Activate Train flag is ticked, train isn't paused at the top/bottom of the path after func_trackautochange has finished it's movement. Instead, it will continue moving forward and doesn't need to be reactivated by trigger. If selected, the platform only rotates in place of it's origin without travelling specified altitude. The top and the bottom path_tracks should have their origin positioned in the same coordinates.",
        "bases": [
            "func_trackchange"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_tracktrain",
        "desc": "A moving platform that the player can ride. It follows a path of path_track entities.\nNOTE: Build your train so that the front of the train is facing down the X axis. When it spawns it will automatically rotate to face the next path_track on the path.",
        "bases": [
            "BaseTrain"
        ],
        "keyvalues": [
            {
                "name": "Manual Train Speed",
                "key": "manualspeedchanges",
                "type": "boolean",
                "default": "No",
                "desc": "Train Speed is controlled through IO, handles accel, decel times."
            },
            {
                "name": "Manual Accel Speed",
                "key": "manualaccelspeed",
                "type": "float",
                "default": "0",
                "desc": "Units per second to accelerate to target speed."
            },
            {
                "name": "Manual Decel Speed",
                "key": "manualdecelspeed",
                "type": "float",
                "default": "0",
                "desc": "Units per second to decelerate to target speed."
            }
        ],
        "inputs": [
            {
                "name": "SetSpeedDirAccel",
                "type": "float",
                "desc": "Accel/Decel to the specified speed, as a ratio of max speed. Negative values reverse the direction [-1, 1]"
            },
            {
                "name": "TeleportToPathNode",
                "type": "target_destination",
                "desc": "Teleport to a destination and stop there. This can be in a new path."
            },
            {
                "name": "MoveToPathNode",
                "type": "target_destination",
                "desc": "Start moving to a destination and stop when you get there. This must be in the same path."
            },
            {
                "name": "LockOrientation",
                "type": "void",
                "desc": "Lock the current orientation of the train."
            },
            {
                "name": "UnlockOrientation",
                "type": "void",
                "desc": "Unlock the current orientation of the train."
            },
            {
                "name": "SetMaxSpeed",
                "type": "float",
                "desc": "Set a new max speed for the train."
            }
        ],
        "outputs": [
            {
                "name": "OnStart",
                "type": "void",
                "desc": "Fired when the train starts moving in either direction."
            },
            {
                "name": "OnNextPoint",
                "type": "string",
                "desc": "Fires continuously every frame when the train is moving to its next destination."
            },
            {
                "name": "OnArrivedAtNode",
                "type": "void",
                "desc": "Fired when this train arrives at a node on its path."
            },
            {
                "name": "OnArrivedAtDestinationNode",
                "type": "void",
                "desc": "Fired when this train arrives at a destination that was specified by the MoveToPathNode Input."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "func_water_analog",
        "desc": "A water brush entity that moves linearly along a given distance, in a given direction. This is identical to func_movelinear.",
        "bases": [
            "func_movelinear"
        ],
        "keyvalues": [
            {
                "name": "Move Direction (Pitch Yaw Roll)",
                "key": "movedir",
                "type": "angle",
                "default": "0 0 0",
                "desc": "The direction the water will move, when told to 'Open'."
            },
            {
                "name": "Start Position",
                "key": "startposition",
                "type": "float",
                "default": "0",
                "desc": "Position of the water brush when spawned.The range is a value between 0.0 and 1.0, where 0 is the starting position and 1 is the starting position + (move direction * move distance)."
            },
            {
                "name": "Speed",
                "key": "speed",
                "type": "float",
                "default": "100",
                "desc": "The speed that the water brush moves, in units per second."
            },
            {
                "name": "Move Distance",
                "key": "movedistance",
                "type": "float",
                "default": "100",
                "desc": "The distance from the starting point that the water brush should move, in units."
            },
            {
                "name": "Sound played when the water brush starts moving.",
                "key": "startsound",
                "type": "sound",
                "default": "",
                "desc": ""
            },
            {
                "name": "Sound played when the water brush stops moving.",
                "key": "stopsound",
                "type": "sound",
                "default": "",
                "desc": ""
            },
            {
                "name": "Wave Height",
                "key": "waveheight",
                "type": "string",
                "default": "3.0",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "Open",
                "type": "void",
                "desc": "Move the water brush to the end position (starting position + (move direction * move distance))."
            },
            {
                "name": "Close",
                "type": "void",
                "desc": "Move the water brush to the starting position."
            },
            {
                "name": "SetPosition",
                "type": "string",
                "desc": "Move the water brush to a specific position between 0.0 and 1.0, where 0 is the starting position and 1 is the starting position + (move direction * move distance)."
            }
        ],
        "outputs": [
            {
                "name": "OnFullyOpen",
                "type": "void",
                "desc": "Fired when the water brush reaches the end position (starting position + (move direction * move distance))."
            },
            {
                "name": "OnFullyClosed",
                "type": "void",
                "desc": "Fired when the water brush reaches the starting position."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "item_boots",
        "desc": "Long Fall Boots",
        "bases": [
            "Item"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "NPC",
        "classname": "npc_bullseye",
        "desc": "Dummy NPC for targeting or other behavior.",
        "bases": [
            "BaseLogicalNPC"
        ],
        "keyvalues": [
            {
                "name": "Render Mode",
                "key": "rendermode",
                "type": "choices",
                "default": "Color (1)",
                "desc": "This must be set to Color for Hammer to render the sprite correctly. It is not used in the engine.",
                "choices": {
                    "Color": "1"
                }
            },
            {
                "name": "Health",
                "key": "health",
                "type": "integer",
                "default": "35",
                "desc": "Unlike other NPCs level designers are allowed to set the health on bullseyes."
            },
            {
                "name": "Minimum Angle",
                "key": "minangle",
                "type": "float",
                "default": "360",
                "desc": "Angle from the bullseye required for bullseye to be a valid enemy."
            },
            {
                "name": "Minimum Distance",
                "key": "mindist",
                "type": "float",
                "default": "0",
                "desc": "Distance from the bullseye required for bullseye to be a valid enemy."
            },
            {
                "name": "Autoaim Radius",
                "key": "autoaimradius",
                "type": "float",
                "default": "0",
                "desc": "Radius of autoaim influence. Use ent_autoaim <picker> to visualize."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[65536] Not Solid": {
                        "default": false,
                        "num": 65536
                    },
                    "[131072] Take No Damage": {
                        "default": false,
                        "num": 131072
                    },
                    "[262144] Enemy Damage Only": {
                        "default": false,
                        "num": 262144
                    },
                    "[524288] Bleed": {
                        "default": false,
                        "num": 524288
                    },
                    "[1048576] Perfect Accuracy": {
                        "default": false,
                        "num": 1048576
                    },
                    "[2097152] Collide against physics objects (Creates VPhysics Shadow)": {
                        "default": false,
                        "num": 2097152
                    }
                }
            },
            {
                "name": "Always Transmit To Client",
                "key": "alwaystransmit",
                "type": "boolean",
                "default": "No",
                "desc": "Always transmit this entity to the client."
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "InputTargeted",
                "type": "void",
                "desc": "Fires the OnTargeted output."
            },
            {
                "name": "InputReleased",
                "type": "void",
                "desc": "Fires the OnReleased output."
            },
            {
                "name": "OnTargeted",
                "type": "void",
                "desc": "Fires when targeted."
            },
            {
                "name": "OnReleased",
                "type": "void",
                "desc": "Fires when no longer targeted."
            }
        ]
    },
    {
        "type": "NPC",
        "classname": "npc_enemyfinder",
        "desc": "EnemyFinder",
        "bases": [
            "BaseLogicalNPC"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[65536] Check Visibility": {
                        "default": true,
                        "num": 65536
                    },
                    "[131072] APC Visibility checks": {
                        "default": false,
                        "num": 131072
                    },
                    "[262144] Short memory": {
                        "default": false,
                        "num": 262144
                    },
                    "[524288] Can be an enemy": {
                        "default": false,
                        "num": 524288
                    }
                }
            },
            {
                "name": "Render Mode",
                "key": "rendermode",
                "type": "choices",
                "default": "Color (1)",
                "desc": "This must be set to Color for Hammer to render the sprite correctly. It is not used in the engine.",
                "choices": {
                    "Color": "1"
                }
            },
            {
                "name": "FieldOfView",
                "key": "fieldofview",
                "type": "string",
                "default": "0.2",
                "desc": "How far to look (1.0 = straight ahead, 0.0 = +/- 90 degrees, -1.0 = all directions)"
            },
            {
                "name": "Min Search Dist",
                "key": "minsearchdist",
                "type": "integer",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Max Search Dist",
                "key": "maxsearchdist",
                "type": "integer",
                "default": "2048",
                "desc": ""
            },
            {
                "name": "Player pass issue time",
                "key": "freepass_timetotrigger",
                "type": "float",
                "default": "0",
                "desc": "Amount of time an enemy is hidden after which a 'free pass' on reaquire is granted"
            },
            {
                "name": "Player pass duration",
                "key": "freepass_duration",
                "type": "float",
                "default": "0",
                "desc": "After granted 'free pass', the amount of time a target is allowed before reaquire"
            },
            {
                "name": "Player pass move tolerance",
                "key": "freepass_movetolerance",
                "type": "float",
                "default": "120",
                "desc": "After granted 'free pass', the distance the target is allowed to move before reaquire"
            },
            {
                "name": "Player pass refill rate",
                "key": "freepass_refillrate",
                "type": "float",
                "default": "0.5",
                "desc": "After free pass begins expiring, how much the time the target gets back for every second they hide again"
            },
            {
                "name": "Player pass peek time",
                "key": "freepass_peektime",
                "type": "float",
                "default": "0",
                "desc": "How long targets in cover are allowed to peek without penalty"
            },
            {
                "name": "Start On",
                "key": "starton",
                "type": "boolean",
                "default": "No",
                "desc": ""
            }
        ],
        "inputs": [
            {
                "name": "TurnOn",
                "type": "void",
                "desc": "Turn on: Look for enemies"
            },
            {
                "name": "TurnOff",
                "type": "void",
                "desc": "Turn off: Stop looking for enemies"
            }
        ],
        "outputs": [
            {
                "name": "OnLostEnemies",
                "type": "void",
                "desc": "Fires when the enemy finder has no enemies."
            },
            {
                "name": "OnAcquireEnemies",
                "type": "void",
                "desc": "Fires when the enemy finder acquires enemies."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_button",
        "desc": "A button which is activated by player use or by game inputs. While pressed it can play a tick-tock sound to indicate limited time.",
        "bases": [
            "BasePedButton"
        ],
        "keyvalues": [
            {
                "name": "Skin",
                "key": "skin",
                "type": "choices",
                "default": "Clean (0)",
                "desc": "Should it appear dirty or clean?",
                "choices": {
                    "Clean": "0",
                    "Dirty": "1"
                }
            },
            {
                "name": "Model",
                "key": "model",
                "type": "studio",
                "default": "models/props/switch001.mdl",
                "desc": "Model to use in game."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_dynamic",
        "desc": "A prop that can be placed in hierarchy and can play animations. It can also be configured to break when it takes enough damage. Note that the health of the object will be overridden by the health inside the model, to ensure consistent health game-wide. If the model used by the prop is configured to be used as a prop_physics (i.e. it should be physically simulated) then it cannot normally  be used as a prop_dynamic. Upon level load it will display a warning in the console and remove itself. Use a prop_dynamic_override instead.",
        "bases": [
            "prop_dynamic_base",
            "EnableDisable"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_dynamic_ornament",
        "desc": "A way to attach one studio model to another as an ornament. It will render in the way that player/NPC weapons render.",
        "bases": [
            "prop_dynamic_base"
        ],
        "keyvalues": [
            {
                "name": "Collisions",
                "key": "solid",
                "type": "choices",
                "default": "Not Solid (0)",
                "desc": "",
                "choices": {
                    "Not Solid": "0"
                }
            },
            {
                "name": "Target Entity",
                "key": "initialowner",
                "type": "target_destination",
                "default": "",
                "desc": "Name of the entity that this ornament should attach to, at startup."
            }
        ],
        "inputs": [
            {
                "name": "SetAttached",
                "type": "target_destination",
                "desc": "Attach the ornament to a different entity. Parameter should be the name of entity to attach to."
            },
            {
                "name": "Detach",
                "type": "string",
                "desc": "Detach from the Target Entity and become invisible. The ornament can be re-attached with the SetAttached input."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_dynamic_override",
        "desc": "A variant of prop_dynamic that permits the use of any model, including those designed to be used as prop_physics/prop_static.",
        "bases": [
            "prop_dynamic_base",
            "EnableDisable"
        ],
        "keyvalues": [
            {
                "name": "Health",
                "key": "health",
                "type": "integer",
                "default": "0",
                "desc": "Number of points of damage to take before breaking.  0 means don't break."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_energy_ball",
        "desc": "Aperture Science High Energy Pellet. Bounces off surfaces, travels through portals and kills players on contact. After a time period it will explode and be respawned.",
        "bases": [
            "BasePropPhysics"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "Explode",
                "type": "void",
                "desc": "Explode the pellet, creating a shockwave and shaking the camera."
            },
            {
                "name": "BallCaught",
                "type": "void",
                "desc": "Trigger the OnBallCaught output for the point_energy_ball_launcher that created this ball, kill the pellet and disable the launcher."
            },
            {
                "name": "SetTime",
                "type": "float",
                "desc": "Sets the remaining lifetime of the ball."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_floor_ball_button",
        "desc": "A floor button which is only activated by a Sphere-type prop_weighted_cube.",
        "bases": [
            "BasePortButton"
        ],
        "keyvalues": [
            {
                "name": "Model",
                "key": "model",
                "type": "studio",
                "default": "models/props/ball_button.mdl",
                "desc": "Model to be used in game"
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_floor_button",
        "desc": "A 1500 MegaWatt Aperture Science Super-Colliding Super Button, which is pressed by a player or objects.",
        "bases": [
            "BasePortButton"
        ],
        "keyvalues": [
            {
                "name": "Button model",
                "key": "model",
                "type": "choices",
                "default": "Clean (models/props/portal_button.mdl)",
                "desc": "Choose the amount of damage for the button, or type in a custom model.",
                "choices": {
                    "Clean": "models/props/portal_button.mdl",
                    "Dirty Slightly Damaged": "models/props/portal_button_damaged02.mdl",
                    "Dirty Very Damaged": "models/props/portal_button_damaged01.mdl",
                    "BTS Slightly Damaged 1": "models/props/floor_button/portal_button_bts02.mdl",
                    "BTS Slightly Damaged 2": "models/props/floor_button/portal_button_bts02a.mdl",
                    "BTS Very Damaged": "models/props/floor_button/portal_button_bts01.mdl"
                }
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnPressedBlue",
                "type": "void",
                "desc": "Called in Coop when the button has been pressed by ATLAS."
            },
            {
                "name": "OnPressedOrange",
                "type": "void",
                "desc": "Called in Coop when the button has been pressed by P-Body."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_floor_cube_button",
        "desc": "A floor button which is activated by a prop_weighted_cube.",
        "bases": [
            "BasePortButton"
        ],
        "keyvalues": [
            {
                "name": "Button model",
                "key": "model",
                "type": "studio",
                "default": "models/props/box_socket.mdl",
                "desc": "Model to be used in game"
            },
            {
                "name": "Accepts Balls",
                "key": "acceptsball",
                "type": "boolean",
                "default": "No",
                "desc": "Do Edgeless Safety Cubes activate this? Should almost always be No unless no balls are in the map."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_glados_core",
        "desc": "The P1 personality cores for GlaDOS. Resemble little eyeballs with handles. These play lines and look around when near the player. ",
        "bases": [
            "BasePropPhysics"
        ],
        "keyvalues": [
            {
                "name": "Core Personality",
                "key": "coretype",
                "type": "choices",
                "default": "Aggressive (1)",
                "desc": "Which personality VO set the core is set to.",
                "choices": {
                    "Curious": "0",
                    "Aggressive": "1",
                    "Crazy": "2",
                    "None": "3"
                }
            },
            {
                "name": "Pause (in secs) between VO Lines.",
                "key": "delaybetweenlines",
                "type": "float",
                "default": "0.4",
                "desc": "When the core is talking, this is the number of seconds delay between it's spoken lines."
            },
            {
                "name": "Model",
                "key": "model",
                "type": "studio",
                "default": "models/props_bts/glados_ball_reference.mdl",
                "desc": "Model to use in game."
            }
        ],
        "inputs": [
            {
                "name": "Panic",
                "type": "void",
                "desc": "Core is near death, panic."
            },
            {
                "name": "StartTalking",
                "type": "void",
                "desc": "Start playing lines, play looking animations."
            }
        ],
        "outputs": [
            {
                "name": "OnPlayerPickup",
                "type": "void",
                "desc": "Player picked up core."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_glass_futbol",
        "desc": "A fragile glass ball that the player can pick up and toss. On contact with surfaces it will shatter, and it can be put into holders to power them. It is affected by gel, but the shattering means this has little effect.",
        "bases": [
            "BasePropPhysics"
        ],
        "keyvalues": [
            {
                "name": "Spawner Name",
                "key": "spawnername",
                "type": "target_destination",
                "default": "",
                "desc": "Name of prop_glass_futbol_spawner for this futbol to respawn in once broken."
            }
        ],
        "inputs": [
            {
                "name": "Dissolve",
                "type": "void",
                "desc": "Dissolve"
            },
            {
                "name": "RemovePaint",
                "type": "void",
                "desc": "Remove Paint"
            }
        ],
        "outputs": [
            {
                "name": "OnFizzled",
                "type": "void",
                "desc": "Fired when the futbol is fizzled."
            },
            {
                "name": "OnIgnite",
                "type": "void",
                "desc": "Fired when sphere burns."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_physics",
        "desc": "A prop that physically simulates as a single rigid body. It can be constrained to other physics objects using hinges or other constraints. It can also be configured to break when it takes enough damage. Note that the health of the object will be overridden by the health inside the model, to ensure consistent health game-wide. If the model used by the prop is configured to be used as a prop_dynamic (i.e. it should not be physically simulated) then it cannot normally be used as a prop_physics. Upon level load it will display a warning in the console and remove itself. Use a prop_physics_override instead.",
        "bases": [
            "BasePropPhysics",
            "SetModel"
        ],
        "keyvalues": [
            {
                "name": "Exploitable by Player",
                "key": "exploitablebyplayer",
                "type": "choices",
                "default": "Default (0)",
                "desc": "",
                "choices": {
                    "Default": "0",
                    "Explosive": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "Ignite",
                "type": "void",
                "desc": "Ignite, burst into flames."
            },
            {
                "name": "IgniteLifetime",
                "type": "float",
                "desc": "Ignite, with a parameter lifetime."
            },
            {
                "name": "IgniteNumHitboxFires",
                "type": "integer",
                "desc": "Ignite, with a parameternumber of hitbox fires."
            },
            {
                "name": "IgniteHitboxFireScale",
                "type": "float",
                "desc": "Ignite, with a parameter hitbox fire scale."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_physics_ragdoll",
        "desc": "Alternate classname for prop_ragdoll",
        "bases": [
            "prop_ragdoll"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_sphere",
        "desc": "A variant of prop_physics which has a perfect sphere shape. It is normally restricted to a radius of 12 units.",
        "bases": [
            "BasePropPhysics",
            "SetModel"
        ],
        "keyvalues": [
            {
                "name": "Radius",
                "key": "radius",
                "type": "float",
                "default": "12",
                "desc": "The size of the sphere collision."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_tractor_beam",
        "desc": "Emitter for an Excursion Funnel.",
        "bases": [
            "BaseProjector"
        ],
        "keyvalues": [
            {
                "name": "Funnel Direction",
                "key": "linearforce",
                "type": "choices",
                "default": "[+250] Forward / Blue (250)",
                "desc": "Speed of the Funnel, positive is forward.",
                "choices": {
                    "[+250] Forward / Blue": "250",
                    "[-250] Reversed / Orange": "-250"
                }
            },
            {
                "name": "Disable Emitter Particles",
                "key": "noemitterparticles",
                "type": "boolean",
                "default": "No",
                "desc": "Disable the whirly particles on the emitter."
            },
            {
                "name": "Model",
                "key": "use128model",
                "type": "choices",
                "default": "192 Model (0)",
                "desc": "Which model should this use?",
                "choices": {
                    "192 Model": "0",
                    "128 Model (PeTI)": "1"
                }
            },
            {
                "name": "[H] Model",
                "key": "model",
                "type": "choices",
                "default": "192 Model (models/props/tractor_beam_emitter.mdl)",
                "desc": "Sets the model to appear as in Hammer.",
                "choices": {
                    "192 Model": "models/props/tractor_beam_emitter.mdl",
                    "128 Model (PeTI)": "models/props_ingame/tractor_beam_128.mdl"
                }
            },
            {
                "name": "Primary Color (R G B A)",
                "key": "primarycolor",
                "type": "color255",
                "default": "10 160 255 255",
                "desc": "Colour of the funnel when it is moving forwards."
            },
            {
                "name": "Secondary Color (R G B A)",
                "key": "secondarycolor",
                "type": "color255",
                "default": "255 160 32 255",
                "desc": "Colour of the funnel when it is moving backwards."
            }
        ],
        "inputs": [
            {
                "name": "SetLinearForce",
                "type": "float",
                "desc": "Set the speed of the Funnel, and therefore the direction."
            },
            {
                "name": "SetPrimaryColor",
                "type": "color255",
                "desc": "Changes the primary colour of the funnel."
            },
            {
                "name": "SetSecondaryColor",
                "type": "color255",
                "desc": "Changes the secondary colour of the funnel."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_under_button",
        "desc": "A button which is activated by player use or by game inputs, for use in underground test chambers. Uses different press/release sounds compared to the modern one. The same tick-tock noise is used to indicate limited time.",
        "bases": [
            "BasePedButton"
        ],
        "keyvalues": [
            {
                "name": "Model",
                "key": "model",
                "type": "studio",
                "default": "models/props_underground/underground_testchamber_button.mdl",
                "desc": "Model to use in game."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_under_floor_button",
        "desc": "A floor button which is activated by a player or objects, for use in the underground test chambers. It plays different sounds, and has a larger trigger area.",
        "bases": [
            "BasePortButton"
        ],
        "keyvalues": [
            {
                "name": "Button model",
                "key": "model",
                "type": "studio",
                "default": "models/props_underground/underground_floor_button.mdl",
                "desc": "The model to be used in game"
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnPressedBlue",
                "type": "void",
                "desc": "Called in Coop when the button has been pressed by ATLAS."
            },
            {
                "name": "OnPressedOrange",
                "type": "void",
                "desc": "Called in Coop when the button has been pressed by P-Body."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "prop_wall_projector",
        "desc": "Aperture Science Hard Light Bridge Projector. Note: To avoid lag when it first turns on, place an info_particle_system to precache 'projected_wall_impact'.",
        "bases": [
            "BaseProjector"
        ],
        "keyvalues": [
            {
                "name": "Skin",
                "key": "skin",
                "type": "choices",
                "default": "Clean (0)",
                "desc": "Which skin to use.",
                "choices": {
                    "Clean": "0",
                    "Rusted": "1"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_weighted_cube",
        "desc": "Aperture Science Weighted Cube. Presses floor buttons, and can be moved around.",
        "bases": [
            "BasePropPhysics"
        ],
        "keyvalues": [
            {
                "name": "----------------------------------------------------------------------------------------------------------",
                "key": "line_cube",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Cube Type",
                "key": "cubetype",
                "type": "choices",
                "default": "[0] Weighted Storage Cube (0)",
                "desc": "What cube type is this? Use a prop_monster_box for FrankenTurrets. If set to Custom, use AddOutput to change it back OnMapSpawn so gel skins behave correctly.",
                "choices": {
                    "[0] Weighted Storage Cube": "0",
                    "[1] Weighted Companion Cube": "1",
                    "[2] Discouragement Redirection Cube": "2",
                    "[3] Edgeless Safety Cube": "3",
                    "[4] Antique Storage Cube": "4",
                    "[5] Schoedinger's Cube": "5",
                    "[6] Custom model": "6"
                }
            },
            {
                "name": "Skin Type",
                "key": "skintype",
                "type": "choices",
                "default": "Clean (0)",
                "desc": "Is the cube clean or rusty? Storage and Reflection cubes are the only types with a rusty version.",
                "choices": {
                    "Clean": "0",
                    "Rusted": "1"
                }
            },
            {
                "name": "Model",
                "key": "model",
                "type": "choices",
                "default": "Weighted Storage/Companion Cube (models/props/metal_box.mdl)",
                "desc": "The model to show in Hammer, or a custom model for cube type 6.",
                "choices": {
                    "Weighted Storage/Companion Cube": "models/props/metal_box.mdl",
                    "Discouragement Redirection": "models/props/reflection_cube.mdl",
                    "Edgeless Safety": "models/props_gameplay/mp_ball.mdl",
                    "Antique": "models/props_underground/underground_weighted_cube.mdl",
                    "Schroedinger": "models/props/schrodinger_cube.mdl"
                }
            },
            {
                "name": "Skin",
                "key": "skin",
                "type": "integer",
                "default": "0",
                "desc": "The old skin property, mainly to show in Hammer. "
            },
            {
                "name": "Starting paint",
                "key": "paintpower",
                "type": "choices",
                "default": "None (4)",
                "desc": "The cube starts painted with the set gel.",
                "choices": {
                    "Repulsion Gel": "0",
                    "Adhesion Gel": "1",
                    "Propulsion Gel": "2",
                    "Conversion Gel": "3",
                    "None": "4"
                }
            },
            {
                "name": "Allow Portal Funneling",
                "key": "allowfunnel",
                "type": "boolean",
                "default": "No",
                "desc": "Whether or not this object should auto-funnel into a floor portal."
            },
            {
                "name": "Use new skins",
                "key": "newskins",
                "type": "integer",
                "default": "1",
                "desc": "Use the values in the Cube Type and Skin Type fields instead of the Skin(OLD) field. You shouldn't need to touch this."
            },
            {
                "name": "Use Laser Modifier",
                "key": "uselasermodifier",
                "type": "boolean",
                "default": "No",
                "desc": "If enabled, this cube will recolor incoming lasers to the modifier color."
            },
            {
                "name": "Laser Modifier Color",
                "key": "reflectmodifycolor",
                "type": "choices",
                "default": "Default Red (255 0 0 255)",
                "desc": "Set reflected lasers to this color. Only applicable to reflection and Schrodinger cubes. You can also specify a custom RGBA color here.",
                "choices": {
                    "White": "255 255 255 255",
                    "Default Red": "255 0 0 255",
                    "Lethal Green": "100 255 100 255",
                    "Blue": "32 112 202 255",
                    "Yellow": "255 212 91 255",
                    "Pink": "212 60 146 255",
                    "Dark Green": "65 97 0 255"
                }
            },
            {
                "name": "Use Laser Filter",
                "key": "uselaserfilter",
                "type": "boolean",
                "default": "No",
                "desc": "If enabled, this cube can only redirect lasers that match the filter color. If disabled, any laser color can be redirected."
            },
            {
                "name": "Laser Filter Color",
                "key": "reflectfiltercolor",
                "type": "choices",
                "default": "Default Red (255 0 0 255)",
                "desc": "Filter reflected lasers by this color. Only applicable to reflection and Schrodinger cubes. You can also specify a custom RGBA color here.",
                "choices": {
                    "White": "255 255 255 255",
                    "Default Red": "255 0 0 255",
                    "Lethal Green": "100 255 100 255",
                    "Blue": "32 112 202 255",
                    "Yellow": "255 212 91 255",
                    "Pink": "212 60 146 255",
                    "Dark Green": "65 97 0 255"
                }
            },
            {
                "name": "Schrodinger Sound",
                "key": "schrodingersound",
                "type": "sound",
                "default": "",
                "desc": "The sound (or music) to play when the Schrodinger cube is powered. Only applicable to Schrodinger cubes."
            }
        ],
        "inputs": [
            {
                "name": "EnablePortalFunnel",
                "type": "void",
                "desc": "Enable portal funneling behavior."
            },
            {
                "name": "DisablePortalFunnel",
                "type": "void",
                "desc": "Disable portal funneling behavior."
            },
            {
                "name": "EnableMotion",
                "type": "void",
                "desc": "Allow physics simulation."
            },
            {
                "name": "DisableMotion",
                "type": "void",
                "desc": "Prevent Physics simulation, freezing the cube in place."
            },
            {
                "name": "SetPaint",
                "type": "integer",
                "desc": "Force the cube to be painted with 0 (Repulsion), 2 (Propulsion), or 4 (No) gel."
            },
            {
                "name": "Dissolve",
                "type": "void",
                "desc": "Fizzles the cube, firing the OnFizzled output."
            },
            {
                "name": "SilentDissolve",
                "type": "void",
                "desc": "Kills the cube immediately and fires its OnFizzled output."
            },
            {
                "name": "ExitDisabledState",
                "type": "void",
                "desc": "Exits the disabled state of a reflective cube."
            },
            {
                "name": "SetReflectModifyColor",
                "type": "color255",
                "desc": "Changes the laser modifier colour of the cube."
            },
            {
                "name": "SetReflectFilterColor",
                "type": "color255",
                "desc": "Changes the laser filter colour of the cube."
            },
            {
                "name": "EmitLaser",
                "type": "boolean",
                "desc": "Makes this cube emit or stop emitting its own laser."
            }
        ],
        "outputs": [
            {
                "name": "OnFizzled",
                "type": "void",
                "desc": "Fired when a cube is fizzled."
            },
            {
                "name": "OnOrangePickUp",
                "type": "void",
                "desc": "P-Body picked up the cube."
            },
            {
                "name": "OnBluePickUp",
                "type": "void",
                "desc": "ATLAS picked up the cube."
            },
            {
                "name": "OnPlayerPickup",
                "type": "void",
                "desc": "Any player picked up the cube."
            },
            {
                "name": "OnPhysGunDrop",
                "type": "void",
                "desc": "Any player dropped the cube."
            },
            {
                "name": "OnPainted",
                "type": "integer",
                "desc": "Cube got painted, only if the state changed. Has the paint type as parameter."
            },
            {
                "name": "OnPowered",
                "type": "void",
                "desc": "Cube got powered by a laser."
            },
            {
                "name": "OnUnpowered",
                "type": "void",
                "desc": "Cube is no longer powered by a laser."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "simple_physics_prop",
        "desc": "A simple physics prop with no unique properties. Model-based entities converted by phys_convert are turned into this entity, as well as dissolving objects.See prop_physics for more options.",
        "bases": [
            "BasePropPhysics"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_catapult",
        "desc": "Catapult the player in a given direction at a given velocity.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "Player Speed",
                "key": "playerspeed",
                "type": "float",
                "default": "450",
                "desc": "Speed at which to launch the players (u/sec)"
            },
            {
                "name": "Physics Object Speed",
                "key": "physicsspeed",
                "type": "float",
                "default": "450",
                "desc": "Speed at which to launch physics objects (u/sec)"
            },
            {
                "name": "Launch direction",
                "key": "launchdirection",
                "type": "angle",
                "default": "0 0 0",
                "desc": "Direction to launch the player in."
            },
            {
                "name": "Launch target",
                "key": "launchtarget",
                "type": "target_destination",
                "default": "",
                "desc": "Entity to try to 'hit' when we're launched."
            },
            {
                "name": "Use Exact Velocity",
                "key": "useexactvelocity",
                "type": "boolean",
                "default": "No",
                "desc": "Try to fling exactly at the speed specified - this prevents the added upward velocity from a launch target."
            },
            {
                "name": "Exact Solution Method",
                "key": "exactvelocitychoicetype",
                "type": "choices",
                "default": "Best (0)",
                "desc": "Using exact velocity generates two correct solutions. Use this to force which one you choose.",
                "choices": {
                    "Best": "0",
                    "Solution One": "1",
                    "Solution Two": "2"
                }
            },
            {
                "name": "Apply angular impulse",
                "key": "applyangularimpulse",
                "type": "boolean",
                "default": "No",
                "desc": "Physics objects that are catapulted will get random rotational force."
            },
            {
                "name": "Air control supression time",
                "key": "airctrlsupressiontime",
                "type": "float",
                "default": "-1.0",
                "desc": "[Launch by target only!] If greater than zero, suppress player aircontrol for this number (in seconds). If less than zero use the default (quarter second)."
            },
            {
                "name": "Supress directional air control",
                "key": "directionsuppressaircontrol",
                "type": "boolean",
                "default": "No",
                "desc": "Whether to supress air control for directional catapults."
            },
            {
                "name": "Use Threshold Check",
                "key": "usethresholdcheck",
                "type": "boolean",
                "default": "No",
                "desc": "Use the Lower and Upper Threshold to only trigger when the object is moving at a certain speed already."
            },
            {
                "name": "Only check velocity",
                "key": "onlyvelocitycheck",
                "type": "boolean",
                "default": "No",
                "desc": "Only check velocity of the touching object - don't actually catapult it. Use in conjunction with OnCatapulted to create velocity checking triggers.  Only works when Use Threshold Check is enabled."
            },
            {
                "name": "Absolute Velocity Check",
                "key": "absolutevelocitycheck",
                "type": "boolean",
                "default": "No",
                "desc": "If enabled, the values in Lower Threshold and Upper Threshold represent real velocity values instead of percentages."
            },
            {
                "name": "Lower Threshold",
                "key": "lowerthreshold",
                "type": "float",
                "default": "0.15",
                "desc": "Flung object must be within this percentage value in order to activate fling. Specify a value between [0...1] (default is .15). This is only used if Use Threshold Check is set to yes."
            },
            {
                "name": "Upper Threshold",
                "key": "upperthreshold",
                "type": "float",
                "default": "0.30",
                "desc": "Flung object must be within this percentage value in order to activate fling. Specify a value between [0...1] (default is .30). This is only used if Use Threshold Check is set to yes."
            },
            {
                "name": "Entry Angle Tolerance",
                "key": "entryangletolerance",
                "type": "float",
                "default": "0.0",
                "desc": "Flung object's velocity must be pointing this much at the target. Specify a value between [-1...1] 1 means exactly, 0 means within 180 degrees -1 means any angle is accepted. This is only used if Use Threshold Check is set to yes."
            },
            {
                "name": "Launch Sound",
                "key": "launchsound",
                "type": "sound",
                "default": "",
                "desc": "Sound played when an entity is launched."
            }
        ],
        "inputs": [
            {
                "name": "SetPlayerSpeed",
                "type": "float",
                "desc": "Set the speed to launch the player at."
            },
            {
                "name": "SetPhysicsSpeed",
                "type": "float",
                "desc": "Set the speed to launch the physics objects at."
            },
            {
                "name": "SetLaunchTarget",
                "type": "string",
                "desc": "Set the entity to try hit when launched."
            },
            {
                "name": "SetExactVelocityChoiceType",
                "type": "integer",
                "desc": "Set the Exact Solution Method."
            }
        ],
        "outputs": [
            {
                "name": "OnCatapulted",
                "type": "void",
                "desc": "The object has been launched, or passes the Threshold Check and Entry Angle Tolerance."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "trigger_changelevel",
        "desc": "An entity that triggers a level change.\nPlace an info_landmark in both maps that marks the 'same' location in each map.\nTIPS & TRICKS: To fire events in the next level, use the OnLevelChange output to turn on an env_global in the current level.  Create a logic_auto in the next level that checks for the state set by the env_global.\n\nTo control which entities go through the level transition, create one or more trigger_transitions and give them the same name as the landmark. Any entities within the trigger_transition(s) will go to the next map.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "New Map Name",
                "key": "map",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Landmark Name",
                "key": "landmark",
                "type": "target_destination",
                "default": "",
                "desc": ""
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[2] Disable Touch": {
                        "default": false,
                        "num": 2
                    },
                    "[4] To Previous Chapter": {
                        "default": false,
                        "num": 4
                    }
                }
            }
        ],
        "inputs": [
            {
                "name": "ChangeLevel",
                "type": "void",
                "desc": "Cause the level change. Use this when triggering the level change with a button, etc."
            }
        ],
        "outputs": [
            {
                "name": "OnChangeLevel",
                "type": "void",
                "desc": "Fired when the level changes."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "trigger_gravity",
        "desc": "A trigger volume that changes the gravity on any entity that touches it.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "Gravity (0-1)",
                "key": "gravity",
                "type": "float",
                "default": "1",
                "desc": ""
            },
            {
                "name": "Persist",
                "key": "persist",
                "type": "boolean",
                "default": "No",
                "desc": "Whether the gravity change persists. A setting of 0 will reset gravity to default on exiting. 1 will persist and thus act like how it did in older games like TF2."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_hurt",
        "desc": "A trigger volume that damages entities that touch it.",
        "bases": [
            "Trigger",
            "MasterEnt",
            "DamageType"
        ],
        "keyvalues": [
            {
                "name": "Damage",
                "key": "damage",
                "type": "integer",
                "default": "20",
                "desc": "The amount of damage done to entities that touch this trigger. The damage is done every half-second. See also 'Damage Model' for extra details on how damage can be dealt."
            },
            {
                "name": "Damage Cap",
                "key": "damagecap",
                "type": "integer",
                "default": "20",
                "desc": "The maximum amount of damage that can be dealt when using the Doubling w/Forgiveness damage model."
            },
            {
                "name": "Damage Model",
                "key": "damagemodel",
                "type": "choices",
                "default": "Normal (0)",
                "desc": "How damage is dealt. Normal always does the specified amount of damage each half second. Doubling w/Forgiveness starts with the specified amount and doubles it each time it hurts the toucher, resetting when they leave the trigger. Good for making triggers that are deadly over time, without having to cause massive damage on each touch.",
                "choices": {
                    "Normal": "0",
                    "Doubling w/forgiveness": "1"
                }
            },
            {
                "name": "Zero Damage Force",
                "key": "nodmgforce",
                "type": "boolean",
                "default": "No",
                "desc": "Should the damaged entity receive no physics force from this trigger."
            }
        ],
        "inputs": [
            {
                "name": "SetDamage",
                "type": "float",
                "desc": "Set a new amount of damage for this trigger."
            }
        ],
        "outputs": [
            {
                "name": "OnHurt",
                "type": "void",
                "desc": "Fired whenever this trigger hurts something other than a player."
            },
            {
                "name": "OnHurtPlayer",
                "type": "void",
                "desc": "Fired whenever this trigger hurts a player."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "trigger_impact",
        "desc": "A trigger volume that can be told to push all physics objects that are inside of it in the direction specified by this trigger's angles.\nAlso outputs the force at the time of impact for anyone else that wants to use it.",
        "bases": [
            "Trigger",
            "Origin",
            "Angles"
        ],
        "keyvalues": [
            {
                "name": "Magnitude",
                "key": "magnitude",
                "type": "float",
                "default": "200",
                "desc": "The strength of the impact. Negative values reverse the direction."
            },
            {
                "name": "Noise",
                "key": "noise",
                "type": "float",
                "default": "0.1",
                "desc": "The amount of directional noise (0-1). 0 = no noise, 1 = random direction."
            },
            {
                "name": "Viewkick",
                "key": "viewkick",
                "type": "float",
                "default": "0.05",
                "desc": "The amount to kick player's view if the player is in the trigger.  Proportional to magnitude (0-1)."
            }
        ],
        "inputs": [
            {
                "name": "Impact",
                "type": "float",
                "desc": "Fire the impact, pushing all entities within the volume."
            },
            {
                "name": "SetMagnitude",
                "type": "float",
                "desc": "Set the magnitude of the impact."
            }
        ],
        "outputs": [
            {
                "name": "ImpactForce",
                "type": "string",
                "desc": "Fired after an impact. The parameter passed along is the force of the impact that was generated."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "trigger_look",
        "desc": "An entity used to trigger something when the player looks at something. It fires 'OnTrigger' when the player looks at a target entity for the given amount of time, while within the trigger volume. If the player leaves the trigger or looks away from the target entity the clock resets. If the 'Use Velocity instead of facing' spawnflag is checked, the trigger uses the player's velocity instead of the player's view, so it determines whenever the player is moving toward the target entity. Useful for triggering when players are driving a vehicle at something. NOTE: Only designed for single-player game. ",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[128] Fire Once": {
                        "default": true,
                        "num": 128
                    },
                    "[256] Use Velocity instead of facing": {
                        "default": false,
                        "num": 256
                    }
                }
            },
            {
                "name": "Look Target",
                "key": "target",
                "type": "target_destination",
                "default": "",
                "desc": "The name of the entity to be looked at."
            },
            {
                "name": "LookTime",
                "key": "looktime",
                "type": "string",
                "default": "0.5",
                "desc": "The time, in seconds, that the player must look at the target before firing the output. Resets if player leaves trigger, or looks outside the Field of View threshold."
            },
            {
                "name": "FieldOfView",
                "key": "fieldofview",
                "type": "string",
                "default": "0.9",
                "desc": "How close the player has to be looking at the target. 1.0 = straight ahead\n 0.0 = +/- 90 degrees\n -1.0 = all directions)."
            },
            {
                "name": "Timeout",
                "key": "timeout",
                "type": "float",
                "default": "0",
                "desc": "The time, in seconds, to wait after player enters the trigger before firing the OnTimeout output, 0 = never."
            }
        ],
        "inputs": [
            {
                "name": "LookTime",
                "type": "float",
                "desc": "Set the time, in seconds, that the player has to look at the target before firing."
            },
            {
                "name": "FieldOfView",
                "type": "float",
                "desc": "Set how close the player has to be looking at the target."
            }
        ],
        "outputs": [
            {
                "name": "OnTimeout",
                "type": "void",
                "desc": "Fired after the timeout interval expires if the player never looked at the target."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "trigger_multiple",
        "desc": "A trigger volume that can be triggered multiple times.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "Delay Before Reset",
                "key": "wait",
                "type": "integer",
                "default": "1",
                "desc": "Amount of time, in seconds, after the trigger_multiple has triggered before it can be triggered again. If set to -1, it will never trigger again (in which case you should just use a trigger_once)."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_paint_cleanser",
        "desc": "A trigger volume that erases any gel within it. Will destroy prop_paint_bombs and info_paint_sprayer gel, but will not stop gel from streaking under it. It will also clean physics objects like cubes or turrets that touch it. Likely intended to be used with paint_cleanser particle effect (like P1 fizzlers, but red).",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {}
            },
            {
                "name": "Filter Name",
                "key": "filtername",
                "type": "filterclass",
                "default": "",
                "desc": "Filters don't work on trigger_paint_cleanser!"
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_ping_detector",
        "desc": "Detects whether a player has pinged in its region.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": [
            {
                "name": "OnOrangePlayerPinged",
                "type": "void",
                "desc": "Fired when P-Body has pinged inside the trigger."
            },
            {
                "name": "OnBluePlayerPinged",
                "type": "void",
                "desc": "Fired when ATLAS has pinged inside the trigger."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "trigger_playermovement",
        "desc": "An entity that can be used to disable player's automatic ducking/unducking when jumping.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Clients/Players": {
                        "default": true,
                        "num": 1
                    },
                    "[128] Disable auto player movement": {
                        "default": true,
                        "num": 128
                    },
                    "[2048] Auto-duck while in trigger": {
                        "default": false,
                        "num": 2048
                    },
                    "[4096] Auto-walk while in trigger": {
                        "default": false,
                        "num": 4096
                    }
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_playerteam",
        "desc": "Allows distinguishing which player touched the trigger. Use with a logic_coop_manager to detect when both players are inside.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "Target Player",
                "key": "target_team",
                "type": "choices",
                "default": "Both (0)",
                "desc": "Which player (or both) to allow to touch this trigger.",
                "choices": {
                    "Both": "0",
                    "ATLAS": "3",
                    "P-Body": "2"
                }
            },
            {
                "name": "Trigger Once",
                "key": "trigger_once",
                "type": "boolean",
                "default": "No",
                "desc": "Only trigger once, then remove the trigger."
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnStartTouchBluePlayer",
                "type": "void",
                "desc": "ATLAS has started touching the trigger."
            },
            {
                "name": "OnEndTouchBluePlayer",
                "type": "void",
                "desc": "ATLAS has stopped touching the trigger."
            },
            {
                "name": "OnStartTouchOrangePlayer",
                "type": "void",
                "desc": "P-Body has started touching the trigger."
            },
            {
                "name": "OnEndTouchOrangePlayer",
                "type": "void",
                "desc": "P-Body has stopped touching the trigger."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "trigger_portal_cleanser",
        "desc": "A trigger volume that disolves any entities that touch it and fizzles active portals when the player touches it.|||An Aperture Science Material Emancipation Grid.",
        "bases": [
            "Trigger",
            "RenderFields",
            "Reflection"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Clients/Players": {
                        "default": true,
                        "num": 1
                    },
                    "[2] NPCs": {
                        "default": false,
                        "num": 2
                    },
                    "[8] Physics Objects": {
                        "default": true,
                        "num": 8
                    },
                    "[16] Only player ally NPCs": {
                        "default": false,
                        "num": 16
                    },
                    "[64] Everything (not including physics debris)": {
                        "default": false,
                        "num": 64
                    },
                    "[1024] Physics debris": {
                        "default": false,
                        "num": 1024
                    }
                }
            },
            {
                "name": "Visible",
                "key": "visible",
                "type": "boolean",
                "default": "No",
                "desc": "If the fizzler is visible. This controls whether sounds will play."
            },
            {
                "name": "Use Scanline",
                "key": "usescanline",
                "type": "boolean",
                "default": "No",
                "desc": "If the field uses a scanline particle effect."
            }
        ],
        "inputs": [
            {
                "name": "FizzleTouchingPortals",
                "type": "void",
                "desc": "Cause any portals in our volume to immediately fizzle."
            }
        ],
        "outputs": [
            {
                "name": "OnDissolve",
                "type": "void",
                "desc": "Fired whenever an entity is dissolved."
            },
            {
                "name": "OnFizzle",
                "type": "void",
                "desc": "Fired whenever an portals are fizzled."
            },
            {
                "name": "OnDissolveBox",
                "type": "void",
                "desc": "This cleanser dissolved an entity with a targetname of 'Box.'"
            },
            {
                "name": "OnPrimaryHit",
                "type": "void",
                "desc": "Fired whenever the primary portal hits the cleanser."
            },
            {
                "name": "OnSecondaryHit",
                "type": "void",
                "desc": "Fired whenever the secondary portal hits the cleanser."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "trigger_proximity",
        "desc": "Measures the distance of the player within the trigger volume from a given point (and within a given radius). The NearestPlayerDistance output will be 0 when the player is at the center point, and 1 when the player is at the radius.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "Point to Measure From",
                "key": "measuretarget",
                "type": "target_destination",
                "default": "",
                "desc": "The name of a target entity who's origin is the point to measure the player's distance from."
            },
            {
                "name": "Radius to measure within",
                "key": "radius",
                "type": "float",
                "default": "256",
                "desc": "The radius to which the distance should be mapped. If the player is outside the radius they will be ignored."
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "NearestEntityDistance",
                "type": "float",
                "desc": "Fired continuously when entities are touching the trigger volume. The output parameter is the distance from the Point to Measure From to the nearest entity that passed the trigger filters. The distance is mapped to the radius distance, so it will be 0 when the entity is on the point, and 1 when the entity is at the edge of the radius.!activator is the closest entity."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "trigger_push",
        "desc": "A trigger volume that pushes entities that touch it.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "Push Direction (Pitch Yaw Roll)",
                "key": "pushdir",
                "type": "angle",
                "default": "0 0 0",
                "desc": "Angles indicating the direction to push touched entities."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[128] Once Only": {
                        "default": false,
                        "num": 128
                    },
                    "[256] Affects Ladders (Half-Life 2)": {
                        "default": false,
                        "num": 256
                    }
                }
            },
            {
                "name": "Speed of Push",
                "key": "speed",
                "type": "integer",
                "default": "40",
                "desc": "The speed at which to push entities away, in units / second."
            },
            {
                "name": "Scale force for alternate ticks",
                "key": "alternateticksfix",
                "type": "float",
                "default": "0",
                "desc": "If nonzero, scale the force by this amount when running with alternate ticks. This fixes problems with an overly large force due to the longer frametime on when running with sv_alternateticks 1."
            }
        ],
        "inputs": [
            {
                "name": "SetPushDirection",
                "type": "vector",
                "desc": "Sets the angles indicating the direction to push touched entities."
            },
            {
                "name": "SetPushSpeed",
                "type": "integer",
                "desc": "Set the push speed in units / second."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_remove",
        "desc": "A trigger volume that removes any entities that touch it. Be careful, removing some entities can cause instability. This is not the same as killing entities. i.e. NPCs removed in this manner will not fire their OnKilled outputs.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": [
            {
                "name": "OnRemove",
                "type": "void",
                "desc": "Fired whenever an entity is removed."
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "trigger_reversespeed",
        "desc": "Trigger for reversing the speed of the player.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "Reverse horizontal speed",
                "key": "reversehorizontal",
                "type": "integer",
                "default": "1",
                "desc": "Reverse accordingly the velocity based on x/y axis."
            },
            {
                "name": "Reverse vertical speed",
                "key": "reversevertical",
                "type": "integer",
                "default": "1",
                "desc": "Reverse the z velocity."
            },
            {
                "name": "Update every intervals",
                "key": "onthink",
                "type": "integer",
                "default": "0",
                "desc": "If you want to make the trigger updating for each defined interval, set it to 1."
            },
            {
                "name": "Interval",
                "key": "interval",
                "type": "float",
                "default": "1.0",
                "desc": "Set here in seconds how many time the trigger should update."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_serverragdoll",
        "desc": "A volume that forces any NPC inside it to create a server side ragdoll instead of a client one.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_setspeed",
        "desc": "Trigger for setting speed of the player.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "Keep horizontal speed",
                "key": "keephorizontalspeed",
                "type": "integer",
                "default": "0",
                "desc": "If you want to keep the horizontal (x/y axis velocity based) speed, set it to 1."
            },
            {
                "name": "Keep vertical speed",
                "key": "keepverticalspeed",
                "type": "integer",
                "default": "0",
                "desc": "If you want to keep the vertical (z axis velocity based) speed, set it to 1."
            },
            {
                "name": "Horizontal speed amount",
                "key": "horizontalspeedamount",
                "type": "float",
                "default": "500",
                "desc": "Set here the speed length based on x/y axis for the velocity direction."
            },
            {
                "name": "Vertical speed amount",
                "key": "verticalspeedamount",
                "type": "float",
                "default": "100",
                "desc": "Set here the speed based on z axis for the velocity direction."
            },
            {
                "name": "Direction (Pitch Yaw Roll)",
                "key": "direction",
                "type": "angle",
                "default": "0 0 0",
                "desc": "Direction of the speed applied. Keep in mind that only Y angle is taken into account because vertical speed can be set already."
            },
            {
                "name": "Update every intervals",
                "key": "onthink",
                "type": "integer",
                "default": "0",
                "desc": "If you want to make the trigger updating for each defined interval, set it to 1."
            },
            {
                "name": "Interval",
                "key": "interval",
                "type": "float",
                "default": "1.0",
                "desc": "Set here in seconds how many time the trigger should update."
            },
            {
                "name": "Every tick",
                "key": "everytick",
                "type": "integer",
                "default": "0",
                "desc": "If you want the trigger to update and fire every tick, set this to 1."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_softbarrier",
        "desc": "A trigger volume that softly slows player velocity in a given direction.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "Push Direction (Pitch Yaw Roll)",
                "key": "pushdir",
                "type": "angle",
                "default": "0 0 0",
                "desc": "Angles indicating the direction to slow player velocity."
            }
        ],
        "inputs": [
            {
                "name": "SetPushDirection",
                "type": "vector",
                "desc": "Sets the angles indicating the direction to slow player velocity."
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_soundoperator",
        "desc": "An entity that can control sound operator parameters.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "Sound Operator",
                "key": "sosvar",
                "type": "choices",
                "default": "Custom Sound Volume 1 (0)",
                "desc": "",
                "choices": {
                    "Custom Sound Volume 1": "0",
                    "Custom Sound Volume 2": "1"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_soundscape",
        "desc": "Soundscape trigger. It is not necessary to create outputs for this trigger. It automatically will trigger the soundscape referred to by its 'Soundscape' property.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "Soundscape",
                "key": "soundscape",
                "type": "target_source",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_teleport_relative",
        "desc": "A trigger volume that teleports entities that touch it. Entities are teleported by Offset from their current position. Useful to get objects out of situations where levels or entities suddenly appear intersecting with them.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "Offset (X Y Z)",
                "key": "teleportoffset",
                "type": "vector",
                "default": "0 0 0",
                "desc": "The offset (in World-Space Coordinates X Y Z) to teleport the entity when the trigger is touched."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_togglesave",
        "desc": "A trigger volume that autosaves each time the player touches it. After it is triggered, it must be Enabled before it will activate again.",
        "bases": [
            "Trigger",
            "EnableDisable"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_tonemap",
        "desc": "Changes tonemap controllers for players touching the trigger.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "Tonemap Name",
                "key": "tonemapname",
                "type": "target_destination",
                "default": "",
                "desc": "The name of the tonemap controller entity associated with this trigger."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_transition",
        "desc": "A volume that's used to control which entities go through the level transition. Create one or more trigger_transitions and give them the same name as the changelevel landmark. Any entities within the trigger_transition(s) will go to the next map. See trigger_changelevel for more info.",
        "bases": [
            "Trigger",
            "Origin"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_userinput",
        "desc": "Trigger that fires on user KeyPress if inside trigger.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "Key that fires",
                "key": "lookedkey",
                "type": "choices",
                "default": "Forward (0)",
                "desc": "",
                "choices": {
                    "Forward": "0",
                    "Back": "1",
                    "Move Left": "2",
                    "Move Right": "3",
                    "Jump": "4",
                    "Duck": "5",
                    "Attack": "6",
                    "Attack 2": "7",
                    "Reload": "8",
                    "Speed": "9",
                    "Walk": "10"
                }
            },
            {
                "name": "Second key to use that fires, if held down at same time as other keys",
                "key": "lookedkey2",
                "type": "choices",
                "default": "None (-1)",
                "desc": "",
                "choices": {
                    "None": "-1",
                    "Forward": "0",
                    "Back": "1",
                    "Move Left": "2",
                    "Move Right": "3",
                    "Jump": "4",
                    "Duck": "5",
                    "Attack": "6",
                    "Attack 2": "7",
                    "Reload": "8",
                    "Speed": "9",
                    "Walk": "10"
                }
            },
            {
                "name": "Third key to use that fires, if held down at same time as other keys",
                "key": "lookedkey3",
                "type": "choices",
                "default": "None (-1)",
                "desc": "",
                "choices": {
                    "None": "-1",
                    "Forward": "0",
                    "Back": "1",
                    "Move Left": "2",
                    "Move Right": "3",
                    "Jump": "4",
                    "Duck": "5",
                    "Attack": "6",
                    "Attack 2": "7",
                    "Reload": "8",
                    "Speed": "9",
                    "Walk": "10"
                }
            }
        ],
        "inputs": [],
        "outputs": [
            {
                "name": "OnKeyPressed",
                "type": "void",
                "desc": "Fires when the desired key is pressed"
            },
            {
                "name": "OnKeyHeld",
                "type": "void",
                "desc": "Fires every tick while the desired key is held"
            },
            {
                "name": "OnKeyReleased",
                "type": "void",
                "desc": "Fires when the desired key is released"
            }
        ]
    },
    {
        "type": "BRUSH",
        "classname": "trigger_vphysics_motion",
        "desc": "A volumetric trigger that affects the motion of vphysics objects that touch it.",
        "bases": [
            "Trigger"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[4096] Can move (through hierarchical attachment)": {
                        "default": false,
                        "num": 4096
                    }
                }
            },
            {
                "name": "Gravity Scale",
                "key": "setgravityscale",
                "type": "float",
                "default": "1.0",
                "desc": "Scale gravity of objects in the field by this amount."
            },
            {
                "name": "Additional air density for drag",
                "key": "setadditionalairdensity",
                "type": "float",
                "default": "0",
                "desc": ""
            },
            {
                "name": "Velocity Limit",
                "key": "setvelocitylimit",
                "type": "float",
                "default": "0.0",
                "desc": "Max velocity in field (0 disables)"
            },
            {
                "name": "Velocity Limit Force",
                "key": "setvelocitylimitdelta",
                "type": "float",
                "default": "0.0",
                "desc": "Max amount to reduce velocity per second when it exceeds the velocity limit (0 disables)"
            },
            {
                "name": "Velocity scale/drag",
                "key": "setvelocityscale",
                "type": "float",
                "default": "1.0",
                "desc": ""
            },
            {
                "name": "Angular Velocity Limit",
                "key": "setangvelocitylimit",
                "type": "float",
                "default": "0.0",
                "desc": "Max angular velocity in field (degrees/s, 0 disables)"
            },
            {
                "name": "Angular Velocity scale/drag",
                "key": "setangvelocityscale",
                "type": "float",
                "default": "1.0",
                "desc": ""
            },
            {
                "name": "Linear force",
                "key": "setlinearforce",
                "type": "float",
                "default": "0.0",
                "desc": "Amount of force to apply while in the trigger (0 disables)"
            },
            {
                "name": "Force Direction",
                "key": "setlinearforceangles",
                "type": "angle",
                "default": "0 0 0",
                "desc": "Direction of linear force (Pitch Yaw Roll or Y Z X)"
            },
            {
                "name": "Particle Trail Material",
                "key": "particletrailmaterial",
                "type": "material",
                "default": "",
                "desc": "Name of a material to use for the particle trail, no name means no particle trail"
            },
            {
                "name": "Particle Trail Lifetime",
                "key": "particletraillifetime",
                "type": "float",
                "default": "4",
                "desc": "Lifetime of the particles to emit"
            },
            {
                "name": "Particle Trail Starting Sprite Size",
                "key": "particletrailstartsize",
                "type": "float",
                "default": "2",
                "desc": "Starting size of the sprite to emit"
            },
            {
                "name": "Particle Trail Ending Sprite Size",
                "key": "particletrailendsize",
                "type": "float",
                "default": "3",
                "desc": "Ending size of the sprite to emit"
            }
        ],
        "inputs": [
            {
                "name": "SetGravityScale",
                "type": "float",
                "desc": "Scale gravity of objects in the field."
            },
            {
                "name": "SetAdditionalAirDensity",
                "type": "float",
                "desc": "Additional air density for drag"
            },
            {
                "name": "SetVelocityLimit",
                "type": "float",
                "desc": "Max velocity in field."
            },
            {
                "name": "SetVelocityLimitDelta",
                "type": "float",
                "desc": "Max amount to reduce velocity per second"
            },
            {
                "name": "SetVelocityLimitTime",
                "type": "string",
                "desc": "Accepts two arguments: the first is the new velocity limit, the second is the time it takes to ramp to that value"
            },
            {
                "name": "SetVelocityScale",
                "type": "float",
                "desc": "Velocity scale/drag"
            },
            {
                "name": "SetAngVelocityLimit",
                "type": "float",
                "desc": "Max angular velocity in field."
            },
            {
                "name": "SetAngVelocityScale",
                "type": "float",
                "desc": "Angular Velocity scale/drag"
            },
            {
                "name": "SetLinearForce",
                "type": "float",
                "desc": "Linear force (0 disables)"
            }
        ],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_wind",
        "desc": "A trigger volume that pushes physics objects that touch it.",
        "bases": [
            "Trigger",
            "Angles"
        ],
        "keyvalues": [
            {
                "name": "Speed",
                "key": "speed",
                "type": "integer",
                "default": "200",
                "desc": "The baseline for how hard the wind blows."
            },
            {
                "name": "Speed Noise",
                "key": "speednoise",
                "type": "integer",
                "default": "0",
                "desc": "Noise added to wind speed +/-"
            },
            {
                "name": "Direction Noise",
                "key": "directionnoise",
                "type": "integer",
                "default": "10",
                "desc": "Noise added to wind direction."
            },
            {
                "name": "Hold Time",
                "key": "holdtime",
                "type": "integer",
                "default": "0",
                "desc": "Baseline for how long to wait before changing wind."
            },
            {
                "name": "Hold Noise",
                "key": "holdnoise",
                "type": "integer",
                "default": "0",
                "desc": "Noise added to how long to wait before changing wind."
            }
        ],
        "inputs": [
            {
                "name": "SetSpeed",
                "type": "integer",
                "desc": "Set the baseline for how hard the wind blows."
            }
        ],
        "outputs": []
    },
    {
        "type": "BASE",
        "classname": "TalkNPC",
        "desc": "",
        "bases": [
            "BaseNPC"
        ],
        "keyvalues": [
            {
                "name": "Use Sentence",
                "key": "usesentence",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Un-Use Sentence",
                "key": "unusesentence",
                "type": "string",
                "default": "",
                "desc": ""
            },
            {
                "name": "Don't Use Speech Semaphore",
                "key": "dontusespeechsemaphore",
                "type": "choices",
                "default": "No (Use speech semaphore) (0)",
                "desc": "Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks.",
                "choices": {
                    "No (Use speech semaphore)": "0",
                    "Yes (Don't use speech semaphore)": "1"
                }
            }
        ],
        "inputs": [
            {
                "name": "SpeakResponseConcept",
                "type": "string",
                "desc": "Speak the specified response concept."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "cycler_actor",
        "desc": "Actor Cycler",
        "bases": [
            "BaseNPC",
            "SetModel"
        ],
        "keyvalues": [
            {
                "name": "Sentence Group",
                "key": "sentence",
                "type": "string",
                "default": "",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_physbox_multiplayer",
        "desc": "This class is the same as func_physbox, except the runtime collisions use a more bouncy method that avoids the prediction errors normal physics objects get.",
        "bases": [
            "func_physbox"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_pushable",
        "desc": "A brush with primitive physics that can be pushed around.",
        "bases": [
            "func_breakable"
        ],
        "keyvalues": [
            {
                "name": "Hull Size",
                "key": "size",
                "type": "choices",
                "default": "Point size (0)",
                "desc": "",
                "choices": {
                    "Point size": "0",
                    "Player size": "1",
                    "Big Size": "2",
                    "Player duck": "3"
                }
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Only Break on Trigger": {
                        "default": false,
                        "num": 1
                    },
                    "[2] Break on Touch": {
                        "default": false,
                        "num": 2
                    },
                    "[4] Break on Pressure": {
                        "default": false,
                        "num": 4
                    },
                    "[512] Break immediately on Physics": {
                        "default": false,
                        "num": 512
                    },
                    "[1024] Don't take physics damage": {
                        "default": false,
                        "num": 1024
                    },
                    "[2048] Don't allow bullet penetration": {
                        "default": false,
                        "num": 2048
                    },
                    "[128] Breakable": {
                        "default": false,
                        "num": 128
                    }
                }
            },
            {
                "name": "Friction",
                "key": "friction",
                "type": "float",
                "default": "50",
                "desc": "This determines the amount of resistance the brush will give when the player pushes it. Range is 0 to 400, where 400 is the most resistance."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "func_water",
        "desc": "Legacy Goldsrc support. Non-moving water should be worldspawn, and moving water should be func_water_analog. This brush is a special variant of func_door with water collision physics.",
        "bases": [
            "func_door"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "generic_actor",
        "desc": "Generic Actor NPC",
        "bases": [
            "BaseNPC",
            "SetModel"
        ],
        "keyvalues": [
            {
                "name": "Hull type",
                "key": "hull_name",
                "type": "choices",
                "default": "Human (HUMAN_HULL)",
                "desc": "",
                "choices": {
                    "Human": "HUMAN_HULL",
                    "Wide": "WIDE_HUMAN_HULL",
                    "Tiny": "TINY_HULL",
                    "Medium": "MEDIUM_HULL",
                    "Large": "LARGE_HULL"
                }
            },
            {
                "name": "Default Animation",
                "key": "defaultanim",
                "type": "string",
                "default": "",
                "desc": "The name of the idle animation that this prop will revert to whenever it finishes a random or forced animation."
            },
            {
                "name": "Randomly Animate",
                "key": "randomanimation",
                "type": "boolean",
                "default": "No",
                "desc": "If set, this prop will randomly choose and play animations, based upon the times specified in Min/Max Random Anim Time. Inbetween the random animations, it will revert to playing the 'Default Animation'."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "hot_potato",
        "desc": "This uses the futbol model. It can be carried around, but on impact it explodes, similar to prop_exploding_futbols.",
        "bases": [
            "prop_glass_futbol",
            "prop_exploding_futbol"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "monster_generic",
        "desc": "Generic Script NPC",
        "bases": [
            "BaseNPC"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[65536] Not solid": {
                        "default": false,
                        "num": 65536
                    }
                }
            },
            {
                "name": "Model",
                "key": "model",
                "type": "studio",
                "default": "",
                "desc": ""
            },
            {
                "name": "Body",
                "key": "body",
                "type": "integer",
                "default": "0",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "npc_furniture",
        "desc": "An entity used for non-NPCs that need to synchronise their animation with an NPC in a scripted_sequence. Usually a piece of furniture or door that an NPC needs to manipulate within a scripted_sequence.",
        "bases": [
            "BaseNPC",
            "SetModel"
        ],
        "keyvalues": [],
        "inputs": [
            {
                "name": "DisablePlayerCollision",
                "type": "void",
                "desc": "Disable collisions against the player."
            },
            {
                "name": "EnablePlayerCollision",
                "type": "void",
                "desc": "Enable collisions against the player."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "npc_heardanger",
        "desc": "A Generic NPC entity that hears and reports 'danger' and is not preserved on round restart. Danger sounds consist of gunshots, player sounds, bullet impacts, nearby vehicles and andything else that gives off a danger sound.",
        "bases": [
            "BaseNPC",
            "SetModel"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": [
            {
                "name": "OnHearWorld",
                "type": "void",
                "desc": "Fired when this NPC hears a sound (other than combat or the player)."
            },
            {
                "name": "OnHearPlayer",
                "type": "void",
                "desc": "Fired when this NPC hears the player."
            },
            {
                "name": "OnHearCombat",
                "type": "void",
                "desc": "Fired when this NPC hears combat sounds."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "npc_hover_turret",
        "desc": "The cut Hover Turret, which hangs from the ceiling and fires a laser at the player. Missing its model by default, and somewhat buggy.",
        "bases": [
            "BaseNPC"
        ],
        "keyvalues": [
            {
                "name": "Laser Pushes Player",
                "key": "canpushplayer",
                "type": "boolean",
                "default": "No",
                "desc": "Should the hover turret's laser deal knockback? Usually only works while the player is in the air."
            },
            {
                "name": "Idle Rotation Speed",
                "key": "sentryrotatespeed",
                "type": "float",
                "default": "10",
                "desc": "While idle, the hover turret will rotate at this speed."
            },
            {
                "name": "Tether Attach Target",
                "key": "attachtarget",
                "type": "target_destination",
                "default": "",
                "desc": "An entity (usually info_target) which the hover turret should hang from."
            },
            {
                "name": "<Maximum Range>",
                "key": "_frustum_far",
                "type": "integer",
                "default": "2048",
                "desc": "How far the turret will be able to see targets. Always 2048, but this keyvalue is needed to display the preview."
            },
            {
                "name": "<Frustum Color>",
                "key": "_frustum_color",
                "type": "string",
                "default": "0 255 255",
                "desc": "Ignore, needed to color the range preview."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "npc_portal_turret_floor",
        "desc": "Aperture Science Sentry Turret.",
        "bases": [
            "BaseNPC"
        ],
        "keyvalues": [
            {
                "name": "Damage Pushes Player",
                "key": "damageforce",
                "type": "boolean",
                "default": "No",
                "desc": "Being hit by this turret will push the player back."
            },
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[32] Start Active": {
                        "default": false,
                        "num": 32
                    },
                    "[64] Start Inactive": {
                        "default": false,
                        "num": 64
                    },
                    "[128] Fast Retire": {
                        "default": false,
                        "num": 128
                    },
                    "[256] Out of Ammo": {
                        "default": false,
                        "num": 256
                    }
                }
            },
            {
                "name": "Model",
                "key": "modelindex",
                "type": "choices",
                "default": "Normal (0)",
                "desc": "Which model the turret uses. The skeleton turret is still functional.",
                "choices": {
                    "Normal": "0",
                    "Custom Model": "1",
                    "Box": "2",
                    "Backwards": "3",
                    "Skeleton": "4"
                }
            },
            {
                "name": "Skin",
                "key": "skinnumber",
                "type": "choices",
                "default": "Normal (0)",
                "desc": "Set the skin used for the turret. Only useful on normal (for a destroyed variant) or custom turrets.",
                "choices": {
                    "Normal": "0",
                    "Destroyed": "1"
                }
            },
            {
                "name": "Gag Turret",
                "key": "gagged",
                "type": "boolean",
                "default": "No",
                "desc": "Turret will not speak any lines."
            },
            {
                "name": "Used As Actor",
                "key": "usedasactor",
                "type": "boolean",
                "default": "No",
                "desc": "Turret will not run the standard floor turret code so it can be used as an actor."
            },
            {
                "name": "Turret Pickup Allowed",
                "key": "pickupenabled",
                "type": "boolean",
                "default": "No",
                "desc": "Disables pickup by player."
            },
            {
                "name": "Disable Motion",
                "key": "disablemotion",
                "type": "boolean",
                "default": "No",
                "desc": "Set for turrets that can't move in the world."
            },
            {
                "name": "Allow Shooting Through Portals",
                "key": "allowshootthroughportals",
                "type": "boolean",
                "default": "No",
                "desc": "Turrets will not try to shoot through portals unless this is set."
            },
            {
                "name": "Maximum Range",
                "key": "turretrange",
                "type": "float",
                "default": "1024",
                "desc": "How far the turret will be able to see targets."
            },
            {
                "name": "Load Defective Models",
                "key": "loadalternativemodels",
                "type": "boolean",
                "default": "No",
                "desc": "Should this turret precache the defective models? Needed for late switching."
            },
            {
                "name": "Use Super Damage",
                "key": "usesuperdamagescale",
                "type": "boolean",
                "default": "No",
                "desc": "Setting this to true will scale the turret's damage by a very large amount."
            },
            {
                "name": "Collision Type",
                "key": "collisiontype",
                "type": "choices",
                "default": "Normal (0)",
                "desc": "Allow collision with the player to be turned off for very special cases.",
                "choices": {
                    "Normal": "0",
                    "Debris": "1"
                }
            },
            {
                "name": "Custom Model",
                "key": "model",
                "type": "choices",
                "default": "Normal (models/npcs/turret/turret.mdl)",
                "desc": "The model to show as in Hammer, or a custom model to use.",
                "choices": {
                    "Normal": "models/npcs/turret/turret.mdl",
                    "Box": "models/npcs/turret/turret_boxed.mdl",
                    "Backwards": "models/npcs/turret/turret_backwards.mdl",
                    "Skeleton": "models/npcs/turret/turret_skeleton.mdl"
                }
            },
            {
                "name": "[H] Skin",
                "key": "skin",
                "type": "integer",
                "default": "0",
                "desc": "The skin to show, mainly for the normal model."
            },
            {
                "name": "<Frustum Color>",
                "key": "_frustum_color",
                "type": "string",
                "default": "255 0 0",
                "desc": "Ignore, needed to color the range preview."
            }
        ],
        "inputs": [
            {
                "name": "FireBullet",
                "type": "string",
                "desc": "Causes the turret to instantly fire at the specified entity."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle enabled state."
            },
            {
                "name": "Enable",
                "type": "void",
                "desc": "Enable the turret."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Disable the turret."
            },
            {
                "name": "DepleteAmmo",
                "type": "void",
                "desc": "Depletes all the ammo from a turret, causing it to dry-fire."
            },
            {
                "name": "RestoreAmmo",
                "type": "void",
                "desc": "Restores ammo to a turret, allowing it to fire live rounds again."
            },
            {
                "name": "EnableGagging",
                "type": "void",
                "desc": "Prevents the turret from speaking any lines."
            },
            {
                "name": "DisableGagging",
                "type": "void",
                "desc": "Allows the turret to speak again."
            },
            {
                "name": "EnablePickup",
                "type": "void",
                "desc": "Enables player pickup of the turret."
            },
            {
                "name": "DisablePickup",
                "type": "void",
                "desc": "Disables player pickup of the turret."
            },
            {
                "name": "SelfDestruct",
                "type": "void",
                "desc": "Causes the turret to play lines, ignite and then explode."
            },
            {
                "name": "SelfDestructImmediately",
                "type": "void",
                "desc": "Cause the turret to explode immediately."
            },
            {
                "name": "SetAsBouncePainted",
                "type": "void",
                "desc": "Force this turret to be painted with bounce paint."
            },
            {
                "name": "EnableMotion",
                "type": "void",
                "desc": "Enable physics motion."
            },
            {
                "name": "DisableMotion",
                "type": "void",
                "desc": "Disable physics motion."
            },
            {
                "name": "SetModel",
                "type": "integer",
                "desc": "Change the model, where the parameter is an integer from 0-4. Requires the Load Defective Models keyvalue to be true!"
            }
        ],
        "outputs": [
            {
                "name": "OnDeploy",
                "type": "void",
                "desc": "Turret has seen the player and is deploying its arms."
            },
            {
                "name": "OnRetire",
                "type": "void",
                "desc": "Turret has lost sight of the player and is returning to sleep mode."
            },
            {
                "name": "OnTipped",
                "type": "void",
                "desc": "Turret has been tipped over and 'died'."
            },
            {
                "name": "OnExplode",
                "type": "void",
                "desc": "Turret has exploded."
            },
            {
                "name": "OnPhysGunPickup",
                "type": "void",
                "desc": "Turret was picked up by player."
            },
            {
                "name": "OnPhysGunDrop",
                "type": "void",
                "desc": "Turret was dropped by player."
            },
            {
                "name": "OnPainted",
                "type": "void",
                "desc": "Fires when the turret is first painted or if repainted by a different color."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "npc_rocket_turret",
        "desc": "Portal 1 rocket sentry, aims a rocket at a target. In Portal 2, the rocket spawns with a speed of 0 and sometimes gets stuck inside the model, so this will need to be worked around.",
        "bases": [
            "BaseNPC",
            "ResponseContext"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[1] Start Retracted": {
                        "default": false,
                        "num": 1
                    }
                }
            },
            {
                "name": "Rocket Speed",
                "key": "rocketspeed",
                "type": "float",
                "default": "450",
                "desc": "Speed the rocket will travel at."
            },
            {
                "name": "Rocket Lifetime",
                "key": "rocketlifetime",
                "type": "float",
                "default": "20",
                "desc": "The rocket will automatically detonate after this number of seconds."
            },
            {
                "name": "Tripwire Mode",
                "key": "tripwiremode",
                "type": "boolean",
                "default": "No",
                "desc": "Makes the turret aim in a specific direction instead of following the target. When the beam is crossed, a rocket instantly fires."
            },
            {
                "name": "Tripwire Aim Target",
                "key": "tripwireaimtarget",
                "type": "target_destination",
                "default": "",
                "desc": "In tripwire mode, the entity to aim at."
            },
            {
                "name": "Model",
                "key": "model",
                "type": "studio",
                "default": "models/props_bts/rocket_sentry.mdl",
                "desc": "Model to use in-game"
            },
            {
                "name": "<Maximum Range>",
                "key": "_sphere_radius",
                "type": "integer",
                "default": "8192",
                "desc": "How far the turret will be able to see targets. Always 8192, but this keyvalue is needed to display the preview."
            }
        ],
        "inputs": [
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggles between activated and deactivated states."
            },
            {
                "name": "Enable",
                "type": "void",
                "desc": "Activate Rocket Turret, and allow it to begin scanning."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Deactivate and retract the Rocket Turret."
            },
            {
                "name": "SetTarget",
                "type": "target_destination",
                "desc": "Sets the target for this turret to attack."
            },
            {
                "name": "Destroy",
                "type": "void",
                "desc": "Sets this turret to it's destroyed state."
            },
            {
                "name": "ForceFire",
                "type": "void",
                "desc": "Makes the turret immediately fire a rocket where it is pointing."
            }
        ],
        "outputs": [
            {
                "name": "OnFoundTarget",
                "type": "void",
                "desc": "Fired when the rocket turret finds an unobstructed target."
            },
            {
                "name": "OnLostTarget",
                "type": "void",
                "desc": "Fired when turret's target is blocked."
            },
            {
                "name": "OnDeath",
                "type": "void",
                "desc": "Fired after this turret finishes it's destroy think and begins it's death think."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "npc_security_camera",
        "desc": "Aperture Science Security Camera. Follows either the player or their pings (Portal 2). When a portal is opened behind it it will fall off the wall. If gestured to in Coop the player's camera will switch to looking out of the camera lens, with a viewfinder effect.",
        "bases": [
            "BaseNPC",
            "SetSkin"
        ],
        "keyvalues": [
            {
                "name": "spawnflags",
                "key": "spawnflags",
                "type": "flags",
                "default": "",
                "desc": "",
                "flags": {
                    "[32] Start Active": {
                        "default": true,
                        "num": 32
                    }
                }
            },
            {
                "name": "Target",
                "key": "lookatplayerpings",
                "type": "choices",
                "default": "Players (0)",
                "desc": "Target to follow: the player, or their pings (co-op mode only)",
                "choices": {
                    "Players": "0",
                    "Pings": "1"
                }
            },
            {
                "name": "Ping Type To Follow",
                "key": "teamtolookat",
                "type": "choices",
                "default": "Both (1)",
                "desc": "Which player's pings to look at.",
                "choices": {
                    "Both": "1",
                    "P-Body": "2",
                    "ATLAS": "3"
                }
            },
            {
                "name": "Player To Follow",
                "key": "teamplayertolookat",
                "type": "choices",
                "default": "Both (0)",
                "desc": "Which player the camera should follow.",
                "choices": {
                    "Both": "0",
                    "P-Body": "2",
                    "ATLAS": "3"
                }
            },
            {
                "name": "Camera Model",
                "key": "model",
                "type": "studio",
                "default": "models/props/security_camera.mdl",
                "desc": "Model to be used in game"
            }
        ],
        "inputs": [
            {
                "name": "Enable",
                "type": "void",
                "desc": "Start following players."
            },
            {
                "name": "Disable",
                "type": "void",
                "desc": "Stop following players, freezing in place."
            },
            {
                "name": "Toggle",
                "type": "void",
                "desc": "Toggle following players."
            },
            {
                "name": "Ragdoll",
                "type": "void",
                "desc": "Knock the camera off the wall."
            },
            {
                "name": "LookAtBlue",
                "type": "void",
                "desc": "Make the camera only follow ATLAS."
            },
            {
                "name": "LookAtOrange",
                "type": "void",
                "desc": "Make the camera only follow P-Body."
            },
            {
                "name": "LookAllTeams",
                "type": "void",
                "desc": "Make the camera follow all players."
            }
        ],
        "outputs": [
            {
                "name": "OnDeploy",
                "type": "void",
                "desc": "Camera is becoming active and dangerous."
            },
            {
                "name": "OnRetire",
                "type": "void",
                "desc": "Camera is becoming inactive and harmless."
            },
            {
                "name": "OnTaunted",
                "type": "void",
                "desc": "A player STARTED taunting the camera."
            },
            {
                "name": "OnTauntedBlue",
                "type": "void",
                "desc": "ATLAS STARTED taunting the camera."
            },
            {
                "name": "OnTauntedOrange",
                "type": "void",
                "desc": "P-Body STARTED taunting the camera."
            },
            {
                "name": "OnTauntedFinished",
                "type": "void",
                "desc": "A player FINISHED taunting the camera."
            },
            {
                "name": "OnTauntedBlueFinished",
                "type": "void",
                "desc": "ATLAS FINISHED taunting the camera."
            },
            {
                "name": "OnTauntedOrangeFinished",
                "type": "void",
                "desc": "P-Body FINISHED taunting the camera."
            }
        ]
    },
    {
        "type": "POINT",
        "classname": "npc_wheatley_boss",
        "desc": "Wheatley NPC stub",
        "bases": [
            "BaseNPC",
            "SetSkin"
        ],
        "keyvalues": [
            {
                "name": "Model",
                "key": "model",
                "type": "studio",
                "default": "models/npcs/glados/glados_wheatley_boss.mdl",
                "desc": ""
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_dynamic_glow",
        "desc": "A prop that can be placed in hierarchy and can play animations. It can also be configured to break when it takes enough damage.\nWorks exactly like a prop_dynamic, but it can optionally have a custom glow around it.",
        "bases": [
            "prop_dynamic"
        ],
        "keyvalues": [
            {
                "name": "Glow Distance",
                "key": "glowdist",
                "type": "integer",
                "default": "1024",
                "desc": ""
            },
            {
                "name": "Does the prop glow by default?",
                "key": "glowenabled",
                "type": "boolean",
                "default": "No",
                "desc": ""
            },
            {
                "name": "Glow Color (R G B)",
                "key": "glowcolor",
                "type": "color255",
                "default": "255 255 255",
                "desc": "The color of the glow (if enabled)."
            },
            {
                "name": "Glow Style",
                "key": "glowstyle",
                "type": "choices",
                "default": "Default (through walls) (0)",
                "desc": "What style of glow should be used.",
                "choices": {
                    "Default (through walls)": "0",
                    "Shimmer (doesn't glow through walls)": "1",
                    "Outline (doesn't glow through walls)": "2",
                    "Outline Pulse (doesn't glow through walls)": "3"
                }
            }
        ],
        "inputs": [
            {
                "name": "SetGlowEnabled",
                "type": "void",
                "desc": "Starts the glow."
            },
            {
                "name": "SetGlowDisabled",
                "type": "void",
                "desc": "Stops the glow."
            },
            {
                "name": "SetGlowColor",
                "type": "color255",
                "desc": "Change the glow's color. Format: <Red 0-255> <Green 0-255> <Blue 0-255>"
            },
            {
                "name": "GlowColorRedValue",
                "type": "float",
                "desc": "Sets the glow red color channel's value (0 - 255)."
            },
            {
                "name": "GlowColorGreenValue",
                "type": "float",
                "desc": "Sets the glow green color channel's value (0 - 255)."
            },
            {
                "name": "GlowColorBlueValue",
                "type": "float",
                "desc": "Sets the glow blue color channel's value (0 - 255)."
            }
        ],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_physics_multiplayer",
        "desc": "This class is the same as prop_physics, except the runtime collisions use a more bouncy method that avoids the prediction errors normal physics objects get.",
        "bases": [
            "prop_physics"
        ],
        "keyvalues": [
            {
                "name": "Physics Mode",
                "key": "physicsmode",
                "type": "choices",
                "default": "Auto Detect (0)",
                "desc": "",
                "choices": {
                    "Auto Detect": "0",
                    "Solid, Server-side": "1",
                    "Non-Solid, Server-side": "2",
                    "Non-Solid, Client-side": "3"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_physics_override",
        "desc": "A variant of prop_physics which will permit using models that do not have physics data compiled into them, like static or dynamic models. Health and physics data can be overridden on this version, to substitute for the missing info.",
        "bases": [
            "prop_physics"
        ],
        "keyvalues": [
            {
                "name": "Health",
                "key": "health",
                "type": "integer",
                "default": "0",
                "desc": "Number of points of damage to take before breaking.  0 means don't break."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_physics_paintable",
        "desc": "A version of prop_physics that can be painted by Gel. Does not appear to show up on the model.",
        "bases": [
            "prop_physics"
        ],
        "keyvalues": [
            {
                "name": "Paint Power",
                "key": "paintpower",
                "type": "choices",
                "default": "None (4)",
                "desc": "The starting gel type for the prop.",
                "choices": {
                    "Repulsion Gel": "0",
                    "Adhesion Gel": "1",
                    "Propulsion Gel": "2",
                    "Conversion Gel": "3",
                    "None": "4"
                }
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "prop_physics_respawnable",
        "desc": "This class is the same as prop_physics, except it respawns after it breaks",
        "bases": [
            "prop_physics"
        ],
        "keyvalues": [
            {
                "name": "Respawn Time",
                "key": "respawntime",
                "type": "float",
                "default": "60",
                "desc": "Ammount in seconds this prop will respawn after it breaks."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_hierarchy",
        "desc": "A trigger volume that can will check if any of trigger's children pass a secondary filter.",
        "bases": [
            "trigger_multiple"
        ],
        "keyvalues": [
            {
                "name": "Child Filter Name",
                "key": "childfiltername",
                "type": "filterclass",
                "default": "",
                "desc": "Filter to use to see if activator's children trigger me. See filter_activator_name for more explanation."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_momentum_promptinput",
        "desc": "Trigger that prompts the player to press a button if inside trigger. Has support for up to 3 keys.",
        "bases": [
            "trigger_userinput"
        ],
        "keyvalues": [
            {
                "name": "Negate",
                "key": "negate",
                "type": "boolean",
                "default": "No",
                "desc": "If true, prompts will fire when keys are held rather than when they aren't."
            },
            {
                "name": "Prompt Message",
                "key": "message",
                "type": "string",
                "default": "",
                "desc": "Message to display to the player for prompts."
            },
            {
                "name": "Player Speed",
                "key": "playerspeed",
                "type": "float",
                "default": "0.1",
                "desc": "On prompting, the player's speed will be changed by this factor (use <1 for slowdowns, >1 for speedups)."
            },
            {
                "name": "Player Zoom Rate",
                "key": "zoomrate",
                "type": "float",
                "default": "0.2",
                "desc": "Amount of time (in seconds) to move between current FOV and zoomfov."
            },
            {
                "name": "Player Zoom FOV",
                "key": "zoomfov",
                "type": "integer",
                "default": "0",
                "desc": "FOV to zoom to on prompting. Use 0 for no zoom."
            }
        ],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "BRUSH",
        "classname": "trigger_teleport",
        "desc": "A trigger volume that teleports entities that touch it. Entities are teleported to the Remote Destination, and have their angles set to that of the Remote Destination's. If a Local Destination Landmark is specified, teleported entities are offset from the target by their initial offset from the landmark, and their angles are left alone.",
        "bases": [
            "TeleTrigger"
        ],
        "keyvalues": [],
        "inputs": [],
        "outputs": []
    },
    {
        "type": "POINT",
        "classname": "npc_personality_core",
        "desc": "Aperture Science Personality Construct. Animated balls with handles.",
        "bases": [
            "TalkNPC"
        ],
        "keyvalues": [
            {
                "name": "Model Skin",
                "key": "modelskin",
                "type": "choices",
                "default": "Skin 0 (0)",
                "desc": "If using the 'alt' skin, this sets the eye color -- If not using the alt skin, (0 = broken) (1=normal)",
                "choices": {
                    "Skin 0": "0",
                    "Skin 1": "1",
                    "Skin 2": "2",
                    "Skin 3": "3"
                }
            },
            {
                "name": "Model Variant",
                "key": "altmodel",
                "type": "choices",
                "default": "Proto (0)",
                "desc": "Model variant to use",
                "choices": {
                    "Proto": "0",
                    "Normal": "1"
                }
            },
            {
                "name": "[H] Model",
                "key": "model",
                "type": "choices",
                "default": "Proto (models/npcs/personality_sphere/personality_sphere.mdl)",
                "desc": "Choose the model to show in hammer. Set to the same as Use Alternate Skins.",
                "choices": {
                    "Proto": "models/npcs/personality_sphere/personality_sphere.mdl",
                    "Normal": "models/npcs/personality_sphere/personality_sphere_skins.mdl"
                }
            },
            {
                "name": "[H] Skin",
                "key": "skin",
                "type": "choices",
                "default": "Skin 0 (0)",
                "desc": "If using the 'alt' skin, this sets the eye color (in hammer) -- If not using the alt skin, (0 = broken) (1=normal)",
                "choices": {
                    "Skin 0": "0",
                    "Skin 1": "1",
                    "Skin 2": "2",
                    "Skin 3": "3"
                }
            },
            {
                "name": "Flashlight Color",
                "key": "flashlightcolor",
                "type": "choices",
                "default": "White (255 255 255 500)",
                "desc": "Color of the flashlight",
                "choices": {
                    "White": "255 255 255 500",
                    "Red": "240 150 150 500",
                    "Blue": "150 150 220 500"
                }
            },
            {
                "name": "Flashlight FOV",
                "key": "flashlightfov",
                "type": "float",
                "default": "90",
                "desc": "Field of view of the flashlight"
            },
            {
                "name": "Flashlight FarZ",
                "key": "flashlightfarz",
                "type": "float",
                "default": "750",
                "desc": "FarZ (Distance) of the flashlight"
            },
            {
                "name": "Flashlight Brightness",
                "key": "flashlightbrightness",
                "type": "float",
                "default": "1",
                "desc": "Brightness of the flashlight"
            }
        ],
        "inputs": [
            {
                "name": "EnableMotion",
                "type": "void",
                "desc": "Enable physics motion/collision response."
            },
            {
                "name": "DisableMotion",
                "type": "void",
                "desc": "Disable physics motion/collision response."
            },
            {
                "name": "EnableFlashlight",
                "type": "void",
                "desc": "Enable the eye flashlight."
            },
            {
                "name": "DisableFlashlight",
                "type": "void",
                "desc": "Disable the eye flashlight."
            },
            {
                "name": "ForcePickup",
                "type": "void",
                "desc": "Force the player to pickup the sphere immediately."
            },
            {
                "name": "EnablePickup",
                "type": "void",
                "desc": "Allow player pickup."
            },
            {
                "name": "DisablePickup",
                "type": "void",
                "desc": "Disable player pickup."
            },
            {
                "name": "PlayAttach",
                "type": "void",
                "desc": "Play the attachment animation, used for syncing with the socket's animation."
            },
            {
                "name": "PlayDetach",
                "type": "void",
                "desc": "Play the detachment animation, used for syncing with the socket's animation."
            },
            {
                "name": "PlayLock",
                "type": "void",
                "desc": "Play the locking animation, used for syncing with the socket's animation."
            },
            {
                "name": "SetIdleSequence",
                "type": "string",
                "desc": "Set a sequence to use as an idle sequence."
            },
            {
                "name": "ClearIdleSequence",
                "type": "void",
                "desc": "Return to the default idle animation."
            },
            {
                "name": "Explode",
                "type": "void",
                "desc": "Explode the sphere, triggering an explosion effect and some gibs."
            },
            {
                "name": "SetFlashlightFOV",
                "type": "float",
                "desc": "Changes the field of view of the flashlight."
            },
            {
                "name": "SetFlashlightBrightness",
                "type": "float",
                "desc": "Changes the brightness of the flashlight."
            }
        ],
        "outputs": [
            {
                "name": "OnPlayerPickup",
                "type": "void",
                "desc": "Fired whenever the player picks up the core."
            },
            {
                "name": "OnPlayerDrop",
                "type": "void",
                "desc": "Fired whenever the player drops the core."
            }
        ]
    }
]