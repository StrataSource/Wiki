{
    "namespace": [
        "Utility"
    ],
    "enum": [
        {
            "namespace": null,
            "name": "EMaterialVarType",
            "value": {
                "MATERIAL_VAR_TYPE_FLOAT": 0,
                "MATERIAL_VAR_TYPE_STRING": 1,
                "MATERIAL_VAR_TYPE_VECTOR": 2,
                "MATERIAL_VAR_TYPE_TEXTURE": 3,
                "MATERIAL_VAR_TYPE_INT": 4,
                "MATERIAL_VAR_TYPE_FOURCC": 5,
                "MATERIAL_VAR_TYPE_UNDEFINED": 6,
                "MATERIAL_VAR_TYPE_MATRIX": 7,
                "MATERIAL_VAR_TYPE_MATERIAL": 8
            }
        },
        {
            "namespace": null,
            "name": "EImageFormat",
            "value": {
                "IMAGE_FORMAT_DEFAULT": -2,
                "IMAGE_FORMAT_UNKNOWN": -1,
                "IMAGE_FORMAT_RGBA8888": 0,
                "IMAGE_FORMAT_ABGR8888": 1,
                "IMAGE_FORMAT_RGB888": 2,
                "IMAGE_FORMAT_BGR888": 3,
                "IMAGE_FORMAT_RGB565": 4,
                "IMAGE_FORMAT_I8": 5,
                "IMAGE_FORMAT_IA88": 6,
                "IMAGE_FORMAT_P8": 7,
                "IMAGE_FORMAT_A8": 8,
                "IMAGE_FORMAT_RGB888_BLUESCREEN": 9,
                "IMAGE_FORMAT_BGR888_BLUESCREEN": 10,
                "IMAGE_FORMAT_ARGB8888": 11,
                "IMAGE_FORMAT_BGRA8888": 12,
                "IMAGE_FORMAT_DXT1": 13,
                "IMAGE_FORMAT_DXT3": 14,
                "IMAGE_FORMAT_DXT5": 15,
                "IMAGE_FORMAT_BGRX8888": 16,
                "IMAGE_FORMAT_BGR565": 17,
                "IMAGE_FORMAT_BGRX5551": 18,
                "IMAGE_FORMAT_BGRA4444": 19,
                "IMAGE_FORMAT_DXT1_ONEBITALPHA": 20,
                "IMAGE_FORMAT_BGRA5551": 21,
                "IMAGE_FORMAT_UV88": 22,
                "IMAGE_FORMAT_UVWQ8888": 23,
                "IMAGE_FORMAT_RGBA16161616F": 24,
                "IMAGE_FORMAT_RGBA16161616": 25,
                "IMAGE_FORMAT_UVLX8888": 26,
                "IMAGE_FORMAT_R32F": 27,
                "IMAGE_FORMAT_RGB323232F": 28,
                "IMAGE_FORMAT_RGBA32323232F": 29,
                "IMAGE_FORMAT_RG1616F": 30,
                "IMAGE_FORMAT_RG3232F": 31,
                "IMAGE_FORMAT_RGBX8888": 32,
                "IMAGE_FORMAT_NULL": 33,
                "IMAGE_FORMAT_ATI2N": 34,
                "IMAGE_FORMAT_ATI1N": 35,
                "IMAGE_FORMAT_RGBA1010102": 36,
                "IMAGE_FORMAT_BGRA1010102": 37,
                "IMAGE_FORMAT_R16F": 38,
                "IMAGE_FORMAT_D16": 39,
                "IMAGE_FORMAT_D15S1": 40,
                "IMAGE_FORMAT_D32": 41,
                "IMAGE_FORMAT_D24S8": 42,
                "IMAGE_FORMAT_LINEAR_D24S8": 43,
                "IMAGE_FORMAT_D24X8": 44,
                "IMAGE_FORMAT_D24X4S4": 45,
                "IMAGE_FORMAT_D24FS8": 46,
                "IMAGE_FORMAT_D16_SHADOW": 47,
                "IMAGE_FORMAT_D24X8_SHADOW": 48,
                "IMAGE_FORMAT_LINEAR_BGRX8888": 49,
                "IMAGE_FORMAT_LINEAR_RGBA8888": 50,
                "IMAGE_FORMAT_LINEAR_ABGR8888": 51,
                "IMAGE_FORMAT_LINEAR_ARGB8888": 52,
                "IMAGE_FORMAT_LINEAR_BGRA8888": 53,
                "IMAGE_FORMAT_LINEAR_RGB888": 54,
                "IMAGE_FORMAT_LINEAR_BGR888": 55,
                "IMAGE_FORMAT_LINEAR_BGRX5551": 56,
                "IMAGE_FORMAT_LINEAR_I8": 57,
                "IMAGE_FORMAT_LINEAR_RGBA16161616": 58,
                "IMAGE_FORMAT_LINEAR_A8": 59,
                "IMAGE_FORMAT_LINEAR_DXT1": 60,
                "IMAGE_FORMAT_LINEAR_DXT3": 61,
                "IMAGE_FORMAT_LINEAR_DXT5": 62,
                "IMAGE_FORMAT_LE_BGRX8888": 63,
                "IMAGE_FORMAT_LE_BGRA8888": 64,
                "IMAGE_FORMAT_DXT1_RUNTIME": 65,
                "IMAGE_FORMAT_DXT5_RUNTIME": 66,
                "IMAGE_FORMAT_DXT3_RUNTIME": 67,
                "IMAGE_FORMAT_INTZ": 68,
                "IMAGE_FORMAT_R8": 69,
                "IMAGE_FORMAT_BC7": 70,
                "IMAGE_FORMAT_BC6H": 71,
                "NUM_IMAGE_FORMATS": 72
            }
        },
        {
            "namespace": null,
            "name": "EMatrixType",
            "value": {
                "MATRIX_TYPE_VIEW": 0,
                "MATRIX_TYPE_MODEL": 2,
                "MATRIX_TYPE_PROJECTION": 1
            }
        },
        {
            "namespace": null,
            "name": "EFogType",
            "value": {
                "FOG_TYPE_LINEAR": 1,
                "FOG_TYPE_LINEAR_BELOWZ": 2,
                "FOG_TYPE_NONE": 0
            }
        },
        {
            "namespace": null,
            "name": "ERenderTargetDepth",
            "value": {
                "RENDERTARGET_DEPTH_NONE": 2,
                "RENDERTARGET_DEPTH_SHARED": 0,
                "RENDERTARGET_DEPTH_SEPARATE": 1,
                "RENDERTARGET_DEPTH_ONLY": 3
            }
        },
        {
            "namespace": null,
            "name": "ERenderTargetSize",
            "value": {
                "RENDERTARGET_SIZE_DEFAULT": 1,
                "RENDERTARGET_SIZE_NO_CHANGE": 0,
                "RENDERTARGET_SIZE_OFFSCREEN": 5,
                "RENDERTARGET_SIZE_FULL_FRAME_BUFFER": 4,
                "RENDERTARGET_SIZE_FULL_FRAME_BUFFER_ROUNDED_UP": 6
            }
        },
        {
            "namespace": null,
            "name": "EMatrixMode",
            "value": {
                "MATRIXMODE_MODEL": 2,
                "MATRIXMODE_PROJ": 1,
                "MATRIXMODE_VIEW": 0
            }
        },
        {
            "namespace": null,
            "name": "EDebugMaterial",
            "value": {
                "DEBUG_MATERIAL_WIREFRAME": 0,
                "DEBUG_MATERIAL_WIREFRAME_NOZ": 1,
                "DEBUG_MATERIAL_VERTEX_COLOR": 2,
                "DEBUG_MATERIAL_VERTEX_COLOR_NOZ": 3,
                "DEBUG_MATERIAL_VERTEX_COLOR_NOZ_ADD": 4
            }
        },
        {
            "namespace": null,
            "name": "ESolidType",
            "value": {
                "SOLID_NONE": 0,
                "SOLID_BSP": 1,
                "SOLID_BBOX": 2,
                "SOLID_OBB": 3,
                "SOLID_OBB_YAW": 4,
                "SOLID_CUSTOM": 5,
                "SOLID_VPHYSICS": 6,
                "SOLID_LAST": 7
            }
        },
        {
            "namespace": null,
            "name": "EMoveCollide",
            "value": {
                "MOVECOLLIDE_DEFAULT": 0,
                "MOVECOLLIDE_FLY_BOUNCE": 1,
                "MOVECOLLIDE_FLY_CUSTOM": 2,
                "MOVECOLLIDE_FLY_SLIDE": 3,
                "MOVECOLLIDE_COUNT": 4
            }
        },
        {
            "namespace": null,
            "name": "EMoveType",
            "value": {
                "MOVETYPE_NONE": 0,
                "MOVETYPE_ISOMETRIC": 1,
                "MOVETYPE_WALK": 2,
                "MOVETYPE_STEP": 3,
                "MOVETYPE_FLY": 4,
                "MOVETYPE_FLYGRAVITY": 5,
                "MOVETYPE_VPHYSICS": 6,
                "MOVETYPE_PUSH": 7,
                "MOVETYPE_NOCLIP": 8,
                "MOVETYPE_LADDER": 9,
                "MOVETYPE_OBSERVER": 10,
                "MOVETYPE_CUSTOM": 11
            }
        },
        {
            "namespace": null,
            "name": "EFireBulletsFlags",
            "value": {
                "FIRE_BULLETS_FIRST_SHOT_ACCURATE": 1,
                "FIRE_BULLETS_DONT_HIT_UNDERWATER": 2,
                "FIRE_BULLETS_ALLOW_WATER_SURFACE_IMPACTS": 4,
                "FIRE_BULLETS_TEMPORARY_DANGER_SOUND": 8,
                "FIRE_BULLETS_NO_PIERCING_SPARK": 22,
                "FIRE_BULLETS_HULL": 50,
                "FIRE_BULLETS_ANGULAR_SPREAD": 100
            }
        },
        {
            "namespace": null,
            "name": "EFieldType",
            "value": {
                "FIELD_VOID": 0,
                "FIELD_FLOAT": 1,
                "FIELD_DOUBLE": 2,
                "FIELD_STRING": 3,
                "FIELD_VECTOR": 4,
                "FIELD_VECTOR2D": 5,
                "FIELD_VECTOR4D": 6,
                "FIELD_QUATERNION": 7,
                "FIELD_INTEGER": 8,
                "FIELD_INTEGER64": 9,
                "FIELD_BOOLEAN": 10,
                "FIELD_SHORT": 11,
                "FIELD_CHARACTER": 12,
                "FIELD_COLOR32": 13,
                "FIELD_EMBEDDED": 14,
                "FIELD_CUSTOM": 15,
                "FIELD_CLASSPTR": 16,
                "FIELD_EHANDLE": 17,
                "FIELD_EDICT": 18,
                "FIELD_POSITION_VECTOR": 19,
                "FIELD_TIME": 20,
                "FIELD_TICK": 21,
                "FIELD_MODELNAME": 22,
                "FIELD_SOUNDNAME": 23,
                "FIELD_INPUT": 24,
                "FIELD_FUNCTION": 25,
                "FIELD_VMATRIX": 26,
                "FIELD_VMATRIX_WORLDSPACE": 27,
                "FIELD_MATRIX3X4_WORLDSPACE": 28,
                "FIELD_INTERVAL": 29,
                "FIELD_MODELINDEX": 30,
                "FIELD_MATERIALINDEX": 31,
                "FIELD_TYPECOUNT": 32
            }
        }
    ],
    "function": [
        {
            "namespace": null,
            "name": "fpFromIEEE",
            "declaration": "float fpFromIEEE(uint)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "fpToIEEE",
            "declaration": "uint fpToIEEE(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "fpFromIEEE",
            "declaration": "double fpFromIEEE(uint64)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "fpToIEEE",
            "declaration": "uint64 fpToIEEE(double)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "closeTo",
            "declaration": "bool closeTo(float, float, float = 0.00001f)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "closeTo",
            "declaration": "bool closeTo(double, double, double = 0.0000000001)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "cos",
            "declaration": "float cos(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "sin",
            "declaration": "float sin(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "tan",
            "declaration": "float tan(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "acos",
            "declaration": "float acos(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "asin",
            "declaration": "float asin(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "atan",
            "declaration": "float atan(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "atan2",
            "declaration": "float atan2(float, float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "cosh",
            "declaration": "float cosh(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "sinh",
            "declaration": "float sinh(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "tanh",
            "declaration": "float tanh(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "log",
            "declaration": "float log(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "log10",
            "declaration": "float log10(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "pow",
            "declaration": "float pow(float, float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "sqrt",
            "declaration": "float sqrt(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ceil",
            "declaration": "float ceil(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "abs",
            "declaration": "float abs(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "floor",
            "declaration": "float floor(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "fraction",
            "declaration": "float fraction(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "round",
            "declaration": "float round(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "join",
            "declaration": "string join(const string[]&in, const string&in)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "throw",
            "declaration": "void throw(const string&in)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "getExceptionInfo",
            "declaration": "string getExceptionInfo()",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "BitsToFloat",
            "declaration": "float BitsToFloat(uint i)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "IsFinite",
            "declaration": "bool IsFinite(const float&in f)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "fabs",
            "declaration": "double fabs(double)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "fabsf",
            "declaration": "float fabsf(float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FloatMakePositive",
            "declaration": "float FloatMakePositive(float f)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FloatNegate",
            "declaration": "float FloatNegate(float f)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FloatMakeNegative",
            "declaration": "float FloatMakeNegative(float f)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RandomFloat",
            "declaration": "float RandomFloat(float flMinVal, float flMaxVal = 1.0)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RandomFloatExp",
            "declaration": "float RandomFloatExp(float flMinVal, float flMaxVal = 1.0, float flExponent = 1.0)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RandomInt",
            "declaration": "int RandomInt(int iMinVal, int iMaxVal)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RandomGaussianFloat",
            "declaration": "float RandomGaussianFloat(float flMean, float flStdDev = 1.0)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FastCos",
            "declaration": "float FastCos(float x)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FastRecip",
            "declaration": "float FastRecip(float x)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FastSqrtEst",
            "declaration": "float FastSqrtEst(float x)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FastClampInfinity",
            "declaration": "float FastClampInfinity(float x)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector2DCopy",
            "declaration": "void Vector2DCopy(const Vector2D&in src, Vector2D&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector2DAdd",
            "declaration": "void Vector2DAdd(const Vector2D&in a, const Vector2D&in b, Vector2D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector2DSubtract",
            "declaration": "void Vector2DSubtract(const Vector2D&in a, const Vector2D&in b, Vector2D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector2DMultiply",
            "declaration": "void Vector2DMultiply(const Vector2D&in a, float b, Vector2D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector2DMultiply",
            "declaration": "void Vector2DMultiply(const Vector2D&in a, const Vector2D&in b, Vector2D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector2DDivide",
            "declaration": "void Vector2DDivide(const Vector2D&in a, float b, Vector2D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector2DDivide",
            "declaration": "void Vector2DDivide(const Vector2D&in a, const Vector2D&in b, Vector2D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector2DMA",
            "declaration": "void Vector2DMA(const Vector2D&in start, float s, const Vector2D&in dir, Vector2D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector2DMin",
            "declaration": "void Vector2DMin(const Vector2D&in a, const Vector2D&in b, Vector2D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector2DMax",
            "declaration": "void Vector2DMax(const Vector2D&in a, const Vector2D&in b, Vector2D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector2DNormalize",
            "declaration": "float Vector2DNormalize(Vector2D&out v)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector2DLength",
            "declaration": "float Vector2DLength(const Vector2D&in v)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "DotProduct2D",
            "declaration": "float DotProduct2D(const Vector2D&in a, const Vector2D&in b)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CrossProduct2D",
            "declaration": "float CrossProduct2D(const Vector2D&in a, const Vector2D&in b)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector2DLerp",
            "declaration": "void Vector2DLerp(const Vector2D&in src1, const Vector2D&in src2, float t, Vector2D&out dest)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector2DRotate",
            "declaration": "void Vector2DRotate(const Vector2D&in vIn, float flDegrees, Vector2D&out vOut)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector2DAngle",
            "declaration": "float Vector2DAngle(const Vector2D&in a, const Vector2D&in b)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorCopy",
            "declaration": "void VectorCopy(const Vector&in src, Vector&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorAdd",
            "declaration": "void VectorAdd(const Vector&in a, const Vector&in b, Vector&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorSubtract",
            "declaration": "void VectorSubtract(const Vector&in a, const Vector&in b, Vector&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorMultiply",
            "declaration": "void VectorMultiply(const Vector&in a, float b, Vector&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorMultiply",
            "declaration": "void VectorMultiply(const Vector&in a, const Vector&in b, Vector&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorDivide",
            "declaration": "void VectorDivide(const Vector&in a, float b, Vector&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorDivide",
            "declaration": "void VectorDivide(const Vector&in a, const Vector&in b, Vector&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorScale",
            "declaration": "void VectorScale(const Vector&in In, float scale, Vector&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorMA",
            "declaration": "void VectorMA(const Vector&in start, float scale, const Vector&in direction, Vector&out dest)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorsAreEqual",
            "declaration": "bool VectorsAreEqual(const Vector&in src1, const Vector&in src2, float tolerance)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorLength",
            "declaration": "float VectorLength(const Vector&in v)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "DotProduct",
            "declaration": "float DotProduct(const Vector&in a, const Vector&in b)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CrossProduct",
            "declaration": "void CrossProduct(const Vector&in a, const Vector&in b, Vector&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorMin",
            "declaration": "void VectorMin(const Vector&in a, const Vector&in b, Vector&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorMax",
            "declaration": "void VectorMax(const Vector&in a, const Vector&in b, Vector&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorLerp",
            "declaration": "void VectorLerp(const Vector&in src1, const Vector&in src2, float t, Vector&out dest)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorLerp",
            "declaration": "Vector VectorLerp(const Vector&in src1, const Vector&in src2, float t)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ReplicateToVector",
            "declaration": "Vector ReplicateToVector(float x)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "PointWithinViewAngle",
            "declaration": "bool PointWithinViewAngle(const Vector&in vecSrcPosition, const Vector&in vecTargetPosition, const Vector&in vecLookDirection, float flCosHalfFOV)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CrossProduct",
            "declaration": "Vector CrossProduct(const Vector&in a, const Vector&in b)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RandomVectorInUnitSphere",
            "declaration": "Vector RandomVectorInUnitSphere()",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RandomVectorOnUnitSphere",
            "declaration": "Vector RandomVectorOnUnitSphere()",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorMAInline",
            "declaration": "void VectorMAInline(const Vector&in start, float scale, const Vector&in direction, Vector&out dest)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AllocTempVector",
            "declaration": "Vector& AllocTempVector()",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "DotProductAbs",
            "declaration": "float DotProductAbs(const Vector&in v0, const Vector&in v1)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FloatsAreEqual",
            "declaration": "bool FloatsAreEqual(float f1, float f2, float flTolerance)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorsAreWithinPercentageTolerance",
            "declaration": "bool VectorsAreWithinPercentageTolerance(const Vector&in src1, const Vector&in src2, float flPercentageTolerance)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorAbs",
            "declaration": "void VectorAbs(const Vector&in src, Vector&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorAbs",
            "declaration": "Vector VectorAbs(const Vector&in src)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorMin",
            "declaration": "Vector VectorMin(const Vector&in a, const Vector&in b)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorMax",
            "declaration": "Vector VectorMax(const Vector&in a, const Vector&in b)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ComputeVolume",
            "declaration": "float ComputeVolume(const Vector&in vecMins, const Vector&in vecMaxs)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RandomVector",
            "declaration": "Vector RandomVector(float minVal, float maxVal)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorPerpendicularToVector",
            "declaration": "Vector VectorPerpendicularToVector(const Vector&in In)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RandomQuaternion",
            "declaration": "Quaternion RandomQuaternion()",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Conjugate",
            "declaration": "Quaternion Conjugate(const Quaternion&in q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionsAreEqual",
            "declaration": "bool QuaternionsAreEqual(const Quaternion&in src1, const Quaternion&in src2, float tolerance)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionLength",
            "declaration": "float QuaternionLength(const Quaternion&in q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionIsNormalized",
            "declaration": "bool QuaternionIsNormalized(const Quaternion&in q, float flTolerance = 9.999999974752427e-07)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorAdd",
            "declaration": "void VectorAdd(const QAngle&in a, const QAngle&in b, QAngle&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorMA",
            "declaration": "void VectorMA(const QAngle&in start, float scale, const QAngle&in direction, QAngle&out dest)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AngleNormalize",
            "declaration": "float AngleNormalize(float angle)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AngleNormalizePositive",
            "declaration": "float AngleNormalizePositive(float angle)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RandomAngle",
            "declaration": "QAngle RandomAngle(float minVal, float maxVal)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorCopy",
            "declaration": "void VectorCopy(const QAngle&in src, QAngle&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QAnglesAreEqual",
            "declaration": "bool QAnglesAreEqual(const QAngle&in src1, const QAngle&in src2, float tolerance)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "InvRSquared",
            "declaration": "float InvRSquared(const Vector&in v)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorNormalize",
            "declaration": "float VectorNormalize(Vector&out v)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorNormalizeFast",
            "declaration": "void VectorNormalizeFast(Vector&out vec)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ScaleVector",
            "declaration": "Vector ScaleVector(const Vector&in a, const Vector&in b)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Exp",
            "declaration": "Quaternion Exp(const Vector&in v)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionLog",
            "declaration": "Vector QuaternionLog(const Quaternion&in q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Snap",
            "declaration": "float Snap(float a, float flSnap)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Snap",
            "declaration": "Vector Snap(const Vector&in a, float flSnap)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CalcFovY",
            "declaration": "float CalcFovY(float flFovX, float flScreenAspect)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CalcFovX",
            "declaration": "float CalcFovX(float flFovY, float flScreenAspect)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorMaximum",
            "declaration": "float VectorMaximum(const Vector&in v)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CrossProductX",
            "declaration": "float CrossProductX(const Vector&in v1, const Vector&in v2)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CrossProductY",
            "declaration": "float CrossProductY(const Vector&in v1, const Vector&in v2)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CrossProductZ",
            "declaration": "float CrossProductZ(const Vector&in v1, const Vector&in v2)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RoundInt",
            "declaration": "float RoundInt(float In)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Q_log2",
            "declaration": "int Q_log2(uint val)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "TableCos",
            "declaration": "float TableCos(float theta)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "TableSin",
            "declaration": "float TableSin(float theta)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "IsPowerOfTwo",
            "declaration": "bool IsPowerOfTwo(uint x)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SmallestPowerOfTwoGreaterOrEqual",
            "declaration": "uint SmallestPowerOfTwoGreaterOrEqual(uint x)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "LargestPowerOfTwoLessThanOrEqual",
            "declaration": "uint LargestPowerOfTwoLessThanOrEqual(uint x)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "GreatestCommonDivisor",
            "declaration": "int GreatestCommonDivisor(int i1, int i2)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "IsDenormal",
            "declaration": "bool IsDenormal(const float&in val)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorRotate",
            "declaration": "void VectorRotate(const Vector&in in1, const QAngle&in in2, Vector&out Out)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorRotate",
            "declaration": "void VectorRotate(const Vector&in in1, const Quaternion&in in2, Vector&out Out)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorRotate",
            "declaration": "Vector VectorRotate(const Vector&in vIn1, const Quaternion&in qIn2)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "TransformAnglesToLocalSpace",
            "declaration": "QAngle TransformAnglesToLocalSpace(const QAngle&in angles, const matrix3x4_t&in parentMatrix)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "TransformAnglesToWorldSpace",
            "declaration": "QAngle TransformAnglesToWorldSpace(const QAngle&in angles, const matrix3x4_t&in parentMatrix)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixInitialize",
            "declaration": "void MatrixInitialize(matrix3x4_t&out mat, const Vector&in vecOrigin, const Vector&in vecXAxis, const Vector&in vecYAxis, const Vector&in vecZAxis)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixCopy",
            "declaration": "void MatrixCopy(const matrix3x4_t&in In, matrix3x4_t&out Out)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixInvert",
            "declaration": "void MatrixInvert(const matrix3x4_t&in In, matrix3x4_t&out Out)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatricesAreEqual",
            "declaration": "bool MatricesAreEqual(const matrix3x4_t&in src1, const matrix3x4_t&in src2, float flTolerance = 9.999999747378752e-06)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixGetColumn",
            "declaration": "void MatrixGetColumn(const matrix3x4_t&in In, int column, Vector&out Out)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixSetColumn",
            "declaration": "void MatrixSetColumn(const Vector&in In, int column, matrix3x4_t&out Out)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ConcatRotations",
            "declaration": "void ConcatRotations(const matrix3x4_t&in in1, const matrix3x4_t&in in2, matrix3x4_t&out Out)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ConcatTransforms",
            "declaration": "void ConcatTransforms(const matrix3x4_t&in in1, const matrix3x4_t&in in2, matrix3x4_t&out Out)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixMultiply",
            "declaration": "void MatrixMultiply(const matrix3x4_t&in in1, const matrix3x4_t&in in2, matrix3x4_t&out Out)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionExp",
            "declaration": "void QuaternionExp(const Quaternion&in p, Quaternion&out q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionLn",
            "declaration": "void QuaternionLn(const Quaternion&in p, Quaternion&out q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionLookAt",
            "declaration": "void QuaternionLookAt(const Vector&in vecForward, const Vector&in referenceUp, Quaternion&out q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionSlerp",
            "declaration": "void QuaternionSlerp(const Quaternion&in p, const Quaternion&in q, float t, Quaternion&out qt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionSlerpNoAlign",
            "declaration": "void QuaternionSlerpNoAlign(const Quaternion&in p, const Quaternion&in q, float t, Quaternion&out qt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionBlend",
            "declaration": "void QuaternionBlend(const Quaternion&in p, const Quaternion&in q, float t, Quaternion&out qt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionBlendNoAlign",
            "declaration": "void QuaternionBlendNoAlign(const Quaternion&in p, const Quaternion&in q, float t, Quaternion&out qt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionIdentityBlend",
            "declaration": "void QuaternionIdentityBlend(const Quaternion&in p, float t, Quaternion&out qt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionAngleDiff",
            "declaration": "float QuaternionAngleDiff(const Quaternion&in p, const Quaternion&in q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionScale",
            "declaration": "void QuaternionScale(const Quaternion&in p, float t, Quaternion&out q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionAlign",
            "declaration": "void QuaternionAlign(const Quaternion&in p, const Quaternion&in q, Quaternion&out qt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionDotProduct",
            "declaration": "float QuaternionDotProduct(const Quaternion&in p, const Quaternion&in q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionConjugate",
            "declaration": "void QuaternionConjugate(const Quaternion&in p, Quaternion&out q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionInvert",
            "declaration": "void QuaternionInvert(const Quaternion&in p, Quaternion&out q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionNormalize",
            "declaration": "float QuaternionNormalize(Quaternion&out q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionMultiply",
            "declaration": "void QuaternionMultiply(const Quaternion&in q, const Vector&in v, Vector&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionAdd",
            "declaration": "void QuaternionAdd(const Quaternion&in p, const Quaternion&in q, Quaternion&out qt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionMult",
            "declaration": "void QuaternionMult(const Quaternion&in p, const Quaternion&in q, Quaternion&out qt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionMatrix",
            "declaration": "void QuaternionMatrix(const Quaternion&in q, matrix3x4_t&out matrix)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionMatrix",
            "declaration": "void QuaternionMatrix(const Quaternion&in q, const Vector&in pos, matrix3x4_t&out matrix)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionMatrix",
            "declaration": "void QuaternionMatrix(const Quaternion&in q, const Vector&in pos, const Vector&in vScale, matrix3x4_t&out mat)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionAngles",
            "declaration": "void QuaternionAngles(const Quaternion&in q, QAngle&out angles)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AngleQuaternion",
            "declaration": "void AngleQuaternion(const QAngle&in angles, Quaternion&out qt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionAxisAngle",
            "declaration": "void QuaternionAxisAngle(const Quaternion&in q, Vector&out axis, float&out angle)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AxisAngleQuaternion",
            "declaration": "void AxisAngleQuaternion(const Vector&in axis, float angle, Quaternion&out q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "BasisToQuaternion",
            "declaration": "void BasisToQuaternion(const Vector&in vecForward, const Vector&in vecRight, const Vector&in vecUp, Quaternion&out q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixQuaternion",
            "declaration": "void MatrixQuaternion(const matrix3x4_t&in mat, Quaternion&out q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixQuaternionFast",
            "declaration": "void MatrixQuaternionFast(const matrix3x4_t&in mat, Quaternion&out q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixPosition",
            "declaration": "void MatrixPosition(const matrix3x4_t&in matrix, Vector&out position)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixNormalize",
            "declaration": "Vector MatrixNormalize(const matrix3x4_t&in In, matrix3x4_t&out Out)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixQuaternion",
            "declaration": "void MatrixQuaternion(const matrix3x4_t&in mat, Quaternion&out q, Vector&out o)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixQuaternionTest",
            "declaration": "float MatrixQuaternionTest(uint)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixQuaternionTest2",
            "declaration": "float MatrixQuaternionTest2(uint)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionAccumulate",
            "declaration": "void QuaternionAccumulate(const Quaternion&in p, float s, const Quaternion&in q, Quaternion&out qt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionSM",
            "declaration": "void QuaternionSM(float s, const Quaternion&in p, const Quaternion&in q, Quaternion&out qt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionMA",
            "declaration": "void QuaternionMA(const Quaternion&in p, float s, const Quaternion&in q, Quaternion&out qt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "GetNormalized",
            "declaration": "Quaternion GetNormalized(const Quaternion&in q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AngleQuaternion",
            "declaration": "Quaternion AngleQuaternion(const QAngle&in angles)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionFromPitchYawRoll",
            "declaration": "Quaternion QuaternionFromPitchYawRoll(float flPitch, float flYaw, float flRoll)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionAddPitch",
            "declaration": "Quaternion QuaternionAddPitch(const Quaternion&in q, float flPitch)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionAddYaw",
            "declaration": "Quaternion QuaternionAddYaw(const Quaternion&in q, float flYaw)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionAddRoll",
            "declaration": "Quaternion QuaternionAddRoll(const Quaternion&in q, float flRoll)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixQuaternion",
            "declaration": "Quaternion MatrixQuaternion(const matrix3x4_t&in mat)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixQuaternionFast",
            "declaration": "Quaternion MatrixQuaternionFast(const matrix3x4_t&in mat)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionMatrix",
            "declaration": "matrix3x4_t QuaternionMatrix(const Quaternion&in q)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionMatrix",
            "declaration": "matrix3x4_t QuaternionMatrix(const Quaternion&in q, const Vector&in pos)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RotateBetween",
            "declaration": "Quaternion RotateBetween(const Vector&in v1, const Vector&in v2)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionConjugate",
            "declaration": "Quaternion QuaternionConjugate(const Quaternion&in p)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuaternionInvert",
            "declaration": "Quaternion QuaternionInvert(const Quaternion&in p)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ConcatTransforms",
            "declaration": "matrix3x4_t ConcatTransforms(const matrix3x4_t&in in1, const matrix3x4_t&in in2)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixInvert",
            "declaration": "matrix3x4_t MatrixInvert(const matrix3x4_t&in In)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixRowDotProduct",
            "declaration": "float MatrixRowDotProduct(const matrix3x4_t&in in1, int row, const Vector&in in2)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixColumnDotProduct",
            "declaration": "float MatrixColumnDotProduct(const matrix3x4_t&in in1, int col, const Vector&in in2)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "anglemod",
            "declaration": "float anglemod(float a)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RemapVal",
            "declaration": "float RemapVal(float val, float A, float B, float C, float D)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RemapValClamped",
            "declaration": "float RemapValClamped(float val, float A, float B, float C, float D)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Sqr",
            "declaration": "float Sqr(float f)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FLerp",
            "declaration": "float FLerp(float f1, float f2, float i1, float i2, float x)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Sign",
            "declaration": "float Sign(float x)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ClampArrayBounds",
            "declaration": "int ClampArrayBounds(int n, uint maxindex)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "InsideOut",
            "declaration": "int InsideOut(int nTotal, int nCounter)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AngleMatrix",
            "declaration": "void AngleMatrix(const QAngle&in angles, matrix3x4_t&out mat)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AngleMatrix",
            "declaration": "void AngleMatrix(const QAngle&in angles, const Vector&in position, matrix3x4_t&out mat)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AngleIMatrix",
            "declaration": "void AngleIMatrix(const QAngle&in angles, matrix3x4_t&out mat)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AngleIMatrix",
            "declaration": "void AngleIMatrix(const QAngle&in angles, const Vector&in position, matrix3x4_t&out mat)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorAngles",
            "declaration": "void VectorAngles(const Vector&in forward, QAngle&out angles)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorAngles",
            "declaration": "void VectorAngles(const Vector&in forward, const Vector&in pseudoup, QAngle&out angles)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorMatrix",
            "declaration": "void VectorMatrix(const Vector&in forward, matrix3x4_t&out mat)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorVectors",
            "declaration": "void VectorVectors(const Vector&in forward, Vector&out right, Vector&out up)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SetIdentityMatrix",
            "declaration": "void SetIdentityMatrix(matrix3x4_t&out mat)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SetScaleMatrix",
            "declaration": "void SetScaleMatrix(float x, float y, float z, matrix3x4_t&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixBuildRotationAboutAxis",
            "declaration": "void MatrixBuildRotationAboutAxis(const Vector&in vAxisOfRot, float angleDegrees, matrix3x4_t&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixIsIdentity",
            "declaration": "bool MatrixIsIdentity(const matrix3x4_t&in m)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SetScaleMatrix",
            "declaration": "void SetScaleMatrix(float flScale, matrix3x4_t&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SetScaleMatrix",
            "declaration": "void SetScaleMatrix(const Vector&in scale, matrix3x4_t&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixTranspose",
            "declaration": "void MatrixTranspose(matrix3x4_t&out mat)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixTranspose",
            "declaration": "void MatrixTranspose(const matrix3x4_t&in src, matrix3x4_t&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixInverseTranspose",
            "declaration": "void MatrixInverseTranspose(const matrix3x4_t&in src, matrix3x4_t&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "PositionMatrix",
            "declaration": "void PositionMatrix(const Vector&in position, matrix3x4_t&out mat)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorRotate",
            "declaration": "void VectorRotate(const Vector&in in1, const matrix3x4_t&in in2, Vector&out Out)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorIRotate",
            "declaration": "void VectorIRotate(const Vector&in in1, const matrix3x4_t&in in2, Vector&out Out)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixAngles",
            "declaration": "void MatrixAngles(const matrix3x4_t&in matrix, QAngle&out angles)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixAngles",
            "declaration": "void MatrixAngles(const matrix3x4_t&in matrix, QAngle&out angles, Vector&out position)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixAngles",
            "declaration": "void MatrixAngles(const matrix3x4_t&in mat, Quaternion&out q, Vector&out position)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorCompare",
            "declaration": "int VectorCompare(const Vector&in v1, const Vector&in v2)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorTransform",
            "declaration": "void VectorTransform(const Vector&in in1, const matrix3x4_t&in in2, Vector&out Out)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorTransform",
            "declaration": "Vector VectorTransform(const Vector&in in1, const matrix3x4_t&in in2)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorRotate",
            "declaration": "Vector VectorRotate(const Vector&in in1, const matrix3x4_t&in in2)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorITransform",
            "declaration": "void VectorITransform(const Vector&in in1, const matrix3x4_t&in in2, Vector&out Out)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorITransform",
            "declaration": "Vector VectorITransform(const Vector&in in1, const matrix3x4_t&in in2)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorFill",
            "declaration": "void VectorFill(Vector&out a, float b)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorNegate",
            "declaration": "void VectorNegate(Vector&out a)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorAvg",
            "declaration": "float VectorAvg(Vector&out a)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ClearBounds",
            "declaration": "void ClearBounds(Vector&out mins, Vector&out maxs)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AddPointToBounds",
            "declaration": "void AddPointToBounds(const Vector&in v, Vector&out mins, Vector&out maxs)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AreBoundsValid",
            "declaration": "bool AreBoundsValid(const Vector&in vMin, const Vector&in vMax)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "IsPointInBounds",
            "declaration": "bool IsPointInBounds(const Vector&in vPoint, const Vector&in vMin, const Vector&in vMax)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "BuildGammaTable",
            "declaration": "void BuildGammaTable(float gamma, float texGamma, float brightness, int overbright)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "TexLightToLinear",
            "declaration": "float TexLightToLinear(int c, int exponent)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "LinearToTexture",
            "declaration": "int LinearToTexture(float f)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "LinearToScreenGamma",
            "declaration": "int LinearToScreenGamma(float f)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "TextureToLinear",
            "declaration": "float TextureToLinear(int c)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SolveQuadratic",
            "declaration": "bool SolveQuadratic(float a, float b, float c, float&out root1, float&out root2)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SolveInverseQuadratic",
            "declaration": "bool SolveInverseQuadratic(float x1, float y1, float x2, float y2, float x3, float y3, float&out a, float&out b, float&out c)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SolveInverseQuadraticMonotonic",
            "declaration": "bool SolveInverseQuadraticMonotonic(float x1, float y1, float x2, float y2, float x3, float y3, float&out a, float&out b, float&out c)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SolveInverseReciprocalQuadratic",
            "declaration": "bool SolveInverseReciprocalQuadratic(float x1, float y1, float x2, float y2, float x3, float y3, float&out a, float&out b, float&out c)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "VectorYawRotate",
            "declaration": "void VectorYawRotate(const Vector&in In, float flYaw, Vector&out Out)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Bias",
            "declaration": "float Bias(float x, float biasAmt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Gain",
            "declaration": "float Gain(float x, float biasAmt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SmoothCurve",
            "declaration": "float SmoothCurve(float x)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SmoothCurve_Tweak",
            "declaration": "float SmoothCurve_Tweak(float x, float flPeakPos = 0.5, float flPeakSharpness = 0.5)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ExponentialDecay",
            "declaration": "float ExponentialDecay(float halflife, float dt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ExponentialDecay",
            "declaration": "float ExponentialDecay(float decayTo, float decayTime, float dt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ExponentialDecayIntegral",
            "declaration": "float ExponentialDecayIntegral(float decayTo, float decayTime, float dt)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SimpleSpline",
            "declaration": "float SimpleSpline(float value)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SimpleSplineRemapVal",
            "declaration": "float SimpleSplineRemapVal(float val, float A, float B, float C, float D)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SimpleSplineRemapValClamped",
            "declaration": "float SimpleSplineRemapValClamped(float val, float A, float B, float C, float D)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RoundFloatToInt",
            "declaration": "int RoundFloatToInt(float f)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RoundFloatToByte",
            "declaration": "uint8 RoundFloatToByte(float f)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RoundFloatToUnsignedLong",
            "declaration": "uint RoundFloatToUnsignedLong(float f)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "IsIntegralValue",
            "declaration": "bool IsIntegralValue(float flValue, float flTolerance = 0.0010000000474974513)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Float2Int",
            "declaration": "int Float2Int(float a)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Floor2Int",
            "declaration": "int Floor2Int(float a)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FastFToC",
            "declaration": "uint FastFToC(float c)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FastFloatToSmallInt",
            "declaration": "int FastFloatToSmallInt(float c)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ClampToMsec",
            "declaration": "float ClampToMsec(float In)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Ceil2Int",
            "declaration": "int Ceil2Int(float a)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuickBoxSphereTest",
            "declaration": "bool QuickBoxSphereTest(const Vector&in vOrigin, float flRadius, const Vector&in bbMin, const Vector&in bbMax)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuickBoxIntersectTest",
            "declaration": "bool QuickBoxIntersectTest(const Vector&in vBox1Min, const Vector&in vBox1Max, const Vector&in vBox2Min, const Vector&in vBox2Max)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "GammaToLinearFullRange",
            "declaration": "float GammaToLinearFullRange(float gamma)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "LinearToGammaFullRange",
            "declaration": "float LinearToGammaFullRange(float linear)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "GammaToLinear",
            "declaration": "float GammaToLinear(float gamma)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "LinearToGamma",
            "declaration": "float LinearToGamma(float linear)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SrgbGammaToLinear",
            "declaration": "float SrgbGammaToLinear(float flSrgbGammaValue)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SrgbLinearToGamma",
            "declaration": "float SrgbLinearToGamma(float flLinearValue)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "LinearToVertexLight",
            "declaration": "float LinearToVertexLight(float f)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "LinearToLightmap",
            "declaration": "uint8 LinearToLightmap(float f)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ColorClamp",
            "declaration": "void ColorClamp(Vector&out color)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ColorClampTruncate",
            "declaration": "void ColorClampTruncate(Vector&out color)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Catmull_Rom_Spline",
            "declaration": "void Catmull_Rom_Spline(const Vector&in p1, const Vector&in p2, const Vector&in p3, const Vector&in p4, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Catmull_Rom_Spline_Tangent",
            "declaration": "void Catmull_Rom_Spline_Tangent(const Vector&in p1, const Vector&in p2, const Vector&in p3, const Vector&in p4, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Catmull_Rom_Spline_Integral",
            "declaration": "void Catmull_Rom_Spline_Integral(const Vector&in p1, const Vector&in p2, const Vector&in p3, const Vector&in p4, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Catmull_Rom_Spline_Integral",
            "declaration": "void Catmull_Rom_Spline_Integral(const Vector&in p1, const Vector&in p2, const Vector&in p3, const Vector&in p4, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Catmull_Rom_Spline_Normalize",
            "declaration": "void Catmull_Rom_Spline_Normalize(const Vector&in p1, const Vector&in p2, const Vector&in p3, const Vector&in p4, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Catmull_Rom_Spline_Integral_Normalize",
            "declaration": "void Catmull_Rom_Spline_Integral_Normalize(const Vector&in p1, const Vector&in p2, const Vector&in p3, const Vector&in p4, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Catmull_Rom_Spline_NormalizeX",
            "declaration": "void Catmull_Rom_Spline_NormalizeX(const Vector&in p1, const Vector&in p2, const Vector&in p3, const Vector&in p4, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Hermite_Spline",
            "declaration": "void Hermite_Spline(const Vector&in p1, const Vector&in p2, const Vector&in d1, const Vector&in d2, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Hermite_Spline",
            "declaration": "float Hermite_Spline(float p1, float p2, float d1, float d2, float t)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Hermite_Spline",
            "declaration": "void Hermite_Spline(const Vector&in p0, const Vector&in p1, const Vector&in p2, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Hermite_Spline",
            "declaration": "float Hermite_Spline(float p0, float p1, float p2, float t)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Hermite_Spline",
            "declaration": "void Hermite_Spline(const Quaternion&in q0, const Quaternion&in q1, const Quaternion&in q2, float t, Quaternion&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Kochanek_Bartels_Spline",
            "declaration": "void Kochanek_Bartels_Spline(float tension, float bias, float continuity, const Vector&in p1, const Vector&in p2, const Vector&in p3, const Vector&in p4, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Kochanek_Bartels_Spline_NormalizeX",
            "declaration": "void Kochanek_Bartels_Spline_NormalizeX(float tension, float bias, float continuity, const Vector&in p1, const Vector&in p2, const Vector&in p3, const Vector&in p4, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Cubic_Spline",
            "declaration": "void Cubic_Spline(const Vector&in p1, const Vector&in p2, const Vector&in p3, const Vector&in p4, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Cubic_Spline_NormalizeX",
            "declaration": "void Cubic_Spline_NormalizeX(const Vector&in p1, const Vector&in p2, const Vector&in p3, const Vector&in p4, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "BSpline",
            "declaration": "void BSpline(const Vector&in p1, const Vector&in p2, const Vector&in p3, const Vector&in p4, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "BSpline_NormalizeX",
            "declaration": "void BSpline_NormalizeX(const Vector&in p1, const Vector&in p2, const Vector&in p3, const Vector&in p4, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Parabolic_Spline",
            "declaration": "void Parabolic_Spline(const Vector&in p1, const Vector&in p2, const Vector&in p3, const Vector&in p4, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Parabolic_Spline_NormalizeX",
            "declaration": "void Parabolic_Spline_NormalizeX(const Vector&in p1, const Vector&in p2, const Vector&in p3, const Vector&in p4, float t, Vector&out output)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CubicBasis0",
            "declaration": "float CubicBasis0(float t)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CubicBasis1",
            "declaration": "float CubicBasis1(float t)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CubicBasis2",
            "declaration": "float CubicBasis2(float t)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CubicBasis3",
            "declaration": "float CubicBasis3(float t)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "QuinticInterpolatingPolynomial",
            "declaration": "float QuinticInterpolatingPolynomial(float t)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RangeCompressor",
            "declaration": "float RangeCompressor(float flValue, float flMin, float flMax, float flBase)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CalcSqrDistanceToAABB",
            "declaration": "float CalcSqrDistanceToAABB(const Vector&in mins, const Vector&in maxs, const Vector&in point)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CalcClosestPointOnAABB",
            "declaration": "void CalcClosestPointOnAABB(const Vector&in mins, const Vector&in maxs, const Vector&in point, Vector&out closestOut)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CalcSqrDistAndClosestPointOnAABB",
            "declaration": "void CalcSqrDistAndClosestPointOnAABB(const Vector&in mins, const Vector&in maxs, const Vector&in point, Vector&out closestOut, float&out distSqrOut)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CalcDistanceToAABB",
            "declaration": "float CalcDistanceToAABB(const Vector&in mins, const Vector&in maxs, const Vector&in point)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Approach",
            "declaration": "float Approach(float target, float value, float speed)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ApproachAngle",
            "declaration": "float ApproachAngle(float target, float value, float speed)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AngleDiff",
            "declaration": "float AngleDiff(float destAngle, float srcAngle)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AngleDistance",
            "declaration": "float AngleDistance(float next, float cur)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AnglesAreEqual",
            "declaration": "bool AnglesAreEqual(float a, float b, float tolerance)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RotationDeltaAxisAngle",
            "declaration": "void RotationDeltaAxisAngle(const QAngle&in srcAngles, const QAngle&in destAngles, Vector&out deltaAxis, float&out deltaAngle)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ComputeTrianglePlane",
            "declaration": "void ComputeTrianglePlane(const Vector&in v1, const Vector&in v2, const Vector&in v3, Vector&out normal, float&out intercept)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "TetrahedronVolume",
            "declaration": "float TetrahedronVolume(const Vector&in p0, const Vector&in p1, const Vector&in p2, const Vector&in p3)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "TriangleArea",
            "declaration": "float TriangleArea(const Vector&in p0, const Vector&in p1, const Vector&in p2)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "BoxSurfaceArea",
            "declaration": "float BoxSurfaceArea(const Vector&in vecBoxMin, const Vector&in vecBoxMax)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CalcTriangleTangentSpace",
            "declaration": "void CalcTriangleTangentSpace(const Vector&in p0, const Vector&in p1, const Vector&in p2, const Vector2D&in t0, const Vector2D&in t1, const Vector2D&in t2, Vector&out sVect, Vector&out tVect)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "TransformAABB",
            "declaration": "void TransformAABB(const matrix3x4_t&in in1, const Vector&in vecMinsIn, const Vector&in vecMaxsIn, Vector&out vecMinsOut, Vector&out vecMaxsOut)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "ITransformAABB",
            "declaration": "void ITransformAABB(const matrix3x4_t&in in1, const Vector&in vecMinsIn, const Vector&in vecMaxsIn, Vector&out vecMinsOut, Vector&out vecMaxsOut)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RotateAABB",
            "declaration": "void RotateAABB(const matrix3x4_t&in in1, const Vector&in vecMinsIn, const Vector&in vecMaxsIn, Vector&out vecMinsOut, Vector&out vecMaxsOut)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "IRotateAABB",
            "declaration": "void IRotateAABB(const matrix3x4_t&in in1, const Vector&in vecMinsIn, const Vector&in vecMaxsIn, Vector&out vecMinsOut, Vector&out vecMaxsOut)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CeilPow2",
            "declaration": "int CeilPow2(int In)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FloorPow2",
            "declaration": "int FloorPow2(int In)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RGB2YUV",
            "declaration": "void RGB2YUV(int&out nR, int&out nG, int&out nB, float&out fY, float&out fU, float&out fV, bool bApplySaturationCurve)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RGBtoHSV",
            "declaration": "void RGBtoHSV(const Vector&in rgb, Vector&out hsv)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "HSVtoRGB",
            "declaration": "void HSVtoRGB(const Vector&in hsv, Vector&out rgb)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FastLog2",
            "declaration": "float FastLog2(float i)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FastPow2",
            "declaration": "float FastPow2(float i)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FastPow",
            "declaration": "float FastPow(float a, float b)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FastPow10",
            "declaration": "float FastPow10(float i)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CloseEnough",
            "declaration": "bool CloseEnough(float a, float b, float epsilon = 0.0010000000474974513)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CloseEnough",
            "declaration": "bool CloseEnough(const Vector&in a, const Vector&in b, float epsilon = 0.0010000000474974513)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AlmostEqual",
            "declaration": "bool AlmostEqual(float a, float b, int maxUlps = 10)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "AlmostEqual",
            "declaration": "bool AlmostEqual(const Vector&in a, const Vector&in b, int maxUlps = 10)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Approach",
            "declaration": "Vector Approach(Vector target, Vector value, float speed)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "smoothstep_bounds",
            "declaration": "float smoothstep_bounds(float edge0, float edge1, float x)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "interpstep",
            "declaration": "float interpstep(float edge0, float edge1, float x)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SubtractIntegerPart",
            "declaration": "double SubtractIntegerPart(double flVal)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "GetRelativeDifferenceSqr",
            "declaration": "float GetRelativeDifferenceSqr(const Vector&in a, const Vector&in b)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "GetRelativeDifference",
            "declaration": "float GetRelativeDifference(const Vector&in a, const Vector&in b)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "GetRelativeDifference",
            "declaration": "float GetRelativeDifference(const matrix3x4_t&in a, const matrix3x4_t&in b)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector4DCopy",
            "declaration": "void Vector4DCopy(const Vector4D&in src, Vector4D&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector4DAdd",
            "declaration": "void Vector4DAdd(const Vector4D&in a, const Vector4D&in b, Vector4D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector4DSubtract",
            "declaration": "void Vector4DSubtract(const Vector4D&in a, const Vector4D&in b, Vector4D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector4DMultiply",
            "declaration": "void Vector4DMultiply(const Vector4D&in a, float b, Vector4D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector4DMultiply",
            "declaration": "void Vector4DMultiply(const Vector4D&in a, const Vector4D&in b, Vector4D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector4DDivide",
            "declaration": "void Vector4DDivide(const Vector4D&in a, float b, Vector4D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector4DDivide",
            "declaration": "void Vector4DDivide(const Vector4D&in a, const Vector4D&in b, Vector4D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector4DMA",
            "declaration": "void Vector4DMA(const Vector4D&in start, float s, const Vector4D&in dir, Vector4D&out result)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector4DNormalize",
            "declaration": "float Vector4DNormalize(Vector4D&out v)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector4DLength",
            "declaration": "float Vector4DLength(const Vector4D&in v)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "DotProduct4D",
            "declaration": "float DotProduct4D(const Vector4D&in a, const Vector4D&in b)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector4DLerp",
            "declaration": "void Vector4DLerp(const Vector4D&in src1, const Vector4D&in src2, float t, Vector4D&out dest)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SetupMatrixIdentity",
            "declaration": "VMatrix SetupMatrixIdentity()",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SetupMatrixScale",
            "declaration": "VMatrix SetupMatrixScale(const Vector&in vScale)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SetupMatrixTranslation",
            "declaration": "VMatrix SetupMatrixTranslation(const Vector&in vTranslation)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SetupMatrixReflection",
            "declaration": "VMatrix SetupMatrixReflection(const VPlane&in thePlane)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SetupMatrixProjection",
            "declaration": "VMatrix SetupMatrixProjection(const Vector&in vOrigin, const VPlane&in thePlane)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SetupMatrixAxisRot",
            "declaration": "VMatrix SetupMatrixAxisRot(const Vector&in vAxis, float fDegrees)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SetupMatrixAxisToAxisRot",
            "declaration": "VMatrix SetupMatrixAxisToAxisRot(const Vector&in vFromAxis, const Vector&in vToAxis)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SetupMatrixAngles",
            "declaration": "VMatrix SetupMatrixAngles(const QAngle&in vAngles)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "SetupMatrixOrgAngles",
            "declaration": "VMatrix SetupMatrixOrgAngles(const Vector&in origin, const QAngle&in vAngles)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "PlaneIntersection",
            "declaration": "bool PlaneIntersection(const VPlane&in vp1, const VPlane&in vp2, const VPlane&in vp3, Vector&out vOut)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixSetIdentity",
            "declaration": "void MatrixSetIdentity(VMatrix&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixTranspose",
            "declaration": "void MatrixTranspose(const VMatrix&in src, VMatrix&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixCopy",
            "declaration": "void MatrixCopy(const VMatrix&in src, VMatrix&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixMultiply",
            "declaration": "void MatrixMultiply(const VMatrix&in src1, const VMatrix&in src2, VMatrix&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixSetColumn",
            "declaration": "void MatrixSetColumn(VMatrix&out src, int nCol, const Vector&in column)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixSetRow",
            "declaration": "void MatrixSetRow(VMatrix&out src, int nCol, const Vector&in column)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector3DMultiply",
            "declaration": "void Vector3DMultiply(const VMatrix&in src1, const Vector&in src2, Vector&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector3DMultiplyPosition",
            "declaration": "void Vector3DMultiplyPosition(const VMatrix&in src1, const Vector src2, Vector&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector3DMultiplyPositionProjective",
            "declaration": "void Vector3DMultiplyPositionProjective(const VMatrix&in src1, const Vector&in src2, Vector&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector3DMultiplyProjective",
            "declaration": "void Vector3DMultiplyProjective(const VMatrix&in src1, const Vector&in src2, Vector&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector4DMultiply",
            "declaration": "void Vector4DMultiply(const VMatrix&in src1, const Vector4D&in src2, Vector4D&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector4DMultiplyPosition",
            "declaration": "void Vector4DMultiplyPosition(const VMatrix&in src1, const Vector&in src2, Vector4D&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector3DMultiplyTranspose",
            "declaration": "void Vector3DMultiplyTranspose(const VMatrix&in src1, const Vector&in src2, Vector&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Vector4DMultiplyTranspose",
            "declaration": "void Vector4DMultiplyTranspose(const VMatrix&in src1, const Vector4D&in src2, Vector4D&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixBuildTranslation",
            "declaration": "void MatrixBuildTranslation(VMatrix&out dst, float x, float y, float z)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixBuildTranslation",
            "declaration": "void MatrixBuildTranslation(VMatrix&out dst, const Vector&in translation)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixTranslate",
            "declaration": "void MatrixTranslate(VMatrix&out dst, const Vector&in translation)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixBuildRotationAboutAxis",
            "declaration": "void MatrixBuildRotationAboutAxis(VMatrix&out dst, const Vector&in vAxisOfRot, float angleDegrees)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixBuildRotateZ",
            "declaration": "void MatrixBuildRotateZ(VMatrix&out dst, float angleDegrees)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixRotate",
            "declaration": "void MatrixRotate(VMatrix&out dst, const Vector&in vAxisOfRot, float angleDegrees)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixBuildRotation",
            "declaration": "void MatrixBuildRotation(VMatrix&out dst, const Vector&in initialDirection, const Vector&in finalDirection)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixBuildScale",
            "declaration": "void MatrixBuildScale(VMatrix&out dst, float x, float y, float z)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixBuildScale",
            "declaration": "void MatrixBuildScale(VMatrix&out dst, const Vector&in scale)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixBuildPerspective",
            "declaration": "void MatrixBuildPerspective(VMatrix&out dst, float fovX, float fovY, float zNear, float zFar)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixFromAngles",
            "declaration": "void MatrixFromAngles(const QAngle&in vAngles, VMatrix&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixToAngles",
            "declaration": "void MatrixToAngles(const VMatrix&in src, QAngle&out vAngles)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixInverseTR",
            "declaration": "void MatrixInverseTR(const VMatrix&in src, VMatrix&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixInverseGeneral",
            "declaration": "bool MatrixInverseGeneral(const VMatrix&in src, VMatrix&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixInverseTranspose",
            "declaration": "void MatrixInverseTranspose(const VMatrix&in src, VMatrix&out dst)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatricesAreEqual",
            "declaration": "bool MatricesAreEqual(const VMatrix&in src1, const VMatrix&in src2, float flTolerance)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixBuildOrtho",
            "declaration": "void MatrixBuildOrtho(VMatrix&out dst, double left, double top, double right, double bottom, double zNear, double zFar)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixBuildOrthoLH",
            "declaration": "void MatrixBuildOrthoLH(VMatrix&out dst, double left, double top, double right, double bottom, double zNear, double zFar)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixBuildPerspectiveX",
            "declaration": "void MatrixBuildPerspectiveX(VMatrix&out dst, double flFovX, double flAspect, double flZNear, double flZFar)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixBuildPerspectiveOffCenterX",
            "declaration": "void MatrixBuildPerspectiveOffCenterX(VMatrix&out dst, double flFovX, double flAspect, double flZNear, double flZFar, double bottom, double top, double left, double right)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixOrtho",
            "declaration": "void MatrixOrtho(VMatrix&out dst, double left, double top, double right, double bottom, double zNear, double zFar)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixPerspectiveX",
            "declaration": "void MatrixPerspectiveX(VMatrix&out dst, double flFovX, double flAspect, double flZNear, double flZFar)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixPerspectiveOffCenterX",
            "declaration": "void MatrixPerspectiveOffCenterX(VMatrix&out dst, double flFovX, double flAspect, double flZNear, double flZFar, double bottom, double top, double left, double right)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "GetMatrixColumnAsVector4D",
            "declaration": "Vector4D GetMatrixColumnAsVector4D(const VMatrix&in mMatrix, int nCol)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "MatrixGetRowAsVector4D",
            "declaration": "Vector4D MatrixGetRowAsVector4D(const VMatrix&in src, int nRow)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Msg",
            "declaration": "void Msg(const string&in)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Warning",
            "declaration": "void Warning(const string&in)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "DevMsg",
            "declaration": "void DevMsg(const string&in)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "DevWarning",
            "declaration": "void DevWarning(const string&in)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Msgl",
            "declaration": "void Msgl(const string&in)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "Warningl",
            "declaration": "void Warningl(const string&in)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "DevMsgl",
            "declaration": "void DevMsgl(const string&in)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "DevWarningl",
            "declaration": "void DevWarningl(const string&in)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FindTexture",
            "declaration": "Texture@ FindTexture(const string&in)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "FindMaterial",
            "declaration": "Material@ FindMaterial(const string&in)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CreateRenderTarget",
            "declaration": "Texture@ CreateRenderTarget(int, int, ERenderTargetSize, EImageFormat, ERenderTargetDepth)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CreateRenderTarget",
            "declaration": "Texture@ CreateRenderTarget(const string&in, int, int, ERenderTargetSize, EImageFormat, ERenderTargetDepth)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "GetDebugMaterial",
            "declaration": "Material@ GetDebugMaterial(EDebugMaterial)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderSphere",
            "declaration": "void RenderSphere(Vector vCenter, float flRadius, int nTheta, int nPhi, Color color, bool bZBuffer, bool bInsideOut = false)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderSphere",
            "declaration": "void RenderSphere(Vector vCenter, float flRadius, int nTheta, int nPhi, Color color, Material@ pMaterial, bool bInsideOut = false)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderWireframeSphere",
            "declaration": "void RenderWireframeSphere(const Vector&in, float, int, int, Color, bool)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderWireframeBox",
            "declaration": "void RenderWireframeBox(const Vector&in, const QAngle&in, const Vector&in, const Vector&in, Color, bool)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderWireframeSweptBox",
            "declaration": "void RenderWireframeSweptBox(const Vector&in, const Vector&in, const QAngle&in, const Vector&in, const Vector&in, Color, bool)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderLine",
            "declaration": "void RenderLine(const Vector&in, const Vector&in, Color, bool)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderQuad",
            "declaration": "void RenderQuad(Material@, float, float, float, float, float, float, float, float, float, const Color&in)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderCapsule",
            "declaration": "void RenderCapsule(const Vector&in, const Vector&in, const float&in, Color, Material@)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderTriangle",
            "declaration": "void RenderTriangle(const Vector&in, const Vector&in, const Vector&in, Color, bool)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderTriangle",
            "declaration": "void RenderTriangle(const Vector&in, const Vector&in, const Vector&in, Color, Material@)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderBox",
            "declaration": "void RenderBox(Vector origin, QAngle angles, Vector mins, Vector maxs, Color color, bool bZBuffer, bool bInsideOut = false)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderBox",
            "declaration": "void RenderBox(Vector origin, QAngle angles, Vector mins, Vector maxs, Color color, Material@ material, bool bInsideOut = false)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderAxes",
            "declaration": "void RenderAxes(const Vector&in, float, bool)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderAxes",
            "declaration": "void RenderAxes(const matrix3x4_t&in, float, bool)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderPlane",
            "declaration": "void RenderPlane(const Vector&in, const QAngle&in, int, int, int, float, float, float, float, Material@)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "RenderGrid",
            "declaration": "void RenderGrid(const Vector&in, Color, int, float, Material@)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "DrawScreenSpaceRectangle",
            "declaration": "void DrawScreenSpaceRectangle(Material@, float, float, float, float, float, float, float, float)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "CreateEntityByName",
            "declaration": "CBaseEntity@ CreateEntityByName(const string&in)",
            "documentation": null
        },
        {
            "namespace": null,
            "name": "UTIL_TraceLine",
            "declaration": "void UTIL_TraceLine(const Vector&in vecAbsStart, const Vector&in vecAbsEnd, uint mask, const CBaseEntity@ ignore, int collisionGroup, trace_t&out ptr)",
            "documentation": null
        },
        {
            "namespace": "Utility",
            "name": "GetCurrentTime",
            "declaration": "float Utility::GetCurrentTime()",
            "documentation": null
        },
        {
            "namespace": "Utility",
            "name": "GetFrameTime",
            "declaration": "float Utility::GetFrameTime()",
            "documentation": null
        },
        {
            "namespace": "Utility",
            "name": "GetTickCount",
            "declaration": "int Utility::GetTickCount()",
            "documentation": null
        }
    ],
    "property": [
        {
            "namespace": null,
            "name": "vec2_origin",
            "type": "Vector2D",
            "is_const": true
        },
        {
            "namespace": null,
            "name": "vec2_invalid",
            "type": "Vector2D",
            "is_const": true
        },
        {
            "namespace": null,
            "name": "vec3_origin",
            "type": "Vector",
            "is_const": true
        },
        {
            "namespace": null,
            "name": "vec3_angle",
            "type": "QAngle",
            "is_const": true
        },
        {
            "namespace": null,
            "name": "quat_identity",
            "type": "Quaternion",
            "is_const": true
        },
        {
            "namespace": null,
            "name": "vec3_invalid",
            "type": "Vector",
            "is_const": true
        },
        {
            "namespace": null,
            "name": "nanmask",
            "type": "int",
            "is_const": true
        },
        {
            "namespace": null,
            "name": "vec4_origin",
            "type": "Vector4D",
            "is_const": true
        },
        {
            "namespace": null,
            "name": "vec4_invalid",
            "type": "Vector4D",
            "is_const": true
        }
    ],
    "type": [
        {
            "namespace": null,
            "name": "array",
            "template_parameter": [
                {
                    "type": "class",
                    "name": "T"
                }
            ],
            "method": [
                {
                    "name": "opIndex",
                    "declaration": "T& operator[](uint index)",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "const T& operator[](uint index) const",
                    "documentation": null
                },
                {
                    "name": "opForBegin",
                    "declaration": "uint opForBegin() const",
                    "documentation": null
                },
                {
                    "name": "opForEnd",
                    "declaration": "bool opForEnd(uint) const",
                    "documentation": null
                },
                {
                    "name": "opForNext",
                    "declaration": "uint opForNext(uint) const",
                    "documentation": null
                },
                {
                    "name": "opForValue0",
                    "declaration": "const T& opForValue0(uint index) const",
                    "documentation": null
                },
                {
                    "name": "opForValue1",
                    "declaration": "uint opForValue1(uint index) const",
                    "documentation": null
                },
                {
                    "name": "opAssign",
                    "declaration": "T[]& operator=(const T[]&in)",
                    "documentation": null
                },
                {
                    "name": "insertAt",
                    "declaration": "void insertAt(uint index, const T&in value)",
                    "documentation": null
                },
                {
                    "name": "insertAt",
                    "declaration": "void insertAt(uint index, const T[]&inout arr)",
                    "documentation": null
                },
                {
                    "name": "insertLast",
                    "declaration": "void insertLast(const T&in value)",
                    "documentation": null
                },
                {
                    "name": "removeAt",
                    "declaration": "void removeAt(uint index)",
                    "documentation": null
                },
                {
                    "name": "removeLast",
                    "declaration": "void removeLast()",
                    "documentation": null
                },
                {
                    "name": "removeRange",
                    "declaration": "void removeRange(uint start, uint count)",
                    "documentation": null
                },
                {
                    "name": "length",
                    "declaration": "uint length() const",
                    "documentation": null
                },
                {
                    "name": "reserve",
                    "declaration": "void reserve(uint length)",
                    "documentation": null
                },
                {
                    "name": "resize",
                    "declaration": "void resize(uint length)",
                    "documentation": null
                },
                {
                    "name": "sortAsc",
                    "declaration": "void sortAsc()",
                    "documentation": null
                },
                {
                    "name": "sortAsc",
                    "declaration": "void sortAsc(uint startAt, uint count)",
                    "documentation": null
                },
                {
                    "name": "sortDesc",
                    "declaration": "void sortDesc()",
                    "documentation": null
                },
                {
                    "name": "sortDesc",
                    "declaration": "void sortDesc(uint startAt, uint count)",
                    "documentation": null
                },
                {
                    "name": "reverse",
                    "declaration": "void reverse()",
                    "documentation": null
                },
                {
                    "name": "find",
                    "declaration": "int find(const T&in value) const",
                    "documentation": null
                },
                {
                    "name": "find",
                    "declaration": "int find(uint startAt, const T&in value) const",
                    "documentation": null
                },
                {
                    "name": "findByRef",
                    "declaration": "int findByRef(const T&in value) const",
                    "documentation": null
                },
                {
                    "name": "findByRef",
                    "declaration": "int findByRef(uint startAt, const T&in value) const",
                    "documentation": null
                },
                {
                    "name": "opEquals",
                    "declaration": "bool operator==(const T[]&in) const",
                    "documentation": null
                },
                {
                    "name": "isEmpty",
                    "declaration": "bool isEmpty() const",
                    "documentation": null
                },
                {
                    "name": "sort",
                    "declaration": "void sort(T[]::less&in, uint startAt = 0, uint count = uint(-1))",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "string",
            "method": [
                {
                    "name": "opAssign",
                    "declaration": "string& operator=(const string&in str)",
                    "documentation": null
                },
                {
                    "name": "opAssign",
                    "declaration": "string& operator=(int64 num)",
                    "documentation": null
                },
                {
                    "name": "opAssign",
                    "declaration": "string& operator=(uint64 num)",
                    "documentation": null
                },
                {
                    "name": "opAssign",
                    "declaration": "string& operator=(double num)",
                    "documentation": null
                },
                {
                    "name": "opAssign",
                    "declaration": "string& operator=(float num)",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "uint8& operator[](uint idx)",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "const uint8& operator[](uint idx) const",
                    "documentation": null
                },
                {
                    "name": "opAddAssign",
                    "declaration": "string& operator+=(const string&in)",
                    "documentation": null
                },
                {
                    "name": "opAddAssign",
                    "declaration": "string& operator+=(int64)",
                    "documentation": null
                },
                {
                    "name": "opAddAssign",
                    "declaration": "string& operator+=(uint64)",
                    "documentation": null
                },
                {
                    "name": "opAddAssign",
                    "declaration": "string& operator+=(double)",
                    "documentation": null
                },
                {
                    "name": "opAddAssign",
                    "declaration": "string& operator+=(float)",
                    "documentation": null
                },
                {
                    "name": "opAdd",
                    "declaration": "string operator+(const string&in) const",
                    "documentation": null
                },
                {
                    "name": "opAdd",
                    "declaration": "string operator+(int64) const",
                    "documentation": null
                },
                {
                    "name": "opAdd",
                    "declaration": "string operator+(uint64) const",
                    "documentation": null
                },
                {
                    "name": "opAdd_r",
                    "declaration": "string opAdd_r(int64) const",
                    "documentation": null
                },
                {
                    "name": "opAdd_r",
                    "declaration": "string opAdd_r(uint64) const",
                    "documentation": null
                },
                {
                    "name": "opAdd",
                    "declaration": "string operator+(double) const",
                    "documentation": null
                },
                {
                    "name": "opAdd_r",
                    "declaration": "string opAdd_r(double) const",
                    "documentation": null
                },
                {
                    "name": "opAdd",
                    "declaration": "string operator+(float) const",
                    "documentation": null
                },
                {
                    "name": "opAdd_r",
                    "declaration": "string opAdd_r(float) const",
                    "documentation": null
                },
                {
                    "name": "opEquals",
                    "declaration": "bool operator==(const string&in) const",
                    "documentation": null
                },
                {
                    "name": "len",
                    "declaration": "uint len() const",
                    "documentation": null
                },
                {
                    "name": "length",
                    "declaration": "uint length() const",
                    "documentation": null
                },
                {
                    "name": "resize",
                    "declaration": "uint resize() const",
                    "documentation": null
                },
                {
                    "name": "empty",
                    "declaration": "bool empty() const",
                    "documentation": null
                },
                {
                    "name": "tolower",
                    "declaration": "string tolower() const",
                    "documentation": null
                },
                {
                    "name": "toupper",
                    "declaration": "string toupper() const",
                    "documentation": null
                },
                {
                    "name": "trim",
                    "declaration": "string trim() const",
                    "documentation": null
                },
                {
                    "name": "toInt",
                    "declaration": "int64 toInt() const",
                    "documentation": null
                },
                {
                    "name": "toFloat",
                    "declaration": "float toFloat() const",
                    "documentation": null
                },
                {
                    "name": "locate",
                    "declaration": "uint locate(const string&in, const uint = 0) const",
                    "documentation": null
                },
                {
                    "name": "substr",
                    "declaration": "string substr(const int start, const int length) const",
                    "documentation": null
                },
                {
                    "name": "subString",
                    "declaration": "string subString(const int start, const int length) const",
                    "documentation": null
                },
                {
                    "name": "substr",
                    "declaration": "string substr(const int start) const",
                    "documentation": null
                },
                {
                    "name": "subString",
                    "declaration": "string subString(const int start) const",
                    "documentation": null
                },
                {
                    "name": "replace",
                    "declaration": "string replace(const string&in search, const string&in replace) const",
                    "documentation": null
                },
                {
                    "name": "isAlpha",
                    "declaration": "bool isAlpha() const",
                    "documentation": null
                },
                {
                    "name": "isNumerical",
                    "declaration": "bool isNumerical() const",
                    "documentation": null
                },
                {
                    "name": "isNumeric",
                    "declaration": "bool isNumeric() const",
                    "documentation": null
                },
                {
                    "name": "isAlphaNumerical",
                    "declaration": "bool isAlphaNumerical() const",
                    "documentation": null
                },
                {
                    "name": "split",
                    "declaration": "string[]@ split(const string&in) const",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "dictionaryValue",
            "method": [
                {
                    "name": "opAssign",
                    "declaration": "dictionaryValue& operator=(const dictionaryValue&in)",
                    "documentation": null
                },
                {
                    "name": "opHndlAssign",
                    "declaration": "dictionaryValue& operator@=(const ?&in)",
                    "documentation": null
                },
                {
                    "name": "opHndlAssign",
                    "declaration": "dictionaryValue& operator@=(const dictionaryValue&in)",
                    "documentation": null
                },
                {
                    "name": "opAssign",
                    "declaration": "dictionaryValue& operator=(const ?&in)",
                    "documentation": null
                },
                {
                    "name": "opAssign",
                    "declaration": "dictionaryValue& operator=(double)",
                    "documentation": null
                },
                {
                    "name": "opAssign",
                    "declaration": "dictionaryValue& operator=(int64)",
                    "documentation": null
                },
                {
                    "name": "opCast",
                    "declaration": "void opCast(?&out)",
                    "documentation": null
                },
                {
                    "name": "opConv",
                    "declaration": "void opConv(?&out)",
                    "documentation": null
                },
                {
                    "name": "opConv",
                    "declaration": "int64 opConv()",
                    "documentation": null
                },
                {
                    "name": "opConv",
                    "declaration": "double opConv()",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "dictionary",
            "method": [
                {
                    "name": "opAssign",
                    "declaration": "dictionary& operator=(const dictionary&in)",
                    "documentation": null
                },
                {
                    "name": "set",
                    "declaration": "void set(const string&in, const ?&in)",
                    "documentation": null
                },
                {
                    "name": "get",
                    "declaration": "bool get(const string&in, ?&out) const",
                    "documentation": null
                },
                {
                    "name": "set",
                    "declaration": "void set(const string&in, const int64&in)",
                    "documentation": null
                },
                {
                    "name": "get",
                    "declaration": "bool get(const string&in, int64&out) const",
                    "documentation": null
                },
                {
                    "name": "set",
                    "declaration": "void set(const string&in, const double&in)",
                    "documentation": null
                },
                {
                    "name": "get",
                    "declaration": "bool get(const string&in, double&out) const",
                    "documentation": null
                },
                {
                    "name": "exists",
                    "declaration": "bool exists(const string&in) const",
                    "documentation": null
                },
                {
                    "name": "isEmpty",
                    "declaration": "bool isEmpty() const",
                    "documentation": null
                },
                {
                    "name": "getSize",
                    "declaration": "uint getSize() const",
                    "documentation": null
                },
                {
                    "name": "delete",
                    "declaration": "bool delete(const string&in)",
                    "documentation": null
                },
                {
                    "name": "deleteAll",
                    "declaration": "void deleteAll()",
                    "documentation": null
                },
                {
                    "name": "getKeys",
                    "declaration": "string[]@ getKeys() const",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "dictionaryValue& operator[](const string&in)",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "const dictionaryValue& operator[](const string&in) const",
                    "documentation": null
                },
                {
                    "name": "opForBegin",
                    "declaration": "dictionaryIter@ opForBegin() const",
                    "documentation": null
                },
                {
                    "name": "opForEnd",
                    "declaration": "bool opForEnd(dictionaryIter@) const",
                    "documentation": null
                },
                {
                    "name": "opForNext",
                    "declaration": "dictionaryIter@ opForNext(dictionaryIter@) const",
                    "documentation": null
                },
                {
                    "name": "opForValue0",
                    "declaration": "const dictionaryValue& opForValue0(dictionaryIter@) const",
                    "documentation": null
                },
                {
                    "name": "opForValue1",
                    "declaration": "const string& opForValue1(dictionaryIter@) const",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "dictionaryIter"
        },
        {
            "namespace": null,
            "name": "grid",
            "template_parameter": [
                {
                    "type": "class",
                    "name": "T"
                }
            ],
            "method": [
                {
                    "name": "opIndex",
                    "declaration": "T& operator[](uint, uint)",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "const T& operator[](uint, uint) const",
                    "documentation": null
                },
                {
                    "name": "resize",
                    "declaration": "void resize(uint width, uint height)",
                    "documentation": null
                },
                {
                    "name": "width",
                    "declaration": "uint width() const",
                    "documentation": null
                },
                {
                    "name": "height",
                    "declaration": "uint height() const",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "any",
            "method": [
                {
                    "name": "opAssign",
                    "declaration": "any& operator=(any&in)",
                    "documentation": null
                },
                {
                    "name": "store",
                    "declaration": "void store(?&in)",
                    "documentation": null
                },
                {
                    "name": "store",
                    "declaration": "void store(const int64&in)",
                    "documentation": null
                },
                {
                    "name": "store",
                    "declaration": "void store(const double&in)",
                    "documentation": null
                },
                {
                    "name": "retrieve",
                    "declaration": "bool retrieve(?&out) const",
                    "documentation": null
                },
                {
                    "name": "retrieve",
                    "declaration": "bool retrieve(int64&out) const",
                    "documentation": null
                },
                {
                    "name": "retrieve",
                    "declaration": "bool retrieve(double&out) const",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "ref",
            "method": [
                {
                    "name": "opCast",
                    "declaration": "void opCast(?&out)",
                    "documentation": null
                },
                {
                    "name": "opHndlAssign",
                    "declaration": "ref& operator@=(const ref&in)",
                    "documentation": null
                },
                {
                    "name": "opHndlAssign",
                    "declaration": "ref& operator@=(const ?&in)",
                    "documentation": null
                },
                {
                    "name": "opEquals",
                    "declaration": "bool operator==(const ref&in) const",
                    "documentation": null
                },
                {
                    "name": "opEquals",
                    "declaration": "bool operator==(const ?&in) const",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "Vector2D",
            "method": [
                {
                    "name": "Init",
                    "declaration": "void Init(float ix, float iy)",
                    "documentation": null
                },
                {
                    "name": "IsValid",
                    "declaration": "bool IsValid() const",
                    "documentation": null
                },
                {
                    "name": "Invalidate",
                    "declaration": "void Invalidate()",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "float operator[](int i) const",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "float& operator[](int i)",
                    "documentation": null
                },
                {
                    "name": "Random",
                    "declaration": "void Random(float minVal, float maxVal)",
                    "documentation": null
                },
                {
                    "name": "opEquals",
                    "declaration": "bool operator==(const Vector2D&in v) const",
                    "documentation": null
                },
                {
                    "name": "opAddAssign",
                    "declaration": "Vector2D& operator+=(const Vector2D&in v)",
                    "documentation": null
                },
                {
                    "name": "opSubAssign",
                    "declaration": "Vector2D& operator-=(const Vector2D&in v)",
                    "documentation": null
                },
                {
                    "name": "opMulAssign",
                    "declaration": "Vector2D& operator*=(const Vector2D&in v)",
                    "documentation": null
                },
                {
                    "name": "opMulAssign",
                    "declaration": "Vector2D& operator*=(float s)",
                    "documentation": null
                },
                {
                    "name": "opDivAssign",
                    "declaration": "Vector2D& operator/=(const Vector2D&in v)",
                    "documentation": null
                },
                {
                    "name": "opDivAssign",
                    "declaration": "Vector2D& operator/=(float s)",
                    "documentation": null
                },
                {
                    "name": "Negate",
                    "declaration": "void Negate()",
                    "documentation": null
                },
                {
                    "name": "Length",
                    "declaration": "float Length() const",
                    "documentation": null
                },
                {
                    "name": "LengthSqr",
                    "declaration": "float LengthSqr() const",
                    "documentation": null
                },
                {
                    "name": "IsZero",
                    "declaration": "bool IsZero(float tolerance = 0.009999999776482582) const",
                    "documentation": null
                },
                {
                    "name": "NormalizeInPlace",
                    "declaration": "float NormalizeInPlace()",
                    "documentation": null
                },
                {
                    "name": "IsLengthGreaterThan",
                    "declaration": "bool IsLengthGreaterThan(float val) const",
                    "documentation": null
                },
                {
                    "name": "IsLengthLessThan",
                    "declaration": "bool IsLengthLessThan(float val) const",
                    "documentation": null
                },
                {
                    "name": "DistTo",
                    "declaration": "float DistTo(const Vector2D&in vOther) const",
                    "documentation": null
                },
                {
                    "name": "DistToSqr",
                    "declaration": "float DistToSqr(const Vector2D&in vOther) const",
                    "documentation": null
                },
                {
                    "name": "MulAdd",
                    "declaration": "void MulAdd(const Vector2D&in a, const Vector2D&in b, float scalar)",
                    "documentation": null
                },
                {
                    "name": "Dot",
                    "declaration": "float Dot(const Vector2D&in vOther) const",
                    "documentation": null
                },
                {
                    "name": "opAssign",
                    "declaration": "Vector2D& operator=(const Vector2D&in)",
                    "documentation": null
                },
                {
                    "name": "opNeg",
                    "declaration": "Vector2D operator-() const",
                    "documentation": null
                },
                {
                    "name": "opAdd",
                    "declaration": "Vector2D operator+(const Vector2D&in v) const",
                    "documentation": null
                },
                {
                    "name": "opSub",
                    "declaration": "Vector2D operator-(const Vector2D&in v) const",
                    "documentation": null
                },
                {
                    "name": "opMul",
                    "declaration": "Vector2D operator*(const Vector2D&in v) const",
                    "documentation": null
                },
                {
                    "name": "opDiv",
                    "declaration": "Vector2D operator/(const Vector2D&in v) const",
                    "documentation": null
                },
                {
                    "name": "opMul",
                    "declaration": "Vector2D operator*(float fl) const",
                    "documentation": null
                },
                {
                    "name": "opDiv",
                    "declaration": "Vector2D operator/(float fl) const",
                    "documentation": null
                },
                {
                    "name": "Cross",
                    "declaration": "float Cross(const Vector2D&in vOther) const",
                    "documentation": null
                },
                {
                    "name": "Min",
                    "declaration": "Vector2D Min(const Vector2D&in vOther) const",
                    "documentation": null
                },
                {
                    "name": "Max",
                    "declaration": "Vector2D Max(const Vector2D&in vOther) const",
                    "documentation": null
                }
            ],
            "property": [
                {
                    "name": "x",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "y",
                    "type": "float",
                    "is_const": false
                }
            ]
        },
        {
            "namespace": null,
            "name": "Vector",
            "method": [
                {
                    "name": "Init",
                    "declaration": "void Init(float ix, float iy, float iz)",
                    "documentation": null
                },
                {
                    "name": "IsValid",
                    "declaration": "bool IsValid() const",
                    "documentation": null
                },
                {
                    "name": "IsReasonable",
                    "declaration": "bool IsReasonable(float range = 1000000.0) const",
                    "documentation": null
                },
                {
                    "name": "Invalidate",
                    "declaration": "void Invalidate()",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "float operator[](int i) const",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "float& operator[](int i)",
                    "documentation": null
                },
                {
                    "name": "AsVector2D",
                    "declaration": "Vector2D& AsVector2D()",
                    "documentation": null
                },
                {
                    "name": "AsVector2D",
                    "declaration": "const Vector2D& AsVector2D() const",
                    "documentation": null
                },
                {
                    "name": "Random",
                    "declaration": "void Random(float minVal, float maxVal)",
                    "documentation": null
                },
                {
                    "name": "Zero",
                    "declaration": "void Zero()",
                    "documentation": null
                },
                {
                    "name": "opEquals",
                    "declaration": "bool operator==(const Vector&in) const",
                    "documentation": null
                },
                {
                    "name": "opAddAssign",
                    "declaration": "Vector& operator+=(const Vector&in v)",
                    "documentation": null
                },
                {
                    "name": "opSubAssign",
                    "declaration": "Vector& operator-=(const Vector&in v)",
                    "documentation": null
                },
                {
                    "name": "opMulAssign",
                    "declaration": "Vector& operator*=(const Vector&in v)",
                    "documentation": null
                },
                {
                    "name": "opMulAssign",
                    "declaration": "Vector& operator*=(float s)",
                    "documentation": null
                },
                {
                    "name": "opDivAssign",
                    "declaration": "Vector& operator/=(const Vector&in v)",
                    "documentation": null
                },
                {
                    "name": "opDivAssign",
                    "declaration": "Vector& operator/=(float s)",
                    "documentation": null
                },
                {
                    "name": "opAddAssign",
                    "declaration": "Vector& operator+=(float fl)",
                    "documentation": null
                },
                {
                    "name": "opSubAssign",
                    "declaration": "Vector& operator-=(float fl)",
                    "documentation": null
                },
                {
                    "name": "Negate",
                    "declaration": "void Negate()",
                    "documentation": null
                },
                {
                    "name": "Length",
                    "declaration": "float Length() const",
                    "documentation": null
                },
                {
                    "name": "LengthSqr",
                    "declaration": "float LengthSqr() const",
                    "documentation": null
                },
                {
                    "name": "LengthRecipFast",
                    "declaration": "float LengthRecipFast() const",
                    "documentation": null
                },
                {
                    "name": "IsZero",
                    "declaration": "bool IsZero(float tolerance = 0.009999999776482582) const",
                    "documentation": null
                },
                {
                    "name": "IsZeroFast",
                    "declaration": "bool IsZeroFast() const",
                    "documentation": null
                },
                {
                    "name": "NormalizeInPlace",
                    "declaration": "float NormalizeInPlace()",
                    "documentation": null
                },
                {
                    "name": "NormalizeInPlaceSafe",
                    "declaration": "float NormalizeInPlaceSafe(const Vector&in vFallback)",
                    "documentation": null
                },
                {
                    "name": "Normalized",
                    "declaration": "Vector Normalized() const",
                    "documentation": null
                },
                {
                    "name": "NormalizedSafe",
                    "declaration": "Vector NormalizedSafe(const Vector&in vFallback) const",
                    "documentation": null
                },
                {
                    "name": "IsLengthGreaterThan",
                    "declaration": "bool IsLengthGreaterThan(float val) const",
                    "documentation": null
                },
                {
                    "name": "IsLengthLessThan",
                    "declaration": "bool IsLengthLessThan(float val) const",
                    "documentation": null
                },
                {
                    "name": "WithinAABox",
                    "declaration": "bool WithinAABox(const Vector&in boxmin, const Vector&in boxmax)",
                    "documentation": null
                },
                {
                    "name": "DistTo",
                    "declaration": "float DistTo(const Vector&in vOther) const",
                    "documentation": null
                },
                {
                    "name": "DistToSqr",
                    "declaration": "float DistToSqr(const Vector&in vOther) const",
                    "documentation": null
                },
                {
                    "name": "MulAdd",
                    "declaration": "void MulAdd(const Vector&in a, const Vector&in b, float scalar)",
                    "documentation": null
                },
                {
                    "name": "Dot",
                    "declaration": "float Dot(const Vector&in vOther) const",
                    "documentation": null
                },
                {
                    "name": "opAssign",
                    "declaration": "Vector& operator=(const Vector&in)",
                    "documentation": null
                },
                {
                    "name": "LargestComponent",
                    "declaration": "int LargestComponent() const",
                    "documentation": null
                },
                {
                    "name": "LargestComponentValue",
                    "declaration": "float LargestComponentValue() const",
                    "documentation": null
                },
                {
                    "name": "SmallestComponent",
                    "declaration": "int SmallestComponent() const",
                    "documentation": null
                },
                {
                    "name": "SmallestComponentValue",
                    "declaration": "float SmallestComponentValue() const",
                    "documentation": null
                },
                {
                    "name": "Length2D",
                    "declaration": "float Length2D() const",
                    "documentation": null
                },
                {
                    "name": "Length2DSqr",
                    "declaration": "float Length2DSqr() const",
                    "documentation": null
                },
                {
                    "name": "ProjectOnto",
                    "declaration": "Vector ProjectOnto(const Vector&in onto)",
                    "documentation": null
                },
                {
                    "name": "opNeg",
                    "declaration": "Vector operator-() const",
                    "documentation": null
                },
                {
                    "name": "opAdd",
                    "declaration": "Vector operator+(const Vector&in v) const",
                    "documentation": null
                },
                {
                    "name": "opSub",
                    "declaration": "Vector operator-(const Vector&in v) const",
                    "documentation": null
                },
                {
                    "name": "opMul",
                    "declaration": "Vector operator*(const Vector&in v) const",
                    "documentation": null
                },
                {
                    "name": "opDiv",
                    "declaration": "Vector operator/(const Vector&in v) const",
                    "documentation": null
                },
                {
                    "name": "opMul",
                    "declaration": "Vector operator*(float fl) const",
                    "documentation": null
                },
                {
                    "name": "opDiv",
                    "declaration": "Vector operator/(float fl) const",
                    "documentation": null
                },
                {
                    "name": "Cross",
                    "declaration": "Vector Cross(const Vector&in vOther) const",
                    "documentation": null
                },
                {
                    "name": "Min",
                    "declaration": "Vector Min(const Vector&in vOther) const",
                    "documentation": null
                },
                {
                    "name": "Max",
                    "declaration": "Vector Max(const Vector&in vOther) const",
                    "documentation": null
                }
            ],
            "property": [
                {
                    "name": "x",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "y",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "z",
                    "type": "float",
                    "is_const": false
                }
            ]
        },
        {
            "namespace": null,
            "name": "Quaternion",
            "method": [
                {
                    "name": "Init",
                    "declaration": "void Init(float ix, float iy, float iz, float iw)",
                    "documentation": null
                },
                {
                    "name": "Init",
                    "declaration": "void Init(const Vector&in vImaginaryPart, float flRealPart)",
                    "documentation": null
                },
                {
                    "name": "IsValid",
                    "declaration": "bool IsValid() const",
                    "documentation": null
                },
                {
                    "name": "Invalidate",
                    "declaration": "void Invalidate()",
                    "documentation": null
                },
                {
                    "name": "opEquals",
                    "declaration": "bool operator==(const Quaternion&in src) const",
                    "documentation": null
                },
                {
                    "name": "opAssign",
                    "declaration": "Quaternion& operator=(const Quaternion&in)",
                    "documentation": null
                },
                {
                    "name": "Conjugate",
                    "declaration": "Quaternion Conjugate() const",
                    "documentation": null
                },
                {
                    "name": "GetForward",
                    "declaration": "Vector GetForward() const",
                    "documentation": null
                },
                {
                    "name": "GetLeft",
                    "declaration": "Vector GetLeft() const",
                    "documentation": null
                },
                {
                    "name": "GetUp",
                    "declaration": "Vector GetUp() const",
                    "documentation": null
                },
                {
                    "name": "Print",
                    "declaration": "void Print() const",
                    "documentation": null
                },
                {
                    "name": "ImaginaryPart",
                    "declaration": "Vector& ImaginaryPart()",
                    "documentation": null
                },
                {
                    "name": "ImaginaryPart",
                    "declaration": "const Vector& ImaginaryPart() const",
                    "documentation": null
                },
                {
                    "name": "RealPart",
                    "declaration": "float& RealPart()",
                    "documentation": null
                },
                {
                    "name": "RealPart",
                    "declaration": "float RealPart() const",
                    "documentation": null
                },
                {
                    "name": "ToQAngle",
                    "declaration": "QAngle ToQAngle() const",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "float operator[](int i) const",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "float& operator[](int i)",
                    "documentation": null
                },
                {
                    "name": "opAdd",
                    "declaration": "Quaternion operator+() const",
                    "documentation": null
                },
                {
                    "name": "opNeg",
                    "declaration": "Quaternion operator-() const",
                    "documentation": null
                }
            ],
            "property": [
                {
                    "name": "x",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "y",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "z",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "w",
                    "type": "float",
                    "is_const": false
                }
            ]
        },
        {
            "namespace": null,
            "name": "QAngle",
            "method": [
                {
                    "name": "Init",
                    "declaration": "void Init(float ix, float iy, float iz)",
                    "documentation": null
                },
                {
                    "name": "Random",
                    "declaration": "void Random(float minVal, float maxVal)",
                    "documentation": null
                },
                {
                    "name": "IsValid",
                    "declaration": "bool IsValid() const",
                    "documentation": null
                },
                {
                    "name": "Invalidate",
                    "declaration": "void Invalidate()",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "float operator[](int i) const",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "float& operator[](int i)",
                    "documentation": null
                },
                {
                    "name": "opEquals",
                    "declaration": "bool operator==(const QAngle&in v) const",
                    "documentation": null
                },
                {
                    "name": "opAddAssign",
                    "declaration": "QAngle& operator+=(const QAngle&in v)",
                    "documentation": null
                },
                {
                    "name": "opSubAssign",
                    "declaration": "QAngle& operator-=(const QAngle&in v)",
                    "documentation": null
                },
                {
                    "name": "opMulAssign",
                    "declaration": "QAngle& operator*=(float s)",
                    "documentation": null
                },
                {
                    "name": "opDivAssign",
                    "declaration": "QAngle& operator/=(float s)",
                    "documentation": null
                },
                {
                    "name": "Length",
                    "declaration": "float Length() const",
                    "documentation": null
                },
                {
                    "name": "LengthSqr",
                    "declaration": "float LengthSqr() const",
                    "documentation": null
                },
                {
                    "name": "opAssign",
                    "declaration": "QAngle& operator=(const QAngle&in)",
                    "documentation": null
                },
                {
                    "name": "NormalizeInPlace",
                    "declaration": "void NormalizeInPlace()",
                    "documentation": null
                },
                {
                    "name": "NormalizePositiveInPlace",
                    "declaration": "void NormalizePositiveInPlace()",
                    "documentation": null
                },
                {
                    "name": "Normalized",
                    "declaration": "QAngle Normalized() const",
                    "documentation": null
                },
                {
                    "name": "NormalizedPositive",
                    "declaration": "QAngle NormalizedPositive() const",
                    "documentation": null
                },
                {
                    "name": "ToQuaternion",
                    "declaration": "Quaternion ToQuaternion() const",
                    "documentation": null
                },
                {
                    "name": "opNeg",
                    "declaration": "QAngle operator-() const",
                    "documentation": null
                },
                {
                    "name": "opAdd",
                    "declaration": "QAngle operator+(const QAngle&in v) const",
                    "documentation": null
                },
                {
                    "name": "opSub",
                    "declaration": "QAngle operator-(const QAngle&in v) const",
                    "documentation": null
                },
                {
                    "name": "opMul",
                    "declaration": "QAngle operator*(float fl) const",
                    "documentation": null
                },
                {
                    "name": "opDiv",
                    "declaration": "QAngle operator/(float fl) const",
                    "documentation": null
                }
            ],
            "property": [
                {
                    "name": "x",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "y",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "z",
                    "type": "float",
                    "is_const": false
                }
            ]
        },
        {
            "namespace": null,
            "name": "matrix3x4_t",
            "method": [
                {
                    "name": "InitXYZ",
                    "declaration": "void InitXYZ(const Vector&in xAxis, const Vector&in yAxis, const Vector&in zAxis, const Vector&in vecOrigin)",
                    "documentation": null
                },
                {
                    "name": "Init",
                    "declaration": "void Init(const Vector&in xAxis, const Vector&in yAxis, const Vector&in zAxis, const Vector&in vecOrigin)",
                    "documentation": null
                },
                {
                    "name": "InitFromQAngles",
                    "declaration": "void InitFromQAngles(const QAngle&in angles, const Vector&in vPosition)",
                    "documentation": null
                },
                {
                    "name": "InitFromQAngles",
                    "declaration": "void InitFromQAngles(const QAngle&in angles)",
                    "documentation": null
                },
                {
                    "name": "InitFromQuaternion",
                    "declaration": "void InitFromQuaternion(const Quaternion&in orientation, const Vector&in vPosition)",
                    "documentation": null
                },
                {
                    "name": "InitFromQuaternion",
                    "declaration": "void InitFromQuaternion(const Quaternion&in orientation)",
                    "documentation": null
                },
                {
                    "name": "InitFromDiagonal",
                    "declaration": "void InitFromDiagonal(const Vector&in vDiagonal)",
                    "documentation": null
                },
                {
                    "name": "ToQuaternion",
                    "declaration": "Quaternion ToQuaternion() const",
                    "documentation": null
                },
                {
                    "name": "ToQAngle",
                    "declaration": "QAngle ToQAngle() const",
                    "documentation": null
                },
                {
                    "name": "SetToIdentity",
                    "declaration": "void SetToIdentity()",
                    "documentation": null
                },
                {
                    "name": "ScaleUpper3x3Matrix",
                    "declaration": "void ScaleUpper3x3Matrix(float flScale)",
                    "documentation": null
                },
                {
                    "name": "SetOrigin",
                    "declaration": "void SetOrigin(const Vector&in p)",
                    "documentation": null
                },
                {
                    "name": "GetOrigin",
                    "declaration": "Vector GetOrigin() const",
                    "documentation": null
                },
                {
                    "name": "Invalidate",
                    "declaration": "void Invalidate()",
                    "documentation": null
                },
                {
                    "name": "IsValid",
                    "declaration": "bool IsValid() const",
                    "documentation": null
                },
                {
                    "name": "opEquals",
                    "declaration": "bool operator==(const matrix3x4_t&in other) const",
                    "documentation": null
                },
                {
                    "name": "IsEqualTo",
                    "declaration": "bool IsEqualTo(const matrix3x4_t&in other, float flTolerance = 9.999999747378752e-06) const",
                    "documentation": null
                },
                {
                    "name": "TransformVector",
                    "declaration": "Vector TransformVector(const Vector&in v0) const",
                    "documentation": null
                },
                {
                    "name": "RotateVector",
                    "declaration": "Vector RotateVector(const Vector&in v0) const",
                    "documentation": null
                },
                {
                    "name": "TransformVectorByInverse",
                    "declaration": "Vector TransformVectorByInverse(const Vector&in v0) const",
                    "documentation": null
                },
                {
                    "name": "RotateVectorByInverse",
                    "declaration": "Vector RotateVectorByInverse(const Vector&in v0) const",
                    "documentation": null
                },
                {
                    "name": "RotateExtents",
                    "declaration": "Vector RotateExtents(const Vector&in vBoxExtents) const",
                    "documentation": null
                },
                {
                    "name": "TransformAABB",
                    "declaration": "void TransformAABB(const Vector&in vecMinsIn, const Vector&in vecMaxsIn, Vector&out vecMinsOut, Vector&out vecMaxsOut) const",
                    "documentation": null
                },
                {
                    "name": "TransformAABBByInverse",
                    "declaration": "void TransformAABBByInverse(const Vector&in vecMinsIn, const Vector&in vecMaxsIn, Vector&out vecMinsOut, Vector&out vecMaxsOut) const",
                    "documentation": null
                },
                {
                    "name": "RotateAABB",
                    "declaration": "void RotateAABB(const Vector&in vecMinsIn, const Vector&in vecMaxsIn, Vector&out vecMinsOut, Vector&out vecMaxsOut) const",
                    "documentation": null
                },
                {
                    "name": "RotateAABBByInverse",
                    "declaration": "void RotateAABBByInverse(const Vector&in vecMinsIn, const Vector&in vecMaxsIn, Vector&out vecMinsOut, Vector&out vecMaxsOut) const",
                    "documentation": null
                },
                {
                    "name": "GetOrthogonalityError",
                    "declaration": "float GetOrthogonalityError() const",
                    "documentation": null
                },
                {
                    "name": "GetDeterminant",
                    "declaration": "float GetDeterminant() const",
                    "documentation": null
                },
                {
                    "name": "GetSylvestersCriterion",
                    "declaration": "float GetSylvestersCriterion() const",
                    "documentation": null
                },
                {
                    "name": "GetForward",
                    "declaration": "Vector GetForward() const",
                    "documentation": null
                },
                {
                    "name": "GetLeft",
                    "declaration": "Vector GetLeft() const",
                    "documentation": null
                },
                {
                    "name": "GetUp",
                    "declaration": "Vector GetUp() const",
                    "documentation": null
                },
                {
                    "name": "GetRow",
                    "declaration": "Vector GetRow(int nRow) const",
                    "documentation": null
                },
                {
                    "name": "SetRow",
                    "declaration": "void SetRow(int nRow, const Vector&in vRow)",
                    "documentation": null
                },
                {
                    "name": "InverseTR",
                    "declaration": "void InverseTR(matrix3x4_t&out Out) const",
                    "documentation": null
                },
                {
                    "name": "InverseTR",
                    "declaration": "matrix3x4_t InverseTR() const",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "VPlane",
            "method": [
                {
                    "name": "Init",
                    "declaration": "void Init(const Vector&in vNormal, float dist)",
                    "documentation": null
                },
                {
                    "name": "Init",
                    "declaration": "void Init(const Vector&in vNormal, const Vector&in vPointOnPlane)",
                    "documentation": null
                },
                {
                    "name": "DistTo",
                    "declaration": "float DistTo(const Vector&in vVec) const",
                    "documentation": null
                },
                {
                    "name": "opAssign",
                    "declaration": "VPlane& operator=(const VPlane&in thePlane)",
                    "documentation": null
                },
                {
                    "name": "Flip",
                    "declaration": "VPlane Flip() const",
                    "documentation": null
                },
                {
                    "name": "GetPointOnPlane",
                    "declaration": "Vector GetPointOnPlane() const",
                    "documentation": null
                },
                {
                    "name": "ProjectPointOntoPlane",
                    "declaration": "Vector ProjectPointOntoPlane(const Vector&in vPoint) const",
                    "documentation": null
                }
            ],
            "property": [
                {
                    "name": "m_Normal",
                    "type": "Vector",
                    "is_const": false
                },
                {
                    "name": "m_Dist",
                    "type": "float",
                    "is_const": false
                }
            ]
        },
        {
            "namespace": null,
            "name": "Vector4D",
            "method": [
                {
                    "name": "Init",
                    "declaration": "void Init(float ix, float iy, float iz, float iw)",
                    "documentation": null
                },
                {
                    "name": "Init",
                    "declaration": "void Init(const Vector&in src, float iw)",
                    "documentation": null
                },
                {
                    "name": "IsValid",
                    "declaration": "bool IsValid() const",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "float operator[](int i) const",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "float& operator[](int i)",
                    "documentation": null
                },
                {
                    "name": "AsVector3D",
                    "declaration": "Vector& AsVector3D()",
                    "documentation": null
                },
                {
                    "name": "AsVector3D",
                    "declaration": "const Vector& AsVector3D() const",
                    "documentation": null
                },
                {
                    "name": "AsVector2D",
                    "declaration": "Vector2D& AsVector2D()",
                    "documentation": null
                },
                {
                    "name": "AsVector2D",
                    "declaration": "const Vector2D& AsVector2D() const",
                    "documentation": null
                },
                {
                    "name": "Random",
                    "declaration": "void Random(float minVal, float maxVal)",
                    "documentation": null
                },
                {
                    "name": "opEquals",
                    "declaration": "bool operator==(const Vector4D&in) const",
                    "documentation": null
                },
                {
                    "name": "opAddAssign",
                    "declaration": "Vector4D& operator+=(const Vector4D&in v)",
                    "documentation": null
                },
                {
                    "name": "opSubAssign",
                    "declaration": "Vector4D& operator-=(const Vector4D&in v)",
                    "documentation": null
                },
                {
                    "name": "opMulAssign",
                    "declaration": "Vector4D& operator*=(const Vector4D&in v)",
                    "documentation": null
                },
                {
                    "name": "opMulAssign",
                    "declaration": "Vector4D& operator*=(float s)",
                    "documentation": null
                },
                {
                    "name": "opDivAssign",
                    "declaration": "Vector4D& operator/=(const Vector4D&in v)",
                    "documentation": null
                },
                {
                    "name": "opDivAssign",
                    "declaration": "Vector4D& operator/=(float s)",
                    "documentation": null
                },
                {
                    "name": "opNeg",
                    "declaration": "Vector4D operator-() const",
                    "documentation": null
                },
                {
                    "name": "opMul",
                    "declaration": "Vector4D operator*(float fl) const",
                    "documentation": null
                },
                {
                    "name": "opDiv",
                    "declaration": "Vector4D operator/(float fl) const",
                    "documentation": null
                },
                {
                    "name": "opMul",
                    "declaration": "Vector4D operator*(const Vector4D&in v) const",
                    "documentation": null
                },
                {
                    "name": "opAdd",
                    "declaration": "Vector4D operator+(const Vector4D&in v) const",
                    "documentation": null
                },
                {
                    "name": "opSub",
                    "declaration": "Vector4D operator-(const Vector4D&in v) const",
                    "documentation": null
                },
                {
                    "name": "Negate",
                    "declaration": "void Negate()",
                    "documentation": null
                },
                {
                    "name": "Length",
                    "declaration": "float Length() const",
                    "documentation": null
                },
                {
                    "name": "LengthSqr",
                    "declaration": "float LengthSqr() const",
                    "documentation": null
                },
                {
                    "name": "IsZero",
                    "declaration": "bool IsZero(float tolerance = 0.009999999776482582) const",
                    "documentation": null
                },
                {
                    "name": "DistTo",
                    "declaration": "float DistTo(const Vector4D&in vOther) const",
                    "documentation": null
                },
                {
                    "name": "DistToSqr",
                    "declaration": "float DistToSqr(const Vector4D&in vOther) const",
                    "documentation": null
                },
                {
                    "name": "MulAdd",
                    "declaration": "void MulAdd(const Vector4D&in a, const Vector4D&in b, float scalar)",
                    "documentation": null
                },
                {
                    "name": "Dot",
                    "declaration": "float Dot(const Vector4D&in vOther) const",
                    "documentation": null
                },
                {
                    "name": "opAssign",
                    "declaration": "Vector4D& operator=(const Vector4D&in)",
                    "documentation": null
                }
            ],
            "property": [
                {
                    "name": "x",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "y",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "z",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "w",
                    "type": "float",
                    "is_const": false
                }
            ]
        },
        {
            "namespace": null,
            "name": "VMatrix",
            "method": [
                {
                    "name": "Init",
                    "declaration": "void Init(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33)",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "float& operator[](uint, uint)",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "const float& operator[](uint, uint) const",
                    "documentation": null
                },
                {
                    "name": "Init",
                    "declaration": "void Init(const matrix3x4_t&in matrix3x4)",
                    "documentation": null
                },
                {
                    "name": "SetLeft",
                    "declaration": "void SetLeft(const Vector&in vLeft)",
                    "documentation": null
                },
                {
                    "name": "SetUp",
                    "declaration": "void SetUp(const Vector&in vUp)",
                    "documentation": null
                },
                {
                    "name": "SetForward",
                    "declaration": "void SetForward(const Vector&in vForward)",
                    "documentation": null
                },
                {
                    "name": "GetBasisVectors",
                    "declaration": "void GetBasisVectors(Vector&out vForward, Vector&out vLeft, Vector&out vUp) const",
                    "documentation": null
                },
                {
                    "name": "SetBasisVectors",
                    "declaration": "void SetBasisVectors(const Vector&in vForward, const Vector&in vLeft, const Vector&in vUp)",
                    "documentation": null
                },
                {
                    "name": "GetTranslation",
                    "declaration": "Vector& GetTranslation(Vector&out vTrans) const",
                    "documentation": null
                },
                {
                    "name": "SetTranslation",
                    "declaration": "void SetTranslation(const Vector&in vTrans)",
                    "documentation": null
                },
                {
                    "name": "PreTranslate",
                    "declaration": "void PreTranslate(const Vector&in vTrans)",
                    "documentation": null
                },
                {
                    "name": "PostTranslate",
                    "declaration": "void PostTranslate(const Vector&in vTrans)",
                    "documentation": null
                },
                {
                    "name": "As3x4",
                    "declaration": "matrix3x4_t& As3x4()",
                    "documentation": null
                },
                {
                    "name": "As3x4",
                    "declaration": "const matrix3x4_t& As3x4() const",
                    "documentation": null
                },
                {
                    "name": "CopyFrom3x4",
                    "declaration": "void CopyFrom3x4(const matrix3x4_t&in m3x4)",
                    "documentation": null
                },
                {
                    "name": "Set3x4",
                    "declaration": "void Set3x4(matrix3x4_t&out matrix3x4) const",
                    "documentation": null
                },
                {
                    "name": "opEquals",
                    "declaration": "bool operator==(const VMatrix&in src) const",
                    "documentation": null
                },
                {
                    "name": "GetLeft",
                    "declaration": "Vector GetLeft() const",
                    "documentation": null
                },
                {
                    "name": "GetUp",
                    "declaration": "Vector GetUp() const",
                    "documentation": null
                },
                {
                    "name": "GetForward",
                    "declaration": "Vector GetForward() const",
                    "documentation": null
                },
                {
                    "name": "GetTranslation",
                    "declaration": "Vector GetTranslation() const",
                    "documentation": null
                },
                {
                    "name": "V3Mul",
                    "declaration": "void V3Mul(const Vector&in vIn, Vector&out vOut) const",
                    "documentation": null
                },
                {
                    "name": "V4Mul",
                    "declaration": "void V4Mul(const Vector4D&in vIn, Vector4D&out vOut) const",
                    "documentation": null
                },
                {
                    "name": "ApplyRotation",
                    "declaration": "Vector ApplyRotation(const Vector&in vVec) const",
                    "documentation": null
                },
                {
                    "name": "opMul",
                    "declaration": "Vector operator*(const Vector&in vVec) const",
                    "documentation": null
                },
                {
                    "name": "VMul3x3",
                    "declaration": "Vector VMul3x3(const Vector&in vVec) const",
                    "documentation": null
                },
                {
                    "name": "VMul3x3Transpose",
                    "declaration": "Vector VMul3x3Transpose(const Vector&in vVec) const",
                    "documentation": null
                },
                {
                    "name": "VMul4x3",
                    "declaration": "Vector VMul4x3(const Vector&in vVec) const",
                    "documentation": null
                },
                {
                    "name": "VMul4x3Transpose",
                    "declaration": "Vector VMul4x3Transpose(const Vector&in vVec) const",
                    "documentation": null
                },
                {
                    "name": "TransformPlane",
                    "declaration": "void TransformPlane(const VPlane&in inPlane, VPlane&out outPlane) const",
                    "documentation": null
                },
                {
                    "name": "opMul",
                    "declaration": "VPlane operator*(const VPlane&in thePlane) const",
                    "documentation": null
                },
                {
                    "name": "opAssign",
                    "declaration": "VMatrix& operator=(const VMatrix&in mOther)",
                    "documentation": null
                },
                {
                    "name": "MatrixMul",
                    "declaration": "void MatrixMul(const VMatrix&in vm, VMatrix&out Out) const",
                    "documentation": null
                },
                {
                    "name": "opAddAssign",
                    "declaration": "const VMatrix& operator+=(const VMatrix&in other)",
                    "documentation": null
                },
                {
                    "name": "opMul",
                    "declaration": "VMatrix operator*(const VMatrix&in mOther) const",
                    "documentation": null
                },
                {
                    "name": "opAdd",
                    "declaration": "VMatrix operator+(const VMatrix&in other) const",
                    "documentation": null
                },
                {
                    "name": "opSub",
                    "declaration": "VMatrix operator-(const VMatrix&in other) const",
                    "documentation": null
                },
                {
                    "name": "opNeg",
                    "declaration": "VMatrix operator-() const",
                    "documentation": null
                },
                {
                    "name": "opCom",
                    "declaration": "VMatrix operator~() const",
                    "documentation": null
                },
                {
                    "name": "Identity",
                    "declaration": "void Identity()",
                    "documentation": null
                },
                {
                    "name": "IsIdentity",
                    "declaration": "bool IsIdentity() const",
                    "documentation": null
                },
                {
                    "name": "SetupMatrixOrgAngles",
                    "declaration": "void SetupMatrixOrgAngles(const Vector&in origin, const QAngle&in vAngles)",
                    "documentation": null
                },
                {
                    "name": "InverseGeneral",
                    "declaration": "bool InverseGeneral(VMatrix&out vInverse) const",
                    "documentation": null
                },
                {
                    "name": "InverseTR",
                    "declaration": "void InverseTR(VMatrix&out mRet) const",
                    "documentation": null
                },
                {
                    "name": "IsRotationMatrix",
                    "declaration": "bool IsRotationMatrix() const",
                    "documentation": null
                },
                {
                    "name": "Element",
                    "declaration": "float Element(int i, int j) const",
                    "documentation": null
                },
                {
                    "name": "SetElement",
                    "declaration": "void SetElement(int i, int j, float flValue)",
                    "documentation": null
                },
                {
                    "name": "InverseTR",
                    "declaration": "VMatrix InverseTR() const",
                    "documentation": null
                },
                {
                    "name": "GetScale",
                    "declaration": "Vector GetScale() const",
                    "documentation": null
                },
                {
                    "name": "Scale",
                    "declaration": "VMatrix Scale(const Vector&in vScale)",
                    "documentation": null
                },
                {
                    "name": "NormalizeBasisVectors",
                    "declaration": "VMatrix NormalizeBasisVectors() const",
                    "documentation": null
                },
                {
                    "name": "Transpose",
                    "declaration": "VMatrix Transpose() const",
                    "documentation": null
                },
                {
                    "name": "Transpose3x3",
                    "declaration": "VMatrix Transpose3x3() const",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "Color",
            "method": [
                {
                    "name": "SetColor",
                    "declaration": "void SetColor(uint8, uint8, uint8, uint8)",
                    "documentation": null
                },
                {
                    "name": "GetColor",
                    "declaration": "void GetColor(uint8&out, uint8&out, uint8&out, uint8&out) const",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "uint8& operator[](int)",
                    "documentation": null
                },
                {
                    "name": "opIndex",
                    "declaration": "uint8& operator[](int) const",
                    "documentation": null
                }
            ],
            "property": [
                {
                    "name": "r",
                    "type": "uint8",
                    "is_const": false
                },
                {
                    "name": "g",
                    "type": "uint8",
                    "is_const": false
                },
                {
                    "name": "b",
                    "type": "uint8",
                    "is_const": false
                },
                {
                    "name": "a",
                    "type": "uint8",
                    "is_const": false
                },
                {
                    "name": "raw",
                    "type": "uint",
                    "is_const": false
                }
            ]
        },
        {
            "namespace": null,
            "name": "ConVar",
            "method": [
                {
                    "name": "GetInt",
                    "declaration": "int GetInt() const",
                    "documentation": null
                },
                {
                    "name": "GetFloat",
                    "declaration": "float GetFloat() const",
                    "documentation": null
                },
                {
                    "name": "GetBool",
                    "declaration": "bool GetBool() const",
                    "documentation": null
                },
                {
                    "name": "GetColor",
                    "declaration": "Color GetColor() const",
                    "documentation": null
                },
                {
                    "name": "GetString",
                    "declaration": "string GetString() const",
                    "documentation": null
                },
                {
                    "name": "GetStringFast",
                    "declaration": "string GetStringFast() const",
                    "documentation": null
                },
                {
                    "name": "GetDefault",
                    "declaration": "string GetDefault() const",
                    "documentation": null
                },
                {
                    "name": "SetValue",
                    "declaration": "void SetValue(int)",
                    "documentation": null
                },
                {
                    "name": "SetValue",
                    "declaration": "void SetValue(float)",
                    "documentation": null
                },
                {
                    "name": "SetValue",
                    "declaration": "void SetValue(const string&in)",
                    "documentation": null
                },
                {
                    "name": "SetValue",
                    "declaration": "void SetValue(Color)",
                    "documentation": null
                },
                {
                    "name": "Reset",
                    "declaration": "void Reset()",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "Rect",
            "property": [
                {
                    "name": "x",
                    "type": "int",
                    "is_const": false
                },
                {
                    "name": "y",
                    "type": "int",
                    "is_const": false
                },
                {
                    "name": "width",
                    "type": "int",
                    "is_const": false
                },
                {
                    "name": "height",
                    "type": "int",
                    "is_const": false
                }
            ]
        },
        {
            "namespace": null,
            "name": "Texture",
            "method": [
                {
                    "name": "IsError",
                    "declaration": "bool IsError() const",
                    "documentation": null
                },
                {
                    "name": "GetWidth",
                    "declaration": "int GetWidth() const",
                    "documentation": null
                },
                {
                    "name": "GetHeight",
                    "declaration": "int GetHeight() const",
                    "documentation": null
                },
                {
                    "name": "GetDepth",
                    "declaration": "int GetDepth() const",
                    "documentation": null
                },
                {
                    "name": "IsMipmapped",
                    "declaration": "bool IsMipmapped() const",
                    "documentation": null
                },
                {
                    "name": "GetImageFormat",
                    "declaration": "EImageFormat GetImageFormat() const",
                    "documentation": null
                },
                {
                    "name": "IsTranslucent",
                    "declaration": "bool IsTranslucent() const",
                    "documentation": null
                },
                {
                    "name": "IsRenderTarget",
                    "declaration": "bool IsRenderTarget() const",
                    "documentation": null
                },
                {
                    "name": "IsCubeMap",
                    "declaration": "bool IsCubeMap() const",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "Material",
            "method": [
                {
                    "name": "GetName",
                    "declaration": "string GetName() const",
                    "documentation": null
                },
                {
                    "name": "GetShader",
                    "declaration": "string GetShader() const",
                    "documentation": null
                },
                {
                    "name": "GetWidth",
                    "declaration": "int GetWidth()",
                    "documentation": null
                },
                {
                    "name": "GetHeight",
                    "declaration": "int GetHeight()",
                    "documentation": null
                },
                {
                    "name": "Refresh",
                    "declaration": "void Refresh()",
                    "documentation": null
                },
                {
                    "name": "IsError",
                    "declaration": "bool IsError() const",
                    "documentation": null
                },
                {
                    "name": "HasVar",
                    "declaration": "bool HasVar(const string&in)",
                    "documentation": null
                },
                {
                    "name": "GetVarType",
                    "declaration": "EMaterialVarType GetVarType(const string&in)",
                    "documentation": null
                },
                {
                    "name": "SetIntValue",
                    "declaration": "void SetIntValue(const string&in, int)",
                    "documentation": null
                },
                {
                    "name": "SetFloatValue",
                    "declaration": "void SetFloatValue(const string&in, float)",
                    "documentation": null
                },
                {
                    "name": "SetStringValue",
                    "declaration": "void SetStringValue(const string&in, const string&in)",
                    "documentation": null
                },
                {
                    "name": "SetTextureValue",
                    "declaration": "void SetTextureValue(const string&in, Texture@)",
                    "documentation": null
                },
                {
                    "name": "SetMaterialValue",
                    "declaration": "void SetMaterialValue(const string&in, Material@)",
                    "documentation": null
                },
                {
                    "name": "SetMatrixValue",
                    "declaration": "void SetMatrixValue(const string&in, const VMatrix&in)",
                    "documentation": null
                },
                {
                    "name": "SetVectorValue",
                    "declaration": "void SetVectorValue(const string&in, const Vector&in)",
                    "documentation": null
                },
                {
                    "name": "SetVector4Value",
                    "declaration": "void SetVector4Value(const string&in, const Vector4D&in)",
                    "documentation": null
                },
                {
                    "name": "SetVector2Value",
                    "declaration": "void SetVector2Value(const string&in, const Vector2D&in)",
                    "documentation": null
                },
                {
                    "name": "GetIntValue",
                    "declaration": "int GetIntValue(const string&in)",
                    "documentation": null
                },
                {
                    "name": "GetFloatValue",
                    "declaration": "float GetFloatValue(const string&in)",
                    "documentation": null
                },
                {
                    "name": "GetStringValue",
                    "declaration": "string GetStringValue(const string&in)",
                    "documentation": null
                },
                {
                    "name": "GetTextureValue",
                    "declaration": "Texture@ GetTextureValue(const string&in)",
                    "documentation": null
                },
                {
                    "name": "GetMaterialValue",
                    "declaration": "Material@ GetMaterialValue(const string&in)",
                    "documentation": null
                },
                {
                    "name": "GetMatrixValue",
                    "declaration": "VMatrix GetMatrixValue(const string&in)",
                    "documentation": null
                },
                {
                    "name": "GetVectorValue",
                    "declaration": "Vector GetVectorValue(const string&in)",
                    "documentation": null
                },
                {
                    "name": "GetVector2Value",
                    "declaration": "Vector2D GetVector2Value(const string&in)",
                    "documentation": null
                },
                {
                    "name": "GetVector4Value",
                    "declaration": "Vector4D GetVector4Value(const string&in)",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "RenderContext",
            "method": [
                {
                    "name": "PushRenderTargetAndViewport",
                    "declaration": "void PushRenderTargetAndViewport(Texture@, int, int, int, int)",
                    "documentation": null
                },
                {
                    "name": "PushRenderTargetAndViewport",
                    "declaration": "void PushRenderTargetAndViewport(Texture@)",
                    "documentation": null
                },
                {
                    "name": "PopRenderTargetAndViewport",
                    "declaration": "void PopRenderTargetAndViewport()",
                    "documentation": null
                },
                {
                    "name": "SetViewport",
                    "declaration": "void SetViewport(int, int, int, int)",
                    "documentation": null
                },
                {
                    "name": "GetViewport",
                    "declaration": "void GetViewport(int&out, int&out, int&out, int&out)",
                    "documentation": null
                },
                {
                    "name": "GetRenderTarget",
                    "declaration": "Texture@ GetRenderTarget()",
                    "documentation": null
                },
                {
                    "name": "SetRenderTarget",
                    "declaration": "void SetRenderTarget(Texture@)",
                    "documentation": null
                },
                {
                    "name": "SetMatrix",
                    "declaration": "void SetMatrix(EMatrixMode, const VMatrix&in)",
                    "documentation": null
                },
                {
                    "name": "ClearMatrix",
                    "declaration": "void ClearMatrix(EMatrixMode)",
                    "documentation": null
                },
                {
                    "name": "GetMatrix",
                    "declaration": "VMatrix GetMatrix(EMatrixMode)",
                    "documentation": null
                },
                {
                    "name": "CopyRenderTargetToTexture",
                    "declaration": "void CopyRenderTargetToTexture(Texture@)",
                    "documentation": null
                },
                {
                    "name": "BindLocalCubemap",
                    "declaration": "void BindLocalCubemap(Texture@)",
                    "documentation": null
                },
                {
                    "name": "ClearBuffers",
                    "declaration": "void ClearBuffers(bool, bool, bool)",
                    "documentation": null
                },
                {
                    "name": "SetClearColor",
                    "declaration": "void SetClearColor(Color)",
                    "documentation": null
                },
                {
                    "name": "Bind",
                    "declaration": "void Bind(Material@)",
                    "documentation": null
                },
                {
                    "name": "DrawScreenSpaceRectangle",
                    "declaration": "void DrawScreenSpaceRectangle(Material@, float, float, float, float, float, float, float, float)",
                    "documentation": null
                },
                {
                    "name": "SetDepthRange",
                    "declaration": "void SetDepthRange(float, float)",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "CollisionProperty",
            "method": [
                {
                    "name": "GetOBBMins",
                    "declaration": "const Vector& GetOBBMins() const",
                    "documentation": null
                },
                {
                    "name": "GetOBBMinsPreScaled",
                    "declaration": "const Vector& GetOBBMinsPreScaled() const",
                    "documentation": null
                },
                {
                    "name": "GetOBBMaxs",
                    "declaration": "const Vector& GetOBBMaxs() const",
                    "documentation": null
                },
                {
                    "name": "GetOBBMaxsPreScaled",
                    "declaration": "const Vector& GetOBBMaxsPreScaled() const",
                    "documentation": null
                },
                {
                    "name": "GetBoundingRadius",
                    "declaration": "float GetBoundingRadius() const",
                    "documentation": null
                },
                {
                    "name": "GetOBBSize",
                    "declaration": "const Vector& GetOBBSize() const",
                    "documentation": null
                },
                {
                    "name": "GetCollisionAngles",
                    "declaration": "const QAngle& GetCollisionAngles() const",
                    "documentation": null
                },
                {
                    "name": "GetCollisionGroup",
                    "declaration": "int GetCollisionGroup() const",
                    "documentation": null
                },
                {
                    "name": "GetCollisionOrigin",
                    "declaration": "const Vector& GetCollisionOrigin() const",
                    "documentation": null
                },
                {
                    "name": "SetCollisionBounds",
                    "declaration": "void SetCollisionBounds(const Vector&in, const Vector&in)",
                    "documentation": null
                },
                {
                    "name": "SetSolid",
                    "declaration": "void SetSolid(ESolidType)",
                    "documentation": null
                },
                {
                    "name": "GetSolid",
                    "declaration": "ESolidType GetSolid() const",
                    "documentation": null
                },
                {
                    "name": "IsPointInBounds",
                    "declaration": "bool IsPointInBounds(const Vector&in) const",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "GameEvent",
            "method": [
                {
                    "name": "GetBool",
                    "declaration": "bool GetBool(const string&in name, bool def = false) const",
                    "documentation": null
                },
                {
                    "name": "GetInt",
                    "declaration": "int GetInt(const string&in name, int def = 0) const",
                    "documentation": null
                },
                {
                    "name": "GetUint64",
                    "declaration": "int GetUint64(const string&in name, uint64 def = 0) const",
                    "documentation": null
                },
                {
                    "name": "GetFloat",
                    "declaration": "float GetFloat(const string&in name, float def = 0) const",
                    "documentation": null
                },
                {
                    "name": "GetName",
                    "declaration": "string GetName() const",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "CommandArgs",
            "method": [
                {
                    "name": "ArgC",
                    "declaration": "int ArgC() const",
                    "documentation": null
                },
                {
                    "name": "GetCommandString",
                    "declaration": "string GetCommandString() const",
                    "documentation": null
                },
                {
                    "name": "Arg",
                    "declaration": "string Arg(int) const",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "cplane_t",
            "base_type": {
                "namespace": null,
                "name": "VPlane"
            },
            "method": [],
            "property": [
                {
                    "name": "m_Normal",
                    "type": "Vector",
                    "is_const": false
                },
                {
                    "name": "m_Dist",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "type",
                    "type": "uint8",
                    "is_const": false
                },
                {
                    "name": "signbits",
                    "type": "uint8",
                    "is_const": false
                }
            ]
        },
        {
            "namespace": null,
            "name": "StorageScope",
            "method": [
                {
                    "name": "Clear",
                    "declaration": "void Clear(const string&in)",
                    "documentation": null
                },
                {
                    "name": "ClearAll",
                    "declaration": "void ClearAll()",
                    "documentation": null
                },
                {
                    "name": "GetFloat",
                    "declaration": "float GetFloat(const string&in)",
                    "documentation": null
                },
                {
                    "name": "GetInt",
                    "declaration": "int GetInt(const string&in)",
                    "documentation": null
                },
                {
                    "name": "GetVector",
                    "declaration": "Vector GetVector(const string&in)",
                    "documentation": null
                },
                {
                    "name": "GetString",
                    "declaration": "string GetString(const string&in)",
                    "documentation": null
                },
                {
                    "name": "SetFloat",
                    "declaration": "void SetFloat(const string&in, float)",
                    "documentation": null
                },
                {
                    "name": "SetInt",
                    "declaration": "void SetInt(const string&in, int)",
                    "documentation": null
                },
                {
                    "name": "SetVector",
                    "declaration": "void SetVector(const string&in, const Vector&in)",
                    "documentation": null
                },
                {
                    "name": "SetString",
                    "declaration": "void SetString(const string&in, const string&in)",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "trace_t",
            "method": [
                {
                    "name": "opAssign",
                    "declaration": "trace_t& operator=(const trace_t&in)",
                    "documentation": null
                },
                {
                    "name": "DidHitWorld",
                    "declaration": "bool DidHitWorld() const",
                    "documentation": null
                },
                {
                    "name": "DidHitNonWorldEntity",
                    "declaration": "bool DidHitNonWorldEntity() const",
                    "documentation": null
                },
                {
                    "name": "GetEntityIndex",
                    "declaration": "int GetEntityIndex() const",
                    "documentation": null
                },
                {
                    "name": "DidHit",
                    "declaration": "bool DidHit() const",
                    "documentation": null
                }
            ],
            "property": [
                {
                    "name": "startpos",
                    "type": "Vector",
                    "is_const": false
                },
                {
                    "name": "endpos",
                    "type": "Vector",
                    "is_const": false
                },
                {
                    "name": "plane",
                    "type": "cplane_t",
                    "is_const": false
                },
                {
                    "name": "fraction",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "contents",
                    "type": "int",
                    "is_const": false
                },
                {
                    "name": "allsolid",
                    "type": "bool",
                    "is_const": false
                },
                {
                    "name": "startsolid",
                    "type": "bool",
                    "is_const": false
                },
                {
                    "name": "fractionleftsolid",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "hitgroup",
                    "type": "int",
                    "is_const": false
                },
                {
                    "name": "physicsbone",
                    "type": "int16",
                    "is_const": false
                },
                {
                    "name": "worldSurfaceIndex",
                    "type": "uint",
                    "is_const": false
                },
                {
                    "name": "hitbox",
                    "type": "int",
                    "is_const": false
                },
                {
                    "name": "ent",
                    "type": "CBaseEntity@",
                    "is_const": false
                }
            ]
        },
        {
            "namespace": null,
            "name": "FireBulletsInfo_t",
            "property": [
                {
                    "name": "iShots",
                    "type": "int",
                    "is_const": false
                },
                {
                    "name": "vecSrc",
                    "type": "Vector",
                    "is_const": false
                },
                {
                    "name": "vecDirShooting",
                    "type": "Vector",
                    "is_const": false
                },
                {
                    "name": "vecSpread",
                    "type": "Vector",
                    "is_const": false
                },
                {
                    "name": "flDistance",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "iAmmoType",
                    "type": "int",
                    "is_const": false
                },
                {
                    "name": "iTracerFreq",
                    "type": "int",
                    "is_const": false
                },
                {
                    "name": "flDamage",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "flPlayerDamage",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "nFlags",
                    "type": "int",
                    "is_const": false
                },
                {
                    "name": "flDamageForceScale",
                    "type": "float",
                    "is_const": false
                },
                {
                    "name": "bPrimaryAttack",
                    "type": "bool",
                    "is_const": false
                },
                {
                    "name": "pAttacker",
                    "type": "CBaseEntity@",
                    "is_const": false
                },
                {
                    "name": "pAdditionalIgnoreEnt",
                    "type": "CBaseEntity@",
                    "is_const": false
                }
            ]
        },
        {
            "namespace": null,
            "name": "CBaseEntity",
            "method": [
                {
                    "name": "Spawn",
                    "declaration": "void Spawn()",
                    "documentation": null
                },
                {
                    "name": "Precache",
                    "declaration": "void Precache()",
                    "documentation": null
                },
                {
                    "name": "SetModel",
                    "declaration": "bool SetModel(const string&in)",
                    "documentation": null
                },
                {
                    "name": "PrecacheModel",
                    "declaration": "void PrecacheModel(const string&in)",
                    "documentation": null
                },
                {
                    "name": "GetAbsOrigin",
                    "declaration": "const Vector& GetAbsOrigin() const",
                    "documentation": null
                },
                {
                    "name": "SetAbsOrigin",
                    "declaration": "void SetAbsOrigin(const Vector&in)",
                    "documentation": null
                },
                {
                    "name": "GetLocalOrigin",
                    "declaration": "const Vector& GetLocalOrigin() const",
                    "documentation": null
                },
                {
                    "name": "SetLocalOrigin",
                    "declaration": "void SetLocalOrigin(const Vector&in)",
                    "documentation": null
                },
                {
                    "name": "GetAbsAngles",
                    "declaration": "const QAngle& GetAbsAngles() const",
                    "documentation": null
                },
                {
                    "name": "SetAbsAngles",
                    "declaration": "void SetAbsAngles(const QAngle&in)",
                    "documentation": null
                },
                {
                    "name": "GetLocalAngles",
                    "declaration": "const QAngle& GetLocalAngles() const",
                    "documentation": null
                },
                {
                    "name": "SetLocalAngles",
                    "declaration": "void SetLocalAngles(const QAngle&in)",
                    "documentation": null
                },
                {
                    "name": "GetAbsVelocity",
                    "declaration": "const Vector& GetAbsVelocity() const",
                    "documentation": null
                },
                {
                    "name": "SetAbsVelocity",
                    "declaration": "void SetAbsVelocity(const Vector&in)",
                    "documentation": null
                },
                {
                    "name": "GetLocalVelocity",
                    "declaration": "const Vector& GetLocalVelocity() const",
                    "documentation": null
                },
                {
                    "name": "SetLocalVelocity",
                    "declaration": "void SetLocalVelocity(const Vector&in)",
                    "documentation": null
                },
                {
                    "name": "GetOwnerEntity",
                    "declaration": "CBaseEntity@ GetOwnerEntity() const",
                    "documentation": null
                },
                {
                    "name": "SetOwnerEntity",
                    "declaration": "void SetOwnerEntity(CBaseEntity@)",
                    "documentation": null
                },
                {
                    "name": "SetOwnerEntity",
                    "declaration": "void SetOwnerEntity(CBaseEntity@ parent, int attachment = -1)",
                    "documentation": null
                },
                {
                    "name": "GetTeamNumber",
                    "declaration": "int GetTeamNumber() const",
                    "documentation": null
                },
                {
                    "name": "ChangeTeam",
                    "declaration": "void ChangeTeam(int)",
                    "documentation": null
                },
                {
                    "name": "EyePosition",
                    "declaration": "Vector EyePosition() const",
                    "documentation": null
                },
                {
                    "name": "EyeAngles",
                    "declaration": "const QAngle& EyeAngles() const",
                    "documentation": null
                },
                {
                    "name": "LocalEyeAngles",
                    "declaration": "const QAngle& LocalEyeAngles() const",
                    "documentation": null
                },
                {
                    "name": "Forward",
                    "declaration": "Vector Forward() const",
                    "documentation": null
                },
                {
                    "name": "Up",
                    "declaration": "Vector Up() const",
                    "documentation": null
                },
                {
                    "name": "Left",
                    "declaration": "Vector Left() const",
                    "documentation": null
                },
                {
                    "name": "CollisionProp",
                    "declaration": "const CollisionProperty@ CollisionProp() const",
                    "documentation": null
                },
                {
                    "name": "CollisionProp",
                    "declaration": "CollisionProperty@ CollisionProp()",
                    "documentation": null
                },
                {
                    "name": "SetMoveType",
                    "declaration": "void SetMoveType(EMoveType val, EMoveCollide moveCollide = MOVECOLLIDE_DEFAULT)",
                    "documentation": null
                },
                {
                    "name": "GetMoveType",
                    "declaration": "EMoveType GetMoveType() const",
                    "documentation": null
                },
                {
                    "name": "SetMoveCollide",
                    "declaration": "void SetMoveCollide(EMoveCollide)",
                    "documentation": null
                },
                {
                    "name": "GetMoveCollide",
                    "declaration": "EMoveCollide GetMoveCollide() const",
                    "documentation": null
                },
                {
                    "name": "GetMoveParent",
                    "declaration": "CBaseEntity@ GetMoveParent() const",
                    "documentation": null
                },
                {
                    "name": "SetSolid",
                    "declaration": "void SetSolid(ESolidType)",
                    "documentation": null
                },
                {
                    "name": "GetSolid",
                    "declaration": "ESolidType GetSolid() const",
                    "documentation": null
                },
                {
                    "name": "SetCollisionBounds",
                    "declaration": "void SetCollisionBounds(const Vector&in, const Vector&in)",
                    "documentation": null
                },
                {
                    "name": "EmitSound",
                    "declaration": "void EmitSound(const string&in)",
                    "documentation": null
                },
                {
                    "name": "StopSound",
                    "declaration": "void StopSound(const string&in)",
                    "documentation": null
                },
                {
                    "name": "GetHealth",
                    "declaration": "int GetHealth() const",
                    "documentation": null
                },
                {
                    "name": "GetMaxHealth",
                    "declaration": "int GetMaxHealth() const",
                    "documentation": null
                },
                {
                    "name": "SetHealth",
                    "declaration": "void SetHealth(int)",
                    "documentation": null
                },
                {
                    "name": "FireBullets",
                    "declaration": "void FireBullets(const FireBulletsInfo_t&in)",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "CBaseAnimating",
            "base_type": {
                "namespace": null,
                "name": "CBaseEntity"
            },
            "method": [
                {
                    "name": "LookupAttachment",
                    "declaration": "int LookupAttachment(const string&in)",
                    "documentation": null
                },
                {
                    "name": "GetAttachment",
                    "declaration": "bool GetAttachment(int, Vector&out, QAngle&out)",
                    "documentation": null
                }
            ]
        },
        {
            "namespace": null,
            "name": "CBaseCombatWeapon",
            "base_type": {
                "namespace": null,
                "name": "CBaseAnimating"
            },
            "method": [
                {
                    "name": "PrimaryAttack",
                    "declaration": "void PrimaryAttack()",
                    "documentation": null
                },
                {
                    "name": "SecondaryAttack",
                    "declaration": "void SecondaryAttack()",
                    "documentation": null
                },
                {
                    "name": "GetOwner",
                    "declaration": "CBaseEntity@ GetOwner() const",
                    "documentation": null
                }
            ]
        }
    ]
}